<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Kim Hung Bui</title>
<link>https://kimhungbui.github.io/programming.html</link>
<atom:link href="https://kimhungbui.github.io/programming.xml" rel="self" type="application/rss+xml"/>
<description>My Personal Website</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Thu, 12 Jun 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Logistic regression</title>
  <dc:creator>Your name</dc:creator>
  <link>https://kimhungbui.github.io/programming/deep-learning-interview/</link>
  <description><![CDATA[ 




<section id="introduction-to-logistic-regression" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction to Logistic Regression</h1>
<p><em>Logistic regression</em>(Tolles and Meurer, 2016) is a model named after the logistic function, which plays a central role in the model.</p>
<p>Originally, the logistic function was created from typical statistical models of population growth. This function takes an S-shaped form and maps real values to a range in <img src="https://latex.codecogs.com/png.latex?(0,%20L)">. The general mathematical formula of the logistic function is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20%5Cfrac%7BL%7D%7B1%20+%20e%5E%7B-k(x%20-%20x_0)%7D%7D%20%5Ctag%7B1%7D%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x_0"> is the value at the midpoint of the logistic curve,</li>
<li><img src="https://latex.codecogs.com/png.latex?k"> is the growth rate of the logistic function,</li>
<li><img src="https://latex.codecogs.com/png.latex?L"> is the maximum value of the logistic function.</li>
</ul>
<hr>
<p>The logistic regression model is often used in classification tasks, especially binary classification, even though the term “regression” is included in its name. The upcoming sections will explain why this naming convention was adopted.</p>
</section>
<section id="general-concepts" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> General Concepts</h1>
<section id="problem-1-increase-observation" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="problem-1-increase-observation"><span class="header-section-number">2.1</span> Problem 1: Increase observation</h2>
<p><em>True or False:</em> For a fixed number of observations in a data set, introducing more variables normally generates a model that has a better fit to the data. What may be the drawback of such a model fitting strategy?</p>
<p>Example:</p>
<div id="2b59c255" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PolynomialFeatures</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mean_squared_error</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create synthetic data</span></span>
<span id="cb1-9">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-10">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb1-11">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.rand(n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sin(X).ravel() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples)</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split into training and test sets</span></span>
<span id="cb1-15">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Polynomial degrees to test</span></span>
<span id="cb1-18">degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb1-19"></span>
<span id="cb1-20">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, degree <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(degrees, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate polynomial features</span></span>
<span id="cb1-24">    poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PolynomialFeatures(degree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>degree)</span>
<span id="cb1-25">    X_train_poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly.fit_transform(X_train)</span>
<span id="cb1-26">    X_test_poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly.transform(X_test)</span>
<span id="cb1-27"></span>
<span id="cb1-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit model</span></span>
<span id="cb1-29">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb1-30">    model.fit(X_train_poly, y_train)</span>
<span id="cb1-31"></span>
<span id="cb1-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict</span></span>
<span id="cb1-33">    X_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-34">    X_plot_poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly.transform(X_plot)</span>
<span id="cb1-35">    y_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_plot_poly)</span>
<span id="cb1-36"></span>
<span id="cb1-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate errors</span></span>
<span id="cb1-38">    train_mse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_squared_error(y_train, model.predict(X_train_poly))</span>
<span id="cb1-39">    test_mse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_squared_error(y_test, model.predict(X_test_poly))</span>
<span id="cb1-40"></span>
<span id="cb1-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot</span></span>
<span id="cb1-42">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, i)</span>
<span id="cb1-43">    plt.scatter(X_train, y_train, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train data'</span>)</span>
<span id="cb1-44">    plt.scatter(X_test, y_test, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Test data'</span>)</span>
<span id="cb1-45">    plt.plot(X_plot, y_plot, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Degree </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>degree<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-46">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Degree </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>degree<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Train MSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_mse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Test MSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_mse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-47">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>)</span>
<span id="cb1-48">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)</span>
<span id="cb1-49">    plt.legend()</span>
<span id="cb1-50"></span>
<span id="cb1-51">plt.tight_layout()</span>
<span id="cb1-52">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kimhungbui.github.io/programming/deep-learning-interview/index_files/figure-html/cell-2-output-1.png" width="1430" height="375" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We see that: - Degree 1: (underfit): High bias, both train and test error are high - Degree 3 (good fit): Balanced bias-variance, good generalization. - Degree 9 (overfit): Train error very low, but test error high – model fits noise.</p>
<p><strong>True</strong> – Introducing more variables generally improves the model’s fit to the training data.<br>
However, there is a major drawback: it often leads to <strong>overfitting</strong>.</p>
<hr>
<section id="explanation" class="level3" data-number="2.1.1">
<h3 data-number="2.1.1" class="anchored" data-anchor-id="explanation"><span class="header-section-number">2.1.1</span> Explanation</h3>
<section id="why-the-fit-improves" class="level4">
<h4 class="anchored" data-anchor-id="why-the-fit-improves">Why the Fit Improves</h4>
<ul>
<li>In regression or classification tasks, adding more features gives the model more flexibility to match the training data.</li>
<li>This allows the model to capture finer patterns, reduce residuals, and minimize training error.</li>
</ul>
<p><strong>Example</strong>:<br>
In polynomial regression, increasing the degree (i.e., adding more variables) can make the curve pass through all data points, resulting in nearly zero training error.</p>
<hr>
</section>
</section>
<section id="drawbacks-of-this-strategy" class="level3" data-number="2.1.2">
<h3 data-number="2.1.2" class="anchored" data-anchor-id="drawbacks-of-this-strategy"><span class="header-section-number">2.1.2</span> Drawbacks of This Strategy</h3>
<section id="overfitting" class="level4">
<h4 class="anchored" data-anchor-id="overfitting">1. Overfitting</h4>
<ul>
<li>A model that fits the training data too well may learn noise or random fluctuations instead of the true underlying patterns.</li>
<li>This results in poor generalization to unseen or test data.</li>
</ul>
</section>
<section id="increased-variance" class="level4">
<h4 class="anchored" data-anchor-id="increased-variance">2. Increased Variance</h4>
<ul>
<li>More variables increase the model’s sensitivity to small changes in data.</li>
<li>A high-variance model may change dramatically with minor input changes.</li>
</ul>
</section>
<section id="curse-of-dimensionality" class="level4">
<h4 class="anchored" data-anchor-id="curse-of-dimensionality">3. Curse of Dimensionality</h4>
<ul>
<li>In high-dimensional spaces, data becomes sparse.</li>
<li>Concepts like distance, density, and similarity lose their meaning.</li>
<li>Many algorithms (e.g., k-NN, clustering) perform poorly in high dimensions.</li>
</ul>
</section>
<section id="interpretability" class="level4">
<h4 class="anchored" data-anchor-id="interpretability">4. Interpretability</h4>
<ul>
<li>Adding more variables makes the model harder to interpret.</li>
<li>This is a problem in domains where transparency is important (e.g., medicine, finance).</li>
</ul>
</section>
<section id="computational-cost" class="level4">
<h4 class="anchored" data-anchor-id="computational-cost">5. Computational Cost</h4>
<ul>
<li>More variables require more memory and longer training times.</li>
<li>Feature selection or dimensionality reduction may be needed to manage complexity.</li>
</ul>
<hr>
</section>
</section>
<section id="summary" class="level3" data-number="2.1.3">
<h3 data-number="2.1.3" class="anchored" data-anchor-id="summary"><span class="header-section-number">2.1.3</span> Summary</h3>
<p><strong>True</strong> – Adding more variables generally improves the fit on training data,<br>
but it increases the risk of <strong>overfitting</strong>, <strong>poor generalization</strong>, and <strong>computational burden</strong>.</p>
<hr>
</section>
<section id="best-practice" class="level3" data-number="2.1.4">
<h3 data-number="2.1.4" class="anchored" data-anchor-id="best-practice"><span class="header-section-number">2.1.4</span> Best Practice</h3>
<p>Use techniques like <strong>cross-validation</strong> and <strong>regularization</strong> (e.g., Lasso, Ridge, dropout)<br>
to balance model complexity and generalization performance.</p>
</section>
</section>
<section id="problem-2-odds" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="problem-2-odds"><span class="header-section-number">2.2</span> Problem 2: Odds</h2>
<p>Define the term “<strong>odds of success</strong>” both qualitatively and formally. Give a numerical example that stresses the relation between probability and odds of an event occurring.</p>
<section id="definition-odds-of-success" class="level3" data-number="2.2.1">
<h3 data-number="2.2.1" class="anchored" data-anchor-id="definition-odds-of-success"><span class="header-section-number">2.2.1</span> Definition: Odds of Success</h3>
</section>
<section id="qualitative-definition" class="level3" data-number="2.2.2">
<h3 data-number="2.2.2" class="anchored" data-anchor-id="qualitative-definition"><span class="header-section-number">2.2.2</span> Qualitative Definition</h3>
<p>The <strong>odds of success</strong> express how much more likely an event is to occur than not occur. It is often used in statistics and logistic regression.</p>
<ul>
<li>If an event is <strong>very likely</strong>, the odds are high.</li>
<li>If an event is <strong>unlikely</strong>, the odds are low.</li>
<li>If the event is <strong>equally likely to happen or not</strong>, the odds are 1 (or “even odds”).</li>
</ul>
</section>
<section id="formal-definition" class="level3" data-number="2.2.3">
<h3 data-number="2.2.3" class="anchored" data-anchor-id="formal-definition"><span class="header-section-number">2.2.3</span> Formal Definition</h3>
<p>Let <strong>p</strong> be the probability of success (i.e., the event occurring). Then the <strong>odds of success</strong> are defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BOdds%20of%20success%7D%20=%20%5Cfrac%7Bp%7D%7B1%20-%20p%7D%0A"></p>
<p>This compares the chance the event <em>does happen</em> (p) to the chance it <em>does not happen</em> (1 - p).</p>
<hr>
</section>
<section id="numerical-example" class="level3" data-number="2.2.4">
<h3 data-number="2.2.4" class="anchored" data-anchor-id="numerical-example"><span class="header-section-number">2.2.4</span> Numerical Example</h3>
<p>Suppose the probability of success is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap%20=%200.75%0A"></p>
<p>Then the odds of success are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BOdds%7D%20=%20%5Cfrac%7B0.75%7D%7B1%20-%200.75%7D%20=%20%5Cfrac%7B0.75%7D%7B0.25%7D%20=%203%0A"></p>
<p><strong>Interpretation</strong>:<br>
The event is <strong>3 times more likely</strong> to occur than not occur.<br>
In other words, for every 3 successes, we expect 1 failure.</p>
<hr>
</section>
<section id="additional-comparison" class="level3" data-number="2.2.5">
<h3 data-number="2.2.5" class="anchored" data-anchor-id="additional-comparison"><span class="header-section-number">2.2.5</span> Additional Comparison</h3>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Probability (p)</th>
<th>Odds = p / (1 - p)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0.5</td>
<td>1.0</td>
</tr>
<tr class="even">
<td>0.8</td>
<td>4.0</td>
</tr>
<tr class="odd">
<td>0.25</td>
<td>0.33</td>
</tr>
</tbody>
</table>
<p>As the probability increases toward 1, the odds increase toward infinity.</p>
<hr>
</section>
<section id="inverse-from-odds-to-probability" class="level3" data-number="2.2.6">
<h3 data-number="2.2.6" class="anchored" data-anchor-id="inverse-from-odds-to-probability"><span class="header-section-number">2.2.6</span> Inverse: From Odds to Probability</h3>
<p>If you are given the odds $ o $, you can convert back to probability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap%20=%20%5Cfrac%7Bo%7D%7B1%20+%20o%7D%0A"></p>
<p><strong>Example</strong>:<br>
If odds = 4, then</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap%20=%20%5Cfrac%7B4%7D%7B1%20+%204%7D%20=%20%5Cfrac%7B4%7D%7B5%7D%20=%200.8%0A"></p>
</section>
</section>
<section id="problem-3-interaction" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="problem-3-interaction"><span class="header-section-number">2.3</span> Problem 3: Interaction</h2>
<ol type="1">
<li>Define what is meant by the term “interaction”, in the context of a logistic regression predictor variable.</li>
<li>What is the simplest form of an interaction? Write its formulae.</li>
<li>What statistical tests can be used to attest the significance of an interaction term?</li>
</ol>
<section id="definition-of-interaction-in-logistic-regression" class="level3" data-number="2.3.1">
<h3 data-number="2.3.1" class="anchored" data-anchor-id="definition-of-interaction-in-logistic-regression"><span class="header-section-number">2.3.1</span> 1. Definition of Interaction in Logistic Regression</h3>
<p>In logistic regression, an <strong>interaction</strong> occurs when the <strong>effect of one predictor variable on the outcome depends on the level of another predictor variable</strong>.</p>
<p>This means the predictors do not act independently: the combined effect of two variables is <strong>not simply additive</strong> on the log-odds scale.</p>
<p><strong>Example</strong>:<br>
If <img src="https://latex.codecogs.com/png.latex?X_1"> is age and <img src="https://latex.codecogs.com/png.latex?X_2"> is smoking status, an interaction term (<img src="https://latex.codecogs.com/png.latex?X_1%20%5Ccdot%20X_2">) would capture how the effect of age on the probability of disease differs between smokers and non-smokers.</p>
<hr>
</section>
<section id="simplest-form-of-an-interaction" class="level3" data-number="2.3.2">
<h3 data-number="2.3.2" class="anchored" data-anchor-id="simplest-form-of-an-interaction"><span class="header-section-number">2.3.2</span> 2. Simplest Form of an Interaction</h3>
<p>The simplest interaction involves <strong>two variables</strong> in a logistic regression model. The formula (on the log-odds scale) is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%5Cleft(%20%5Cfrac%7Bp%7D%7B1%20-%20p%7D%20%5Cright)%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20X_1%20+%20%5Cbeta_2%20X_2%20+%20%5Cbeta_3%20(X_1%20%5Ccdot%20X_2)%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?X_1"> and <img src="https://latex.codecogs.com/png.latex?X_2"> are predictors - <img src="https://latex.codecogs.com/png.latex?X_1%20%5Ccdot%20X_2"> is the interaction term - <img src="https://latex.codecogs.com/png.latex?%5Cbeta_3"> captures the <strong>change in effect</strong> of <img src="https://latex.codecogs.com/png.latex?X_1"> at different levels of <img src="https://latex.codecogs.com/png.latex?X_2"></p>
<p>If <img src="https://latex.codecogs.com/png.latex?%5Cbeta_3%20%5Cne%200">, there is a statistically significant interaction.</p>
<hr>
</section>
<section id="statistical-tests-for-interaction-terms" class="level3" data-number="2.3.3">
<h3 data-number="2.3.3" class="anchored" data-anchor-id="statistical-tests-for-interaction-terms"><span class="header-section-number">2.3.3</span> 3. Statistical Tests for Interaction Terms</h3>
<p>To test whether the interaction term significantly improves the model:</p>
<section id="a.-wald-test" class="level4">
<h4 class="anchored" data-anchor-id="a.-wald-test">a. <strong>Wald Test</strong></h4>
<ul>
<li>Tests if <img src="https://latex.codecogs.com/png.latex?%5Cbeta_3%20=%200"></li>
<li>Based on the standard error and coefficient</li>
<li>Commonly used in software output (e.g., <code>summary()</code> in R or <code>LogitResults</code> in statsmodels)</li>
</ul>
</section>
<section id="b.-likelihood-ratio-test-lrt" class="level4">
<h4 class="anchored" data-anchor-id="b.-likelihood-ratio-test-lrt">b. <strong>Likelihood Ratio Test (LRT)</strong></h4>
<ul>
<li>Compares:
<ul>
<li><strong>Model 1</strong>: with interaction term</li>
<li><strong>Model 2</strong>: without interaction term</li>
</ul></li>
<li>Null hypothesis: interaction term does not improve the model</li>
<li>LRT is more robust than the Wald test, especially in small samples</li>
</ul>
<p><strong>Steps</strong>: 1. Fit both models (with and without interaction) 2. Compute:<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Cchi%5E2%20=%20-2(%5Clog%20L_%7B%5Ctext%7Breduced%7D%7D%20-%20%5Clog%20L_%7B%5Ctext%7Bfull%7D%7D)%0A"> 3. Compare with chi-square distribution (df = 1 for one interaction term)</p>
</section>
<section id="c.-anova-analysis-of-deviance" class="level4">
<h4 class="anchored" data-anchor-id="c.-anova-analysis-of-deviance">c.&nbsp;<strong>ANOVA (Analysis of Deviance)</strong></h4>
<ul>
<li>Alternative approach to compare nested models in logistic regression.</li>
<li>Often used in R with <code>anova(model1, model2, test = "Chisq")</code></li>
</ul>
</section>
</section>
<section id="note-interaction-and-information-theory" class="level3" data-number="2.3.4">
<h3 data-number="2.3.4" class="anchored" data-anchor-id="note-interaction-and-information-theory"><span class="header-section-number">2.3.4</span> Note: Interaction and Information Theory</h3>
<p>In the context of <strong>information theory</strong>, interaction terms in a model can be interpreted as capturing <strong>mutual information</strong> between predictor variables <strong>and</strong> their <strong>combined influence</strong> on the target.</p>
<hr>
</section>
<section id="interaction-as-additional-information" class="level3" data-number="2.3.5">
<h3 data-number="2.3.5" class="anchored" data-anchor-id="interaction-as-additional-information"><span class="header-section-number">2.3.5</span> Interaction as Additional Information</h3>
<p>Without an interaction term, a model assumes <strong>additivity</strong>: each predictor affects the outcome independently. However, if two variables <em>jointly</em> influence the outcome, then their interaction carries <strong>additional information</strong> beyond their individual effects.</p>
<p>This added value can be viewed as:</p>
<ul>
<li><strong>Extra bits of information</strong> (in the sense of entropy reduction) gained by knowing the joint effect of variables</li>
<li><strong>Mutual information</strong> between variables that is <strong>relevant to the response</strong>, not captured in their marginal contributions</li>
</ul>
<hr>
</section>
<section id="impact-on-model-performance" class="level3" data-number="2.3.6">
<h3 data-number="2.3.6" class="anchored" data-anchor-id="impact-on-model-performance"><span class="header-section-number">2.3.6</span> Impact on Model Performance</h3>
<section id="improved-predictive-power" class="level4">
<h4 class="anchored" data-anchor-id="improved-predictive-power">1. <strong>Improved Predictive Power</strong></h4>
<ul>
<li>Captures complex relationships</li>
<li>Leads to better fit and generalization, if the interaction is real and not noise</li>
</ul>
</section>
<section id="reduced-residual-uncertainty" class="level4">
<h4 class="anchored" data-anchor-id="reduced-residual-uncertainty">2. <strong>Reduced Residual Uncertainty</strong></h4>
<ul>
<li>Reduces unexplained variation in the outcome</li>
<li>Analogous to decreasing entropy in the output distribution by incorporating more structure</li>
</ul>
</section>
<section id="better-feature-representation" class="level4">
<h4 class="anchored" data-anchor-id="better-feature-representation">3. <strong>Better Feature Representation</strong></h4>
<ul>
<li>Interaction terms effectively <strong>encode feature combinations</strong> that correlate strongly with the outcome</li>
<li>Similar to feature engineering guided by <strong>information gain</strong></li>
</ul>
<hr>
</section>
</section>
<section id="summary-1" class="level3" data-number="2.3.7">
<h3 data-number="2.3.7" class="anchored" data-anchor-id="summary-1"><span class="header-section-number">2.3.7</span> Summary</h3>
<p>Adding interaction terms allows the model to <strong>capture dependency structures</strong> among variables that are meaningful to the target, thereby increasing the <strong>information</strong> the model has about the outcome. In information-theoretic terms, interactions <strong>reduce conditional entropy</strong> and increase <strong>mutual information</strong> between inputs and output.</p>
</section>
</section>
<section id="problem-4" class="level2" data-number="2.4">
<h2 data-number="2.4" class="anchored" data-anchor-id="problem-4"><span class="header-section-number">2.4</span> Problem 4:</h2>
<p>True or False: In machine learning terminology, unsupervised learning refers to the mapping of input covariates to a target response variable that is attempted at being predicted when the labels are known.</p>
<p><strong>False</strong></p>
<section id="explanation-1" class="level3" data-number="2.4.1">
<h3 data-number="2.4.1" class="anchored" data-anchor-id="explanation-1"><span class="header-section-number">2.4.1</span> Explanation</h3>
<p>In <strong>machine learning</strong>, the statement describes <strong>supervised learning</strong>, not unsupervised learning.</p>
<hr>
</section>
<section id="definitions" class="level3" data-number="2.4.2">
<h3 data-number="2.4.2" class="anchored" data-anchor-id="definitions"><span class="header-section-number">2.4.2</span> Definitions:</h3>
<ul>
<li><p><strong>Supervised Learning</strong>:<br>
The algorithm learns to <strong>map input features (covariates)</strong> to a known <strong>target variable (labels)</strong>.<br>
Examples: classification, regression.</p></li>
<li><p><strong>Unsupervised Learning</strong>:<br>
The algorithm is used when <strong>labels are unknown</strong>. It finds <strong>patterns or structures</strong> in the data.<br>
Examples: clustering, dimensionality reduction.</p></li>
</ul>
<hr>
</section>
<section id="why-the-statement-is-false" class="level3" data-number="2.4.3">
<h3 data-number="2.4.3" class="anchored" data-anchor-id="why-the-statement-is-false"><span class="header-section-number">2.4.3</span> Why the Statement is False:</h3>
<blockquote class="blockquote">
<p><em>“Unsupervised learning refers to the mapping of input covariates to a target response variable that is attempted at being predicted when the labels are known.”</em></p>
</blockquote>
<ul>
<li>It incorrectly claims <strong>unsupervised learning uses known labels</strong>, which is <strong>not true</strong>.</li>
<li>This description actually fits <strong>supervised learning</strong>.</li>
</ul>
<hr>
</section>
<section id="corrected-version" class="level3" data-number="2.4.4">
<h3 data-number="2.4.4" class="anchored" data-anchor-id="corrected-version"><span class="header-section-number">2.4.4</span> Corrected Version:</h3>
<blockquote class="blockquote">
<p><strong>Supervised learning</strong> refers to the mapping of input covariates to a target response variable, using known labels.</p>
</blockquote>
</section>
</section>
<section id="problem-5" class="level2" data-number="2.5">
<h2 data-number="2.5" class="anchored" data-anchor-id="problem-5"><span class="header-section-number">2.5</span> Problem 5:</h2>
<p>Complete the following sentence: In the case of logistic regression, the response variable is the log of the odds of being classified in […].</p>
<p><strong>Complete sentence:</strong></p>
<p>In the case of logistic regression, the response variable is the <strong>log of the odds of being classified in the reference (or “positive”) category</strong>.</p>
<hr>
<section id="explanation-2" class="level3" data-number="2.5.1">
<h3 data-number="2.5.1" class="anchored" data-anchor-id="explanation-2"><span class="header-section-number">2.5.1</span> Explanation</h3>
<p>Logistic regression models the probability of a binary outcome by applying the <strong>logit function</strong> to the response:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%5Cleft(%5Cfrac%7Bp%7D%7B1%20-%20p%7D%5Cright)%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20X_1%20+%20%5Ccdots%20+%20%5Cbeta_k%20X_k%0A"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?p"> is the probability of the outcome being in the <strong>positive or reference class</strong> (e.g., “yes”, “success”, or class = 1).</li>
<li>The left-hand side is the <strong>log-odds</strong> of that outcome.</li>
<li>The model learns a linear relationship between the predictors and the <strong>log-odds</strong> of classification in the target category.</li>
</ul>
<p><strong>Solution:</strong></p>
<p>In the case of logistic regression, the response variable is the <strong>log of the odds of being classified in a group of binary or multi-class responses</strong>.<br>
This definition essentially demonstrates that <strong>odds can take the form of a vector</strong>.</p>
<hr>
</section>
<section id="clarification" class="level3" data-number="2.5.2">
<h3 data-number="2.5.2" class="anchored" data-anchor-id="clarification"><span class="header-section-number">2.5.2</span> Clarification:</h3>
<ul>
<li><p>For <strong>binary logistic regression</strong>, the model estimates: <img src="https://latex.codecogs.com/png.latex?%0A%5Clog%5Cleft(%5Cfrac%7Bp%7D%7B1%20-%20p%7D%5Cright)%0A"> where <img src="https://latex.codecogs.com/png.latex?p"> is the probability of being in the positive class.</p></li>
<li><p>For <strong>multinomial (multi-class) logistic regression</strong>, the model estimates a set of log-odds: <img src="https://latex.codecogs.com/png.latex?%0A%5Clog%5Cleft(%5Cfrac%7Bp_k%7D%7Bp_%7Breference%7D%7D%5Cright)%0A"> for each class <img src="https://latex.codecogs.com/png.latex?k%20%5Cne"> reference, resulting in a <strong>vector of log-odds</strong>, one for each class.</p></li>
</ul>
<p>Thus, in multiclass cases, the model output is not a single scalar log-odds but a <strong>vector of log-odds</strong>, supporting the idea that <strong>odds can be vector-valued</strong>.</p>
</section>
</section>
<section id="problem-6" class="level2" data-number="2.6">
<h2 data-number="2.6" class="anchored" data-anchor-id="problem-6"><span class="header-section-number">2.6</span> Problem 6:</h2>
<p>Describe how in a logistic regression model, a transformation to the response variable is applied to yield a probability distribution. Why is it considered a more informative representation of the response?</p>
<section id="logistic-regression-transformation-of-the-response-variable" class="level3" data-number="2.6.1">
<h3 data-number="2.6.1" class="anchored" data-anchor-id="logistic-regression-transformation-of-the-response-variable"><span class="header-section-number">2.6.1</span> Logistic Regression: Transformation of the Response Variable</h3>
<p>In logistic regression, the <strong>response variable</strong> is categorical (often binary), but the model must output continuous values to fit it using linear predictors. This is done by applying a <strong>logit transformation</strong>, and then its inverse—the <strong>logistic (sigmoid) function</strong>—to map outputs to probabilities.</p>
<hr>
</section>
<section id="step-by-step-transformation" class="level3" data-number="2.6.2">
<h3 data-number="2.6.2" class="anchored" data-anchor-id="step-by-step-transformation"><span class="header-section-number">2.6.2</span> Step-by-Step Transformation</h3>
<ol type="1">
<li><p><strong>Linear combination of predictors:</strong> <img src="https://latex.codecogs.com/png.latex?%0Az%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20X_1%20+%20%5Ccdots%20+%20%5Cbeta_k%20X_k%0A"></p></li>
<li><p><strong>Logit transformation (link function):</strong> <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Blogit%7D(p)%20=%20%5Clog%5Cleft(%5Cfrac%7Bp%7D%7B1%20-%20p%7D%5Cright)%20=%20z%0A"></p></li>
<li><p><strong>Inverse-logit (sigmoid) function to obtain probability:</strong> <img src="https://latex.codecogs.com/png.latex?%0Ap%20=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-z%7D%7D%0A"></p></li>
</ol>
<p>This maps any real-valued input <img src="https://latex.codecogs.com/png.latex?z%20%5Cin%20(-%5Cinfty,%20%5Cinfty)"> into a valid probability <img src="https://latex.codecogs.com/png.latex?p%20%5Cin%20(0,%201)">.</p>
<hr>
</section>
<section id="why-this-is-informative" class="level3" data-number="2.6.3">
<h3 data-number="2.6.3" class="anchored" data-anchor-id="why-this-is-informative"><span class="header-section-number">2.6.3</span> Why This Is Informative</h3>
<ul>
<li><p><strong>Probabilistic output</strong>: Unlike hard class labels, logistic regression provides the <strong>estimated probability</strong> of belonging to a class, which gives <strong>more nuanced information</strong>.</p></li>
<li><p><strong>Uncertainty awareness</strong>: Probabilities allow us to gauge <strong>confidence</strong> in predictions. For example, a prediction of 0.95 is more confident than 0.55.</p></li>
<li><p><strong>Threshold flexibility</strong>: You can choose decision thresholds based on the application (e.g., 0.5, 0.7) rather than being locked into fixed class predictions.</p></li>
<li><p><strong>Supports ranking and calibration</strong>: Probabilities are useful for <strong>ROC analysis</strong>, <strong>calibration</strong>, and <strong>expected loss minimization</strong>.</p></li>
</ul>
<hr>
</section>
<section id="summary-2" class="level3" data-number="2.6.4">
<h3 data-number="2.6.4" class="anchored" data-anchor-id="summary-2"><span class="header-section-number">2.6.4</span> Summary</h3>
<p>Logistic regression transforms the response variable through the <strong>logit link</strong> and uses its inverse to map model outputs to a <strong>valid probability distribution</strong>. This enables not only classification but also a <strong>more informative and interpretable</strong> representation of the predicted outcomes.</p>
</section>
<section id="note-pros-and-cons-of-output-transformations-in-logistic-regression" class="level3" data-number="2.6.5">
<h3 data-number="2.6.5" class="anchored" data-anchor-id="note-pros-and-cons-of-output-transformations-in-logistic-regression"><span class="header-section-number">2.6.5</span> Note: Pros and Cons of Output Transformations in Logistic Regression</h3>
<p>When transforming the response variable into a <strong>probability distribution</strong>, several methods can be used depending on the problem type. The most common are:</p>
<ul>
<li><strong>Sigmoid function</strong> — for binary classification</li>
<li><strong>Softmax function</strong> — for multi-class classification</li>
<li><strong>Classic normalization</strong> — general scaling of outputs (less used in classification)</li>
</ul>
<p>Below is a comparison of their <strong>pros and cons</strong>:</p>
<hr>
</section>
<section id="sigmoid-function" class="level3" data-number="2.6.6">
<h3 data-number="2.6.6" class="anchored" data-anchor-id="sigmoid-function"><span class="header-section-number">2.6.6</span> 1. Sigmoid Function</h3>
<p><strong>Definition:</strong> <img src="https://latex.codecogs.com/png.latex?%0A%5Csigma(z)%20=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-z%7D%7D%0A"></p>
<p><strong>Use Case:</strong> Binary classification (2 classes)</p>
<p><strong>Pros:</strong> - Simple and computationally efficient - Naturally maps real values to the interval (0, 1) - Interpretable as the probability of the positive class</p>
<p><strong>Cons:</strong> - Only supports binary output - Cannot capture interactions among multiple classes - Not ideal for mutually exclusive multi-class problems</p>
<hr>
</section>
<section id="softmax-function" class="level3" data-number="2.6.7">
<h3 data-number="2.6.7" class="anchored" data-anchor-id="softmax-function"><span class="header-section-number">2.6.7</span> 2. Softmax Function</h3>
<p><strong>Definition:</strong> <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bsoftmax%7D(z_i)%20=%20%5Cfrac%7Be%5E%7Bz_i%7D%7D%7B%5Csum_%7Bj=1%7D%5EK%20e%5E%7Bz_j%7D%7D%0A"></p>
<p><strong>Use Case:</strong> Multi-class classification (K &gt; 2, mutually exclusive classes)</p>
<p><strong>Pros:</strong> - Generalizes sigmoid to multi-class setting - Produces a valid probability distribution over <img src="https://latex.codecogs.com/png.latex?K"> classes - Probabilities sum to 1, suitable for cross-entropy loss</p>
<p><strong>Cons:</strong> - Sensitive to extreme values (due to exponentiation) - Less robust to outliers in inputs - Computationally more expensive than sigmoid</p>
<hr>
</section>
<section id="classic-normalization" class="level3" data-number="2.6.8">
<h3 data-number="2.6.8" class="anchored" data-anchor-id="classic-normalization"><span class="header-section-number">2.6.8</span> 3. Classic Normalization</h3>
<p><strong>Definition:</strong> <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bnormalized%7D(z_i)%20=%20%5Cfrac%7Bz_i%7D%7B%5Csum_%7Bj=1%7D%5EK%20z_j%7D%0A"></p>
<p><strong>Use Case:</strong> Sometimes used as an approximation or in non-logistic models</p>
<p><strong>Pros:</strong> - Simple and fast - Avoids exponentiation (numerically stable)</p>
<p><strong>Cons:</strong> - <strong>Not guaranteed to produce valid probabilities</strong> unless all <img src="https://latex.codecogs.com/png.latex?z_i%20%5Cge%200"> - Can yield values outside [0, 1] if inputs are not positive - Lacks probabilistic interpretation unless additional constraints are applied</p>
<hr>
</section>
<section id="summary-table" class="level3" data-number="2.6.9">
<h3 data-number="2.6.9" class="anchored" data-anchor-id="summary-table"><span class="header-section-number">2.6.9</span> Summary Table</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 15%">
<col style="width: 17%">
<col style="width: 11%">
<col style="width: 8%">
<col style="width: 23%">
<col style="width: 23%">
</colgroup>
<thead>
<tr class="header">
<th>Transformation</th>
<th>Best for</th>
<th>Output Range</th>
<th>Sums to 1</th>
<th>Interpretable Probabilities</th>
<th>Key Limitation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Sigmoid</strong></td>
<td>Binary classification</td>
<td>(0, 1)</td>
<td>No</td>
<td>Yes</td>
<td>Not suitable for &gt;2 classes</td>
</tr>
<tr class="even">
<td><strong>Softmax</strong></td>
<td>Multi-class classification</td>
<td>(0, 1)</td>
<td>Yes</td>
<td>Yes</td>
<td>Sensitive to outliers</td>
</tr>
<tr class="odd">
<td><strong>Normalization</strong></td>
<td>Heuristic scaling</td>
<td>Varies</td>
<td>Possibly</td>
<td>Not always</td>
<td>May not yield valid probs</td>
</tr>
</tbody>
</table>
<div id="8fde2257" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Raw model outputs (logits)</span></span>
<span id="cb2-5">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>])</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Sigmoid function (binary case, apply to a single logit)</span></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid(z):</span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>z))</span>
<span id="cb2-10"></span>
<span id="cb2-11">sigmoid_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigmoid(logits[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Binary case example</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Softmax function (multi-class case)</span></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> softmax(z):</span>
<span id="cb2-15">    exp_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(z))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stability improvement</span></span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> exp_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(exp_z)</span>
<span id="cb2-17"></span>
<span id="cb2-18">softmax_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(logits)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Classic normalization (not ideal for probabilities unless values are positive)</span></span>
<span id="cb2-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> normalize(z):</span>
<span id="cb2-22">    z_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(z)</span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> z_sum <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> z_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> np.zeros_like(z)</span>
<span id="cb2-24"></span>
<span id="cb2-25">normalize_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalize(logits)</span>
<span id="cb2-26"></span>
<span id="cb2-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print results</span></span>
<span id="cb2-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Raw logits:       "</span>, logits)</span>
<span id="cb2-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sigmoid (z=2.0):  "</span>, sigmoid_result)</span>
<span id="cb2-30"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Softmax:          "</span>, softmax_result)</span>
<span id="cb2-31"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalization:    "</span>, normalize_result)</span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot comparison</span></span>
<span id="cb2-34">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class 1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class 2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class 3'</span>]</span>
<span id="cb2-35">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels))</span>
<span id="cb2-36">width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb2-37"></span>
<span id="cb2-38">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb2-39">ax.bar(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> width, softmax_result, width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Softmax'</span>)</span>
<span id="cb2-40">ax.bar(x, normalize_result, width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Normalization'</span>)</span>
<span id="cb2-41">ax.bar(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width, [sigmoid_result, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sigmoid (binary)'</span>)</span>
<span id="cb2-42"></span>
<span id="cb2-43">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output Value'</span>)</span>
<span id="cb2-44">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output Transformations'</span>)</span>
<span id="cb2-45">ax.set_xticks(x)</span>
<span id="cb2-46">ax.set_xticklabels(labels)</span>
<span id="cb2-47">ax.legend()</span>
<span id="cb2-48">plt.tight_layout()</span>
<span id="cb2-49">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Raw logits:        [2.  1.  0.1]
Sigmoid (z=2.0):   0.8807970779778823
Softmax:           [0.65900114 0.24243297 0.09856589]
Normalization:     [0.64516129 0.32258065 0.03225806]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kimhungbui.github.io/programming/deep-learning-interview/index_files/figure-html/cell-3-output-2.png" width="662" height="470" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Summary: - Sigmoid applies to one logit for binary classification.</p>
<ul>
<li><p>Softmax distributes probabilities across multiple classes.</p></li>
<li><p>Normalization divides values by their sum but doesn’t always yield valid probabilities.</p></li>
</ul>
</section>
</section>
<section id="problem-7" class="level2" data-number="2.7">
<h2 data-number="2.7" class="anchored" data-anchor-id="problem-7"><span class="header-section-number">2.7</span> Problem 7:</h2>
<p>Complete the following sentence: Minimizing the negative log likelihood also means maximizing the […] of selecting the […] class.</p>
<p><strong>Complete sentence:</strong></p>
<p>Minimizing the negative log likelihood also means <strong>maximizing the likelihood of selecting the correct class</strong>.</p>
<section id="explanation-3" class="level3" data-number="2.7.1">
<h3 data-number="2.7.1" class="anchored" data-anchor-id="explanation-3"><span class="header-section-number">2.7.1</span> Explanation</h3>
<p>Minimizing the <strong>negative log likelihood (NLL)</strong> is equivalent to <strong>maximizing the likelihood</strong> of the model predicting the <strong>correct class</strong>.</p>
<section id="why" class="level4">
<h4 class="anchored" data-anchor-id="why">Why?</h4>
<p>Given: - A model that outputs predicted probabilities <img src="https://latex.codecogs.com/png.latex?p(y_i%20%5Cmid%20x_i)"> for each observation - True class labels <img src="https://latex.codecogs.com/png.latex?y_i"></p>
<p>Then the <strong>likelihood</strong> for the correct predictions is: <img src="https://latex.codecogs.com/png.latex?%0AL%20=%20%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20p(y_i%20%5Cmid%20x_i)%0A"></p>
<p>Taking the <strong>log-likelihood</strong>: <img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20L%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Clog%20p(y_i%20%5Cmid%20x_i)%0A"></p>
<p>The <strong>negative log-likelihood (NLL)</strong> is: <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BNLL%7D%20=%20-%5Clog%20L%20=%20-%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Clog%20p(y_i%20%5Cmid%20x_i)%0A"></p>
<p>So <strong>minimizing NLL</strong> is mathematically the same as <strong>maximizing the log-likelihood</strong>, which increases the probability assigned to the correct class.</p>
<hr>
</section>
</section>
<section id="python-code-illustration" class="level3" data-number="2.7.2">
<h3 data-number="2.7.2" class="anchored" data-anchor-id="python-code-illustration"><span class="header-section-number">2.7.2</span> Python Code Illustration</h3>
<p>Below is an example comparing NLL for different predicted probabilities of the correct class:</p>
<div id="c191b762" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulated predicted probabilities for the correct class</span></span>
<span id="cb4-5">p_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb4-6">nll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.log(p_correct)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Negative log-likelihood</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot</span></span>
<span id="cb4-9">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb4-10">plt.plot(p_correct, nll, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NLL = -log(p)'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'darkblue'</span>)</span>
<span id="cb4-11">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Negative Log-Likelihood vs. Probability of Correct Class'</span>)</span>
<span id="cb4-12">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted Probability for Correct Class'</span>)</span>
<span id="cb4-13">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Negative Log-Likelihood'</span>)</span>
<span id="cb4-14">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-15">plt.legend()</span>
<span id="cb4-16">plt.tight_layout()</span>
<span id="cb4-17">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kimhungbui.github.io/programming/deep-learning-interview/index_files/figure-html/cell-4-output-1.png" width="662" height="374" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>When the model assigns a high probability to the correct class, the NLL is low.</p>
<p>As the probability approaches 0, the NLL becomes very large.</p>
<p>Thus, minimizing NLL encourages the model to be more confident and accurate in predicting the correct class.</p>
</section>
<section id="step-by-step-understanding-negative-log-likelihood-nll" class="level3" data-number="2.7.3">
<h3 data-number="2.7.3" class="anchored" data-anchor-id="step-by-step-understanding-negative-log-likelihood-nll"><span class="header-section-number">2.7.3</span> Step-by-Step: Understanding Negative Log Likelihood (NLL)</h3>
<p>This walkthrough will help you see <strong>how and why minimizing NLL means maximizing the probability of the correct class</strong>, both conceptually and numerically.</p>
<hr>
<section id="step-1-define-the-task" class="level4">
<h4 class="anchored" data-anchor-id="step-1-define-the-task">Step 1: Define the task</h4>
<p>We have a binary classification model, and it predicts a probability for the <strong>correct class</strong>.</p>
<hr>
</section>
<section id="step-2-simulate-model-predictions" class="level4">
<h4 class="anchored" data-anchor-id="step-2-simulate-model-predictions">Step 2: Simulate model predictions</h4>
<p>We simulate predicted probabilities for the <strong>true class (label = 1)</strong>.</p>
</section>
<section id="code" class="level4">
<h4 class="anchored" data-anchor-id="code">Code:</h4>
<div id="c3a6d00d" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">predicted_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted probability for the correct class</span></span>
<span id="cb5-2">predicted_probs</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>[0.9, 0.7, 0.5, 0.3, 0.1]</code></pre>
</div>
</div>
<div id="cf3e57fb" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Probability → Negative Log-Likelihood"</span>)</span>
<span id="cb7-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> predicted_probs:</span>
<span id="cb7-5">    nll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.log(p)</span>
<span id="cb7-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> → </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nll<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Predicted Probability → Negative Log-Likelihood
0.9 → 0.1054
0.7 → 0.3567
0.5 → 0.6931
0.3 → 1.2040
0.1 → 2.3026</code></pre>
</div>
</div>
<div id="dcd5f376" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-2"></span>
<span id="cb9-3">p_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb9-4">nll_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.log(p_vals)</span>
<span id="cb9-5"></span>
<span id="cb9-6">plt.plot(p_vals, nll_vals, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NLL = -log(p)"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb9-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Probability for Correct Class"</span>)</span>
<span id="cb9-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Negative Log-Likelihood"</span>)</span>
<span id="cb9-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NLL vs. Predicted Probability"</span>)</span>
<span id="cb9-10">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-11">plt.legend()</span>
<span id="cb9-12">plt.tight_layout()</span>
<span id="cb9-13">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kimhungbui.github.io/programming/deep-learning-interview/index_files/figure-html/cell-7-output-1.png" width="662" height="470" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>When the model is confident and right (e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?p%20=%200.9">), the NLL is low.</p>
<p>When it’s unsure or wrong (e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?p%20=%200.1">), the NLL is high.</p>
<p>Therefore, minimizing NLL encourages the model to assign high probability to the correct class.</p>
</section>
</section>
</section>
<section id="problem-8" class="level2" data-number="2.8">
<h2 data-number="2.8" class="anchored" data-anchor-id="problem-8"><span class="header-section-number">2.8</span> Problem 8:</h2>
<p>Assume the probability of an event occurring is p = 0.1. 1. What are the odds of the event occurring?. 2. What are the log-odds of the event occurring?. 3. Construct the probability of the event as a ratio that equals 0.1.</p>
<section id="step-by-step-probability-odds-and-log-odds" class="level3" data-number="2.8.1">
<h3 data-number="2.8.1" class="anchored" data-anchor-id="step-by-step-probability-odds-and-log-odds"><span class="header-section-number">2.8.1</span> Step-by-Step: Probability, Odds, and Log-Odds</h3>
<p>Assume the probability of an event occurring is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap%20=%200.1%0A"></p>
<hr>
</section>
<section id="what-are-the-odds-of-the-event-occurring" class="level3" data-number="2.8.2">
<h3 data-number="2.8.2" class="anchored" data-anchor-id="what-are-the-odds-of-the-event-occurring"><span class="header-section-number">2.8.2</span> 1. What are the <strong>odds</strong> of the event occurring?</h3>
<p><strong>Definition:</strong> &gt; Odds are the ratio of the probability of the event <strong>occurring</strong> to the probability of it <strong>not occurring</strong>.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bodds%7D%20=%20%5Cfrac%7Bp%7D%7B1%20-%20p%7D%0A"></p>
</section>
<section id="calculation" class="level3" data-number="2.8.3">
<h3 data-number="2.8.3" class="anchored" data-anchor-id="calculation"><span class="header-section-number">2.8.3</span> Calculation:</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bodds%7D%20=%20%5Cfrac%7B0.1%7D%7B1%20-%200.1%7D%20=%20%5Cfrac%7B0.1%7D%7B0.9%7D%20%5Capprox%200.111%0A"></p>
<hr>
</section>
<section id="what-are-the-log-odds-logit-of-the-event" class="level3" data-number="2.8.4">
<h3 data-number="2.8.4" class="anchored" data-anchor-id="what-are-the-log-odds-logit-of-the-event"><span class="header-section-number">2.8.4</span> 2. What are the <strong>log-odds</strong> (logit) of the event?</h3>
<p><strong>Definition:</strong> &gt; Log-odds are the logarithm of the odds (also known as the <strong>logit function</strong>):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Blog-odds%7D%20=%20%5Clog%5Cleft(%5Cfrac%7Bp%7D%7B1%20-%20p%7D%5Cright)%0A"></p>
</section>
<section id="calculation-1" class="level3" data-number="2.8.5">
<h3 data-number="2.8.5" class="anchored" data-anchor-id="calculation-1"><span class="header-section-number">2.8.5</span> Calculation:</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%5Cleft(%5Cfrac%7B0.1%7D%7B0.9%7D%5Cright)%20=%20%5Clog(0.111...)%20%5Capprox%20-2.197%0A"></p>
<hr>
</section>
<section id="construct-the-probability-as-a-ratio-that-equals-0.1" class="level3" data-number="2.8.6">
<h3 data-number="2.8.6" class="anchored" data-anchor-id="construct-the-probability-as-a-ratio-that-equals-0.1"><span class="header-section-number">2.8.6</span> 3. Construct the probability as a ratio that equals 0.1</h3>
<p>We want to express:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Ctext%7Bfavorable%20outcomes%7D%7D%7B%5Ctext%7Btotal%20outcomes%7D%7D%20=%200.1%0A"></p>
<p>One example:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1%7D%7B10%7D%20=%200.1%0A"></p>
<p>So, this means <strong>1 favorable case out of 10 total cases</strong>, or 9 unfavorable cases.</p>
<hr>
</section>
<section id="summary-table-1" class="level3" data-number="2.8.7">
<h3 data-number="2.8.7" class="anchored" data-anchor-id="summary-table-1"><span class="header-section-number">2.8.7</span> Summary Table</h3>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Metric</th>
<th>Value</th>
<th>Formula</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Probability</td>
<td>0.1</td>
<td>given</td>
</tr>
<tr class="even">
<td>Odds</td>
<td>0.111</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B0.1%7D%7B0.9%7D"></td>
</tr>
<tr class="odd">
<td>Log-Odds</td>
<td>-2.197</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Clog%5Cleft(%5Cfrac%7B0.1%7D%7B0.9%7D%5Cright)"></td>
</tr>
<tr class="even">
<td>Ratio Form</td>
<td>1:9</td>
<td><img src="https://latex.codecogs.com/png.latex?1/10%20=%200.1"></td>
</tr>
</tbody>
</table>
</section>
<section id="intuition-behind-probability-odds-and-log-odds" class="level3" data-number="2.8.8">
<h3 data-number="2.8.8" class="anchored" data-anchor-id="intuition-behind-probability-odds-and-log-odds"><span class="header-section-number">2.8.8</span> Intuition Behind Probability, Odds, and Log-Odds</h3>
<p>Understanding <strong>why</strong> we use these representations helps clarify their role in models like logistic regression.</p>
<hr>
</section>
<section id="probability-p" class="level3" data-number="2.8.9">
<h3 data-number="2.8.9" class="anchored" data-anchor-id="probability-p"><span class="header-section-number">2.8.9</span> Probability (p)</h3>
<ul>
<li><strong>Intuitive measure</strong> of likelihood: ranges between 0 and 1.</li>
<li>Easy to interpret: “There is a 10% chance this will happen.”</li>
</ul>
<p>But: <strong>Not ideal for modeling</strong>, because probabilities are bounded, and small changes near 0 or 1 can be disproportionate.</p>
<hr>
</section>
<section id="odds-fracp1---p" class="level3" data-number="2.8.10">
<h3 data-number="2.8.10" class="anchored" data-anchor-id="odds-fracp1---p"><span class="header-section-number">2.8.10</span> Odds: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bp%7D%7B1%20-%20p%7D"></h3>
<ul>
<li>Represent <strong>relative chances</strong>: how likely something is vs.&nbsp;not.</li>
<li>Example: odds = 2 means “twice as likely to happen than not.”</li>
</ul>
<p>Odds are <strong>unbounded</strong> (0 to ∞), unlike probabilities. This makes them easier to model with <strong>linear functions</strong>.</p>
<hr>
</section>
<section id="log-odds-logit-logleftfracp1---pright" class="level3" data-number="2.8.11">
<h3 data-number="2.8.11" class="anchored" data-anchor-id="log-odds-logit-logleftfracp1---pright"><span class="header-section-number">2.8.11</span> Log-Odds (Logit): <img src="https://latex.codecogs.com/png.latex?%5Clog%5Cleft(%5Cfrac%7Bp%7D%7B1%20-%20p%7D%5Cright)"></h3>
<ul>
<li><strong>Transforms probabilities</strong> to the entire real line: <img src="https://latex.codecogs.com/png.latex?(-%5Cinfty,%20+%5Cinfty)">.</li>
<li>Linear in model parameters — makes <strong>logistic regression</strong> a linear model in log-odds space.</li>
<li>Symmetric: log-odds of 0 means <img src="https://latex.codecogs.com/png.latex?p%20=%200.5">.</li>
</ul>
<blockquote class="blockquote">
<p>This transformation enables optimization with gradient-based methods and maintains interpretability via the inverse sigmoid function.</p>
</blockquote>
<hr>
</section>
<section id="summary-why-use-log-odds" class="level3" data-number="2.8.12">
<h3 data-number="2.8.12" class="anchored" data-anchor-id="summary-why-use-log-odds"><span class="header-section-number">2.8.12</span> Summary: Why use log-odds?</h3>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Representation</th>
<th>Range</th>
<th>Good For</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Probability</td>
<td>[0, 1]</td>
<td>Intuition, interpretability</td>
</tr>
<tr class="even">
<td>Odds</td>
<td>[0, ∞)</td>
<td>Relative comparison</td>
</tr>
<tr class="odd">
<td>Log-Odds</td>
<td>(−∞, ∞)</td>
<td>Linear modeling, optimization</td>
</tr>
</tbody>
</table>
<p><strong>Log-odds give models a mathematically stable and interpretable way to reason about binary outcomes</strong> — especially for logistic regression.</p>
<div id="1cd02f27" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probabilities from 0.01 to 0.99 (avoid 0 and 1 to prevent log(0))</span></span>
<span id="cb10-5">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute odds and log-odds</span></span>
<span id="cb10-8">odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)</span>
<span id="cb10-9">log_odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(odds)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting</span></span>
<span id="cb10-12">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probability</span></span>
<span id="cb10-15">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(p, p, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb10-16">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability (p)"</span>)</span>
<span id="cb10-17">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability vs. Itself (Identity)"</span>)</span>
<span id="cb10-18">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Odds</span></span>
<span id="cb10-21">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(p, odds, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>)</span>
<span id="cb10-22">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Odds (p / (1 - p))"</span>)</span>
<span id="cb10-23">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability vs. Odds"</span>)</span>
<span id="cb10-24">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-25"></span>
<span id="cb10-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Log-Odds</span></span>
<span id="cb10-27">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(p, log_odds, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb10-28">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log-Odds (log(p / (1 - p)))"</span>)</span>
<span id="cb10-29">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability (p)"</span>)</span>
<span id="cb10-30">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability vs. Log-Odds"</span>)</span>
<span id="cb10-31">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].axhline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb10-32">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-33"></span>
<span id="cb10-34">plt.tight_layout()</span>
<span id="cb10-35">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kimhungbui.github.io/programming/deep-learning-interview/index_files/figure-html/cell-8-output-1.png" width="758" height="950" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="interpretation-of-the-plots" class="level3" data-number="2.8.13">
<h3 data-number="2.8.13" class="anchored" data-anchor-id="interpretation-of-the-plots"><span class="header-section-number">2.8.13</span> Interpretation of the Plots</h3>
</section>
<section id="top-plot-probability-vs.-itself" class="level3" data-number="2.8.14">
<h3 data-number="2.8.14" class="anchored" data-anchor-id="top-plot-probability-vs.-itself"><span class="header-section-number">2.8.14</span> Top Plot: Probability vs.&nbsp;Itself</h3>
<ul>
<li>This is the <strong>identity function</strong>, where the output equals the input.</li>
<li>Useful to visualize the <strong>bounded linearity</strong> of probability values.</li>
<li>Range is limited to [0, 1], which restricts direct use in linear models.</li>
</ul>
<hr>
</section>
<section id="middle-plot-probability-vs.-odds" class="level3" data-number="2.8.15">
<h3 data-number="2.8.15" class="anchored" data-anchor-id="middle-plot-probability-vs.-odds"><span class="header-section-number">2.8.15</span> Middle Plot: Probability vs.&nbsp;Odds</h3>
<ul>
<li>Odds are computed as:<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bodds%7D%20=%20%5Cfrac%7Bp%7D%7B1%20-%20p%7D%0A"></li>
<li>As <img src="https://latex.codecogs.com/png.latex?p%20%5Cto%201">, the odds grow <strong>rapidly</strong> (approaching ∞).</li>
<li>As <img src="https://latex.codecogs.com/png.latex?p%20%5Cto%200">, the odds approach 0.</li>
<li><strong>Nonlinear and asymmetric</strong>, making it difficult to model directly.</li>
</ul>
<hr>
</section>
<section id="bottom-plot-probability-vs.-log-odds-logit" class="level3" data-number="2.8.16">
<h3 data-number="2.8.16" class="anchored" data-anchor-id="bottom-plot-probability-vs.-log-odds-logit"><span class="header-section-number">2.8.16</span> Bottom Plot: Probability vs.&nbsp;Log-Odds (Logit)</h3>
<ul>
<li>Log-odds are computed as:<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Blog-odds%7D%20=%20%5Clog%5Cleft(%5Cfrac%7Bp%7D%7B1%20-%20p%7D%5Cright)%0A"></li>
<li>The transformation is:
<ul>
<li><strong>Smooth</strong></li>
<li><strong>Symmetric</strong> around <img src="https://latex.codecogs.com/png.latex?p%20=%200.5"></li>
<li><strong>Linear near <img src="https://latex.codecogs.com/png.latex?p%20=%200.5"></strong></li>
<li>Maps <img src="https://latex.codecogs.com/png.latex?p%20%5Cin%20(0,%201)"> to <img src="https://latex.codecogs.com/png.latex?(-%5Cinfty,%20+%5Cinfty)"></li>
</ul></li>
</ul>
<hr>
</section>
<section id="why-use-log-odds" class="level3" data-number="2.8.17">
<h3 data-number="2.8.17" class="anchored" data-anchor-id="why-use-log-odds"><span class="header-section-number">2.8.17</span> Why Use Log-Odds?</h3>
<p>The log-odds transformation allows:</p>
<ul>
<li>Applying <strong>linear models</strong> to binary classification.</li>
<li>Smooth optimization using gradient descent.</li>
<li>Easy interpretability: a one-unit increase in input causes a fixed increase in log-odds.</li>
</ul>
<p>Thus, <strong>log-odds</strong> are the foundation of <strong>logistic regression</strong>, enabling a linear combination of inputs to model a probability through the <strong>sigmoid inverse</strong>.</p>
</section>
</section>
<section id="problem-9." class="level2" data-number="2.9">
<h2 data-number="2.9" class="anchored" data-anchor-id="problem-9."><span class="header-section-number">2.9</span> Problem 9.</h2>
<p><strong>True or False:</strong> If the odds of success in a binary response is 4, the corresponding probability of success is 0.8.</p>
<hr>
<section id="step-by-step-solution" class="level3" data-number="2.9.1">
<h3 data-number="2.9.1" class="anchored" data-anchor-id="step-by-step-solution"><span class="header-section-number">2.9.1</span> Step-by-step Solution</h3>
<p>We are given: <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bodds%7D%20=%204%0A"></p>
<p>Recall the relationship between <strong>odds</strong> and <strong>probability</strong>: <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bodds%7D%20=%20%5Cfrac%7Bp%7D%7B1%20-%20p%7D%0A"></p>
<p>Solve for <img src="https://latex.codecogs.com/png.latex?p">: <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bp%7D%7B1%20-%20p%7D%20=%204%0A%5CRightarrow%20p%20=%204(1%20-%20p)%0A%5CRightarrow%20p%20=%204%20-%204p%0A%5CRightarrow%205p%20=%204%0A%5CRightarrow%20p%20=%20%5Cfrac%7B4%7D%7B5%7D%20=%200.8%0A"></p>
<hr>
</section>
<section id="final-answer" class="level3" data-number="2.9.2">
<h3 data-number="2.9.2" class="anchored" data-anchor-id="final-answer"><span class="header-section-number">2.9.2</span> Final Answer</h3>
<p><strong>True</strong> – If the odds are 4, the probability of success is <strong>0.8</strong>.</p>
</section>
</section>
<section id="problem-10" class="level2" data-number="2.10">
<h2 data-number="2.10" class="anchored" data-anchor-id="problem-10"><span class="header-section-number">2.10</span> Problem 10:</h2>
<p>Draw a graph of odds to probabilities, mapping the entire range of probabilities to their respective odds.</p>
<div id="c5262e95" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a range of probabilities from 0.01 to 0.99</span></span>
<span id="cb11-5">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb11-6">odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting</span></span>
<span id="cb11-9">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb11-10">plt.plot(p, odds, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb11-11">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability (p)"</span>)</span>
<span id="cb11-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Odds (p / (1 - p))"</span>)</span>
<span id="cb11-13">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mapping: Probability to Odds"</span>)</span>
<span id="cb11-14">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-15">plt.ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># limit to see behavior better near p=1</span></span>
<span id="cb11-16">plt.tight_layout()</span>
<span id="cb11-17">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kimhungbui.github.io/programming/deep-learning-interview/index_files/figure-html/cell-9-output-1.png" width="758" height="470" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="graph-probability-vs.-odds" class="level3" data-number="2.10.1">
<h3 data-number="2.10.1" class="anchored" data-anchor-id="graph-probability-vs.-odds"><span class="header-section-number">2.10.1</span> Graph: Probability vs.&nbsp;Odds</h3>
<p>This plot shows how probability values map to odds:</p>
<ul>
<li><p>Formula:<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bodds%7D%20=%20%5Cfrac%7Bp%7D%7B1%20-%20p%7D%0A"></p></li>
<li><p>As the probability approaches 1, the odds grow rapidly toward infinity.</p></li>
<li><p>As the probability approaches 0, the odds approach 0.</p></li>
<li><p>The function is <strong>nonlinear and increasing</strong>, with a sharp curve as $ p $.</p></li>
</ul>
<p>This graph helps visualize why odds are unbounded and why it’s useful to convert them to log-odds in modeling.</p>
</section>
</section>
<section id="problem-11" class="level2" data-number="2.11">
<h2 data-number="2.11" class="anchored" data-anchor-id="problem-11"><span class="header-section-number">2.11</span> Problem 11:</h2>
<p>The logistic regression model is a subset of a broader range of machine learning models known as generalized linear models (GLMs), which also include analysis of variance (ANOVA), vanilla linear regression, etc. There are three components to a GLM; identify these three components for binary logistic regression.</p>
<section id="components-of-a-generalized-linear-model-glm-in-binary-logistic-regression" class="level3" data-number="2.11.1">
<h3 data-number="2.11.1" class="anchored" data-anchor-id="components-of-a-generalized-linear-model-glm-in-binary-logistic-regression"><span class="header-section-number">2.11.1</span> Components of a Generalized Linear Model (GLM) in Binary Logistic Regression</h3>
<p>A <strong>Generalized Linear Model (GLM)</strong> has three main components. For <strong>binary logistic regression</strong>, they are:</p>
<hr>
</section>
<section id="random-component" class="level3" data-number="2.11.2">
<h3 data-number="2.11.2" class="anchored" data-anchor-id="random-component"><span class="header-section-number">2.11.2</span> 1. <strong>Random Component</strong></h3>
<p>Specifies the <strong>distribution</strong> of the response variable.</p>
<ul>
<li>In binary logistic regression, the response ( Y {0, 1} ) is assumed to follow a <strong>Bernoulli distribution</strong>: <img src="https://latex.codecogs.com/png.latex?%0AY%20%5Csim%20%5Ctext%7BBernoulli%7D(p)%0A"></li>
</ul>
<hr>
</section>
<section id="systematic-component" class="level3" data-number="2.11.3">
<h3 data-number="2.11.3" class="anchored" data-anchor-id="systematic-component"><span class="header-section-number">2.11.3</span> 2. <strong>Systematic Component</strong></h3>
<p>Represents the <strong>linear predictor</strong>, which is a linear combination of input features:</p>
<ul>
<li><p>Let ( x = (x_1, x_2, , x_n) ), then: <img src="https://latex.codecogs.com/png.latex?%0A%5Ceta%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_1%20+%20%5Cbeta_2%20x_2%20+%20%5Ccdots%20+%20%5Cbeta_n%20x_n%0A"></p></li>
<li><p>This is often written compactly as: <img src="https://latex.codecogs.com/png.latex?%0A%5Ceta%20=%20%5Cmathbf%7Bx%7D%5E%5Ctop%20%5Cboldsymbol%7B%5Cbeta%7D%0A"></p></li>
</ul>
<hr>
</section>
<section id="link-function" class="level3" data-number="2.11.4">
<h3 data-number="2.11.4" class="anchored" data-anchor-id="link-function"><span class="header-section-number">2.11.4</span> 3. <strong>Link Function</strong></h3>
<p>Connects the expected value of the response to the linear predictor.</p>
<ul>
<li><p>In logistic regression, the link function is the <strong>logit</strong> function: <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Blogit%7D(p)%20=%20%5Clog%5Cleft(%20%5Cfrac%7Bp%7D%7B1%20-%20p%7D%20%5Cright)%20=%20%5Ceta%0A"></p></li>
<li><p>The inverse of the logit gives the <strong>sigmoid function</strong> to recover probabilities: <img src="https://latex.codecogs.com/png.latex?%0Ap%20=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-%5Ceta%7D%7D%0A"></p></li>
</ul>
<hr>
</section>
<section id="summary-table-2" class="level3" data-number="2.11.5">
<h3 data-number="2.11.5" class="anchored" data-anchor-id="summary-table-2"><span class="header-section-number">2.11.5</span> Summary Table</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 28%">
<col style="width: 71%">
</colgroup>
<thead>
<tr class="header">
<th>GLM Component</th>
<th>Logistic Regression Specification</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Random Component</td>
<td>( Y (p) )</td>
</tr>
<tr class="even">
<td>Systematic Component</td>
<td>( = ^ )</td>
</tr>
<tr class="odd">
<td>Link Function</td>
<td>( (p) = ( ) )</td>
</tr>
</tbody>
</table>
</section>
<section id="adjusted-glm-components-for-voice-activity-detection-vad" class="level3" data-number="2.11.6">
<h3 data-number="2.11.6" class="anchored" data-anchor-id="adjusted-glm-components-for-voice-activity-detection-vad"><span class="header-section-number">2.11.6</span> Adjusted GLM Components for Voice Activity Detection (VAD)</h3>
<p>Assume the binary outcome: - <img src="https://latex.codecogs.com/png.latex?Y%20=%201">: voice activity detected - <img src="https://latex.codecogs.com/png.latex?Y%20=%200">: no voice activity detected</p>
<p>We define the GLM components for a logistic regression model as follows:</p>
<hr>
</section>
<section id="random-component-1" class="level3" data-number="2.11.7">
<h3 data-number="2.11.7" class="anchored" data-anchor-id="random-component-1"><span class="header-section-number">2.11.7</span> Random Component</h3>
<p>The response variable <img src="https://latex.codecogs.com/png.latex?Y"> is binary:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY%20%5Csim%20%5Ctext%7BBernoulli%7D(p)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?p%20=%20%5Cmathbb%7BP%7D(Y%20=%201%20%5Cmid%20%5Ctext%7Bfeatures%7D)"> represents the probability that voice activity is present in a given time frame.</p>
<hr>
</section>
<section id="systematic-components" class="level3" data-number="2.11.8">
<h3 data-number="2.11.8" class="anchored" data-anchor-id="systematic-components"><span class="header-section-number">2.11.8</span> Systematic Components</h3>
<p>We propose <strong>two alternative linear predictors</strong> using different input features:</p>
<section id="systematic-component-a" class="level4">
<h4 class="anchored" data-anchor-id="systematic-component-a">Systematic Component A:</h4>
<p>Use energy and zero-crossing rate: <img src="https://latex.codecogs.com/png.latex?%0A%5Ceta%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20%5Ccdot%20%5Ctext%7BEnergy%7D%20+%20%5Cbeta_2%20%5Ccdot%20%5Ctext%7BZCR%7D%0A"></p>
<ul>
<li><strong>Energy</strong>: overall signal power in the frame<br>
</li>
<li><strong>ZCR</strong> (Zero Crossing Rate): frequency of sign changes in waveform</li>
</ul>
</section>
<section id="systematic-component-b" class="level4">
<h4 class="anchored" data-anchor-id="systematic-component-b">Systematic Component B:</h4>
<p>Use MFCC coefficients (common in speech processing): <img src="https://latex.codecogs.com/png.latex?%0A%5Ceta%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20%5Ccdot%20%5Ctext%7BMFCC%7D_1%20+%20%5Cbeta_2%20%5Ccdot%20%5Ctext%7BMFCC%7D_2%20+%20%5Ccdots%20+%20%5Cbeta_%7B13%7D%20%5Ccdot%20%5Ctext%7BMFCC%7D_%7B13%7D%0A"></p>
<ul>
<li><strong>MFCCs</strong>: Mel-Frequency Cepstral Coefficients — compact representation of spectral shape</li>
</ul>
<hr>
</section>
</section>
<section id="link-function-1" class="level3" data-number="2.11.9">
<h3 data-number="2.11.9" class="anchored" data-anchor-id="link-function-1"><span class="header-section-number">2.11.9</span> Link Function</h3>
<p>Use the <strong>logit</strong> link function to relate the probability to the linear predictor: <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Blogit%7D(p)%20=%20%5Clog%5Cleft(%20%5Cfrac%7Bp%7D%7B1%20-%20p%7D%20%5Cright)%20=%20%5Ceta%0A"></p>
<p>or equivalently: <img src="https://latex.codecogs.com/png.latex?%0Ap%20=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-%5Ceta%7D%7D%0A"></p>
<hr>
</section>
<section id="summary-3" class="level3" data-number="2.11.10">
<h3 data-number="2.11.10" class="anchored" data-anchor-id="summary-3"><span class="header-section-number">2.11.10</span> Summary</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 23%">
<col style="width: 76%">
</colgroup>
<thead>
<tr class="header">
<th>Component</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Random Component</td>
<td><img src="https://latex.codecogs.com/png.latex?Y%20%5Csim%20%5Ctext%7BBernoulli%7D(p)"></td>
</tr>
<tr class="even">
<td>Systematic A</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Ceta%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20%5Ccdot%20%5Ctext%7BEnergy%7D%20+%20%5Cbeta_2%20%5Ccdot%20%5Ctext%7BZCR%7D"></td>
</tr>
<tr class="odd">
<td>Systematic B</td>
<td><img src="https://latex.codecogs.com/png.latex?eta%20=%20%5Cbeta_0%20+%20%5Csum_%7Bi=1%7D%5E%7B13%7D%20%5Cbeta_i%20%5Ccdot%20%5Ctext%7BMFCC%7D_i"></td>
</tr>
<tr class="even">
<td>Link Function</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Blogit%7D(p)%20=%20%5Clog%5Cleft(%20%5Cfrac%7Bp%7D%7B1%20-%20p%7D%20%5Cright)"></td>
</tr>
</tbody>
</table>
<p>This setup applies logistic regression to real-world audio-based classification.</p>
<div id="f3516272" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LogisticRegression</span>
<span id="cb12-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate data for two systematic components</span></span>
<span id="cb12-7">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-8">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulated features for Systematic A: Energy &amp; ZCR</span></span>
<span id="cb12-11">energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples)</span>
<span id="cb12-12">zcr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples)</span>
<span id="cb12-13">X_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.column_stack((energy, zcr))</span>
<span id="cb12-14"></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulated features for Systematic B: 13 MFCCs</span></span>
<span id="cb12-16">mfcc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>))</span>
<span id="cb12-17">X_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mfcc</span>
<span id="cb12-18"></span>
<span id="cb12-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulated binary labels based on true linear model</span></span>
<span id="cb12-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simulate_labels(X, true_coef):</span>
<span id="cb12-21">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> true_coef[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> true_coef[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb12-22">    probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>logits))</span>
<span id="cb12-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (np.random.rand(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(probs)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> probs).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>), probs</span>
<span id="cb12-24"></span>
<span id="cb12-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True coefficients for Systematic A and B</span></span>
<span id="cb12-26">true_coef_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Intercept, Energy, ZCR</span></span>
<span id="cb12-27">true_coef_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Intercept + MFCCs</span></span>
<span id="cb12-28"></span>
<span id="cb12-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate labels</span></span>
<span id="cb12-30">y_A, p_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate_labels(X_A, true_coef_A)</span>
<span id="cb12-31">y_B, p_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate_labels(X_B, true_coef_B)</span>
<span id="cb12-32"></span>
<span id="cb12-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit logistic regression models</span></span>
<span id="cb12-34">scaler_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler().fit(X_A)</span>
<span id="cb12-35">X_A_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_A.transform(X_A)</span>
<span id="cb12-36">model_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression().fit(X_A_std, y_A)</span>
<span id="cb12-37"></span>
<span id="cb12-38">scaler_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler().fit(X_B)</span>
<span id="cb12-39">X_B_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_B.transform(X_B)</span>
<span id="cb12-40">model_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression().fit(X_B_std, y_B)</span>
<span id="cb12-41"></span>
<span id="cb12-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict probabilities</span></span>
<span id="cb12-43">p_pred_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_A.predict_proba(X_A_std)[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-44">p_pred_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_B.predict_proba(X_B_std)[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-45"></span>
<span id="cb12-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot probability distributions</span></span>
<span id="cb12-47">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb12-48"></span>
<span id="cb12-49">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-50">plt.hist(p_pred_A[y_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'No Voice'</span>)</span>
<span id="cb12-51">plt.hist(p_pred_A[y_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Voice'</span>)</span>
<span id="cb12-52">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Probabilities (Energy &amp; ZCR)"</span>)</span>
<span id="cb12-53">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability of Voice Activity"</span>)</span>
<span id="cb12-54">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span>
<span id="cb12-55">plt.legend()</span>
<span id="cb12-56"></span>
<span id="cb12-57">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-58">plt.hist(p_pred_B[y_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'No Voice'</span>)</span>
<span id="cb12-59">plt.hist(p_pred_B[y_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Voice'</span>)</span>
<span id="cb12-60">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Probabilities (MFCC Features)"</span>)</span>
<span id="cb12-61">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability of Voice Activity"</span>)</span>
<span id="cb12-62">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span>
<span id="cb12-63">plt.legend()</span>
<span id="cb12-64"></span>
<span id="cb12-65">plt.tight_layout()</span>
<span id="cb12-66">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kimhungbui.github.io/programming/deep-learning-interview/index_files/figure-html/cell-10-output-1.png" width="1142" height="470" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>What this illustrates: Logistic regression maps the linear combination of audio features (systematic component) to a probability of voice activity.</p>
<p>The predicted probability distributions show how well the features separate the two classes (voice vs.&nbsp;no voice).</p>
<p>This supports the GLM formulation where:</p>
<p>Inputs are combined linearly,</p>
<p>The output is transformed via the logit (sigmoid) link,</p>
<p>And the response is modeled as a Bernoulli random variable.</p>
</section>
</section>
<section id="problem-12" class="level2" data-number="2.12">
<h2 data-number="2.12" class="anchored" data-anchor-id="problem-12"><span class="header-section-number">2.12</span> Problem 12:</h2>
<p>Let us consider the <strong>logit transformation</strong>, i.e., <strong>log-odds</strong>. Assume a scenario in which the logit forms the linear decision boundary:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20%5Cleft(%20%5Cfrac%7B%5CPr(Y%20=%201%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%7B%5CPr(Y%20=%200%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%20%5Cright)%20=%20%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%20%5Ctag%7B2.1%7D%0A"></p>
<p>where: - <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> is a vector of systematic components (input features), - <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D"> is a vector of predictor coefficients, - <img src="https://latex.codecogs.com/png.latex?%5Ctheta_0"> is the intercept.</p>
<p><strong>Task:</strong><br>
Write the mathematical expression for the <strong>hyperplane</strong> that describes the <strong>decision boundary</strong> for this logistic regression model.</p>
<section id="logistic-regression-decision-boundary-using-logit" class="level3" data-number="2.12.1">
<h3 data-number="2.12.1" class="anchored" data-anchor-id="logistic-regression-decision-boundary-using-logit"><span class="header-section-number">2.12.1</span> Logistic Regression Decision Boundary (Using Logit)</h3>
<p>Given the logit model:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20%5Cleft(%20%5Cfrac%7B%5CPr(Y%20=%201%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%7B%5CPr(Y%20=%200%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%20%5Cright)%20=%20%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%0A"></p>
<p>This expression defines the <strong>log-odds</strong> as a linear function of input features <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D">.</p>
<hr>
</section>
<section id="step-1-set-the-decision-threshold" class="level3" data-number="2.12.2">
<h3 data-number="2.12.2" class="anchored" data-anchor-id="step-1-set-the-decision-threshold"><span class="header-section-number">2.12.2</span> Step 1: Set the Decision Threshold</h3>
<p>In binary classification, the decision boundary occurs when both classes are equally likely:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5CPr(Y%20=%201%20%5Cmid%20%5Cmathbf%7BX%7D)%20=%20%5CPr(Y%20=%200%20%5Cmid%20%5Cmathbf%7BX%7D)%20=%200.5%0A"></p>
<p>Thus, the odds ratio becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5CPr(Y%20=%201%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%7B%5CPr(Y%20=%200%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%20=%201%0A"></p>
<p>Taking the logarithm:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20%5Cleft(%20%5Cfrac%7B%5CPr(Y%20=%201%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%7B%5CPr(Y%20=%200%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%20%5Cright)%20=%200%0A"></p>
<hr>
</section>
<section id="step-2-solve-for-the-boundary" class="level3" data-number="2.12.3">
<h3 data-number="2.12.3" class="anchored" data-anchor-id="step-2-solve-for-the-boundary"><span class="header-section-number">2.12.3</span> Step 2: Solve for the Boundary</h3>
<p>Set the log-odds to zero in the original equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%20=%200%0A"></p>
<hr>
</section>
<section id="final-result-hyperplane-equation" class="level3" data-number="2.12.4">
<h3 data-number="2.12.4" class="anchored" data-anchor-id="final-result-hyperplane-equation"><span class="header-section-number">2.12.4</span> Final Result: Hyperplane Equation</h3>
<p>This is the equation of the <strong>decision boundary</strong> — a hyperplane that separates the feature space:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%20=%200%7D%0A"></p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%20%3E%200">, then <img src="https://latex.codecogs.com/png.latex?%5CPr(Y=1)%20%3E%200.5"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%20%3C%200">, then <img src="https://latex.codecogs.com/png.latex?%5CPr(Y=1)%20%3C%200.5"></li>
</ul>
<p>This linear boundary is fundamental in logistic regression for classification tasks.</p>
</section>
<section id="solution" class="level3" data-number="2.12.5">
<h3 data-number="2.12.5" class="anchored" data-anchor-id="solution"><span class="header-section-number">2.12.5</span> Solution</h3>
<p>The <strong>hyperplane</strong> that defines the <strong>decision boundary</strong> in a logistic regression model is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%20=%200%20%5Ctag%7B2.15%7D%0A"></p>
<hr>
</section>
<section id="derivation-from-logit-function" class="level3" data-number="2.12.6">
<h3 data-number="2.12.6" class="anchored" data-anchor-id="derivation-from-logit-function"><span class="header-section-number">2.12.6</span> Derivation from Logit Function</h3>
<p>We start from the <strong>logit model</strong>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20%5Cleft(%20%5Cfrac%7B%5CPr(Y%20=%201%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%7B%5CPr(Y%20=%200%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%20%5Cright)%20=%20%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%0A"></p>
<p>This expression defines the <strong>log-odds</strong> of the response variable <img src="https://latex.codecogs.com/png.latex?Y"> being 1 as a linear function of the input vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D">.</p>
<p>At the <strong>decision boundary</strong>, we are equally likely to classify the outcome as either class (i.e., <img src="https://latex.codecogs.com/png.latex?%5CPr(Y=1)%20=%20%5CPr(Y=0)%20=%200.5">). This implies:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5CPr(Y%20=%201%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%7B%5CPr(Y%20=%200%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%20=%201%0A"></p>
<p>Taking the logarithm:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20%5Cleft(%20%5Cfrac%7B%5CPr(Y%20=%201%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%7B%5CPr(Y%20=%200%20%5Cmid%20%5Cmathbf%7BX%7D)%7D%20%5Cright)%20=%200%0A"></p>
<p>Now set the left-hand side of the model equal to 0:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%20=%200%0A"></p>
<hr>
</section>
<section id="conclusion" class="level3" data-number="2.12.7">
<h3 data-number="2.12.7" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">2.12.7</span> Conclusion</h3>
<p>The equation</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%20=%200%7D%0A"></p>
<p>is the <strong>mathematical expression of the hyperplane</strong> that separates the classes. It forms the <strong>decision boundary</strong> in logistic regression, where the model predicts:</p>
<ul>
<li>Class 1 if <img src="https://latex.codecogs.com/png.latex?%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%20%3E%200"></li>
<li>Class 0 if <img src="https://latex.codecogs.com/png.latex?%5Ctheta_0%20+%20%5Cboldsymbol%7B%5Ctheta%7D%5ET%20%5Cmathbf%7BX%7D%20%3C%200"></li>
</ul>
</section>
</section>
<section id="problem-13-logit-and-sigmoid" class="level2" data-number="2.13">
<h2 data-number="2.13" class="anchored" data-anchor-id="problem-13-logit-and-sigmoid"><span class="header-section-number">2.13</span> Problem 13: Logit and Sigmoid</h2>
<p>True or False:</p>
<p><strong>Statement:</strong><br>
<em>The logit function and the natural logistic (sigmoid) function are inverses of each other.</em></p>
<p><strong>Answer:</strong><br>
<strong>True</strong></p>
<hr>
<section id="explanation-4" class="level3" data-number="2.13.1">
<h3 data-number="2.13.1" class="anchored" data-anchor-id="explanation-4"><span class="header-section-number">2.13.1</span> Explanation:</h3>
<ul>
<li><p>The <strong>sigmoid function</strong> (also known as the <strong>logistic function</strong>) is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma(z)%20=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-z%7D%7D%0A"></p></li>
<li><p>The <strong>logit function</strong> is the <strong>inverse</strong> of the sigmoid and is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Blogit%7D(p)%20=%20%5Clog%20%5Cleft(%20%5Cfrac%7Bp%7D%7B1%20-%20p%7D%20%5Cright)%0A"></p></li>
<li><p>These two functions are <strong>mathematical inverses</strong>:</p>
<ul>
<li>Applying the logit to the output of a sigmoid returns the original input.</li>
<li>Applying the sigmoid to the output of a logit returns the original probability.</li>
</ul></li>
</ul>
<hr>
</section>
<section id="additional-note" class="level3" data-number="2.13.2">
<h3 data-number="2.13.2" class="anchored" data-anchor-id="additional-note"><span class="header-section-number">2.13.2</span> Additional Note:</h3>
<p>The <strong>sigmoid function</strong> is widely used: - In <strong>binary classification</strong> to map a linear model’s output to a probability in [0, 1]. - As an <strong>activation function</strong> in artificial neural networks (although less common now compared to ReLU).</p>
<p>Thus, the statement is <strong>True</strong>.</p>
</section>
</section>
<section id="derivative-of-the-natural-sigmoid-function" class="level2" data-number="2.14">
<h2 data-number="2.14" class="anchored" data-anchor-id="derivative-of-the-natural-sigmoid-function"><span class="header-section-number">2.14</span> Derivative of the Natural Sigmoid Function</h2>
<p>Let the <strong>sigmoid function</strong> be defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma(x)%20=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-x%7D%7D%0A"></p>
<p>This maps real values <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20%5Cmathbb%7BR%7D"> to a range in <img src="https://latex.codecogs.com/png.latex?(0,%201)">.</p>
<hr>
<section id="step-1-compute-the-derivative" class="level3" data-number="2.14.1">
<h3 data-number="2.14.1" class="anchored" data-anchor-id="step-1-compute-the-derivative"><span class="header-section-number">2.14.1</span> Step 1: Compute the Derivative</h3>
<p>We differentiate <img src="https://latex.codecogs.com/png.latex?%5Csigma(x)"> with respect to <img src="https://latex.codecogs.com/png.latex?x">:</p>
<p>Let:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma(x)%20=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-x%7D%7D%20=%20f(x)%0A"></p>
<p>Then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%7D%7Bdx%7D%20%5Csigma(x)%20=%20%5Cfrac%7Bd%7D%7Bdx%7D%20%5Cleft(%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-x%7D%7D%20%5Cright)%0A"></p>
<p>Apply the quotient rule or chain rule:</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?u(x)%20=%201%20+%20e%5E%7B-x%7D">, then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%7D%7Bdx%7D%20%5Cleft(%20%5Cfrac%7B1%7D%7Bu(x)%7D%20%5Cright)%20=%20-%5Cfrac%7B1%7D%7Bu(x)%5E2%7D%20%5Ccdot%20%5Cfrac%7Bd%7D%7Bdx%7D%20u(x)%0A"></p>
<p>We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%7D%7Bdx%7D%20u(x)%20=%20%5Cfrac%7Bd%7D%7Bdx%7D%20(1%20+%20e%5E%7B-x%7D)%20=%20-e%5E%7B-x%7D%0A"></p>
<p>So:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%7D%7Bdx%7D%20%5Csigma(x)%20=%20-%5Cfrac%7B1%7D%7B(1%20+%20e%5E%7B-x%7D)%5E2%7D%20%5Ccdot%20(-e%5E%7B-x%7D)%20=%20%5Cfrac%7Be%5E%7B-x%7D%7D%7B(1%20+%20e%5E%7B-x%7D)%5E2%7D%0A"></p>
<hr>
</section>
<section id="step-2-express-in-terms-of-sigmax" class="level3" data-number="2.14.2">
<h3 data-number="2.14.2" class="anchored" data-anchor-id="step-2-express-in-terms-of-sigmax"><span class="header-section-number">2.14.2</span> Step 2: Express in Terms of <img src="https://latex.codecogs.com/png.latex?%5Csigma(x)"></h3>
<p>Since:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma(x)%20=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-x%7D%7D,%20%5Cquad%20%5Ctext%7Bthen%7D%20%5Cquad%201%20-%20%5Csigma(x)%20=%20%5Cfrac%7Be%5E%7B-x%7D%7D%7B1%20+%20e%5E%7B-x%7D%7D%0A"></p>
<p>So the derivative becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma'(x)%20=%20%5Csigma(x)%20%5Ccdot%20(1%20-%20%5Csigma(x))%0A"></p>
<hr>
</section>
<section id="final-answer-1" class="level3" data-number="2.14.3">
<h3 data-number="2.14.3" class="anchored" data-anchor-id="final-answer-1"><span class="header-section-number">2.14.3</span> Final Answer:</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B%5Cfrac%7Bd%7D%7Bdx%7D%20%5Csigma(x)%20=%20%5Csigma(x)%20%5Ccdot%20(1%20-%20%5Csigma(x))%7D%0A"></p>
<p>This elegant result is widely used in training neural networks via backpropagation.</p>


</section>
</section>
</section>

 ]]></description>
  <category>math</category>
  <guid>https://kimhungbui.github.io/programming/deep-learning-interview/</guid>
  <pubDate>Thu, 12 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Maximum subarray problem and Kadane’s algorithm</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/maximum-subarray-problem/</link>
  <description><![CDATA[ 




<p><img src="https://kimhungbui.github.io/programming/maximum-subarray-problem/Pasted image 20250602105019.png" class="img-fluid"></p>
<p>In computer science, the maximum sum subarray problem, also known as the maximum segment sum problem, is the task of finding a contiguous subarray with the largest sum, within a given one-dimensional array <code>A[1...n]</code> of numbers. It can be solved in <img src="https://latex.codecogs.com/png.latex?O(n)"> time and <img src="https://latex.codecogs.com/png.latex?O(1)"> space.</p>
<p>Formally, the task is to find indices <img src="https://latex.codecogs.com/png.latex?i"> and <img src="https://latex.codecogs.com/png.latex?j"> with <img src="https://latex.codecogs.com/png.latex?1%5Cleq%20i%20%5Cleq%20j%20%5Cleq%20n"> such that the sum <img src="https://latex.codecogs.com/png.latex?%0A%5CSigma%5Ej_%7Bx=i%7DA%5Bx%5D%0A"> is as large as possible</p>
<section id="application" class="level1">
<h1>Application</h1>
<p>Maximum subarray problems arise in many fields, such as genomic sequence analysis and computer vision.</p>
<p>Genomic sequence analysis employs maximum subarray algorithms to identify important biological segments of protein sequences that have unusual properties, by assigning scores to points within the sequence that are positive when a motif to be recognized is present, and negative when it is not, and then seeking the maximum subarray among these scores. These problems include conserved segments, GC-rich regions, tandem repeats, low-complexity filter, DNA binding domains, and regions of high charge.</p>
<p>In computer vision, bitmap images generally consist only of positive values, for which the maximum subarray problem is trivial: the result is always the whole array. However, after subtracting a threshold value (such as the average pixel value) from each pixel, so that above-average pixels will be positive and below-average pixels will be negative, the maximum subarray problem can be applied to the modified image to detect bright areas within it.</p>
</section>
<section id="kadanes-algorithm" class="level1">
<h1>Kadane’s algorithm</h1>
<section id="brute-force-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="brute-force-thoughts">Brute-Force Thoughts</h2>
<p>A naive way to find the maximum subarray is:</p>
<ol type="1">
<li><p>Enumerate all pairs of indices <code>(i, j)</code> with <code>0 ≤ i ≤ j &lt; n</code>.</p></li>
<li><p>Compute the sum of <code>array[i..j]</code>.</p></li>
<li><p>Track the largest sum seen.</p></li>
</ol>
<p>That requires <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> subarrays and, if we sum each subarray from scratch, up to <img src="https://latex.codecogs.com/png.latex?O(n)"> per sum, yielding <img src="https://latex.codecogs.com/png.latex?O(n%5E3)"> time. We can improve one factor to <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> by keeping a running sum when extending the end index, but that’s still too slow when <code>n</code> is large.</p>
<p>We want something like <img src="https://latex.codecogs.com/png.latex?O(n)"> time.</p>
<hr>
</section>
<section id="key-observation-intuition" class="level2">
<h2 class="anchored" data-anchor-id="key-observation-intuition">Key Observation (Intuition)</h2>
<blockquote class="blockquote">
<p><strong>Observation:</strong> Suppose you want to know “What is the maximum-sum subarray that ends exactly at index i?” Once you know that, you could check all i and pick the best among them.</p>
</blockquote>
<ul>
<li><p>Define<br>
<img src="https://latex.codecogs.com/png.latex?dp%5Bi%5D%20=%20%5Ctext%7Bthe%20maximum%20subarray%20sum%20among%20all%20subarrays%20that%20end%20at%20index%20%7Di."> Our ultimate answer (global max) will be<br>
<img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Cmax_%7B0%20%5Cle%20k%20%3C%20n%7D%20dp%5Bk%5D.%0A"></p></li>
<li><p>How do we compute <code>dp[i]</code> if we already know <code>dp[i–1]</code>? Consider any subarray that ends at i. It either:</p>
<ol type="1">
<li>Is just the single element <code>array[i]</code> (i.e., we “start fresh” at i), or<br>
</li>
<li>Is some subarray that ended at i−1 plus <code>array[i]</code> (i.e., we <strong>extend</strong> the best ending at i−1).</li>
</ol>
<p>In other words: <img src="https://latex.codecogs.com/png.latex?%0A%20%20dp%5Bi%5D%20%5C;=%5C;%20%5Cmax%5Cbigl(%5C;%20array%5Bi%5D,%5C;%20dp%5Bi-1%5D%20+%20array%5Bi%5D%20%5Cbigr).%0A"></p>
<ul>
<li>If <code>dp[i-1]</code> (the best ending at i−1) is negative, then we’re better off “dropping” it and taking <code>array[i]</code> alone.</li>
<li>If <code>dp[i-1]</code> is positive (or zero), then extending it by adding <code>array[i]</code> only makes the sum larger.</li>
</ul></li>
</ul>
<p>That recurrence is exactly Kadane’s idea.</p>
<hr>
</section>
<section id="deriving-kadanes-recurrence" class="level2">
<h2 class="anchored" data-anchor-id="deriving-kadanes-recurrence">Deriving Kadane’s Recurrence</h2>
<ol type="1">
<li><p><strong>Define</strong><br>
<img src="https://latex.codecogs.com/png.latex?dp%5Bi%5D%20=%20%5Ctext%7Bmax%20subarray%20sum%20ending%20exactly%20at%20index%20%7Di."></p></li>
<li><p><strong>Base case</strong>:<br>
<img src="https://latex.codecogs.com/png.latex?dp%5B0%5D%20=%20array%5B0%5D."></p></li>
<li><p><strong>Transition</strong>: For each (i ), consider two possibilities for the subarray that ends at (i):</p>
<ul>
<li><strong>Start a new subarray</strong> at (i). Its sum is (array[i]).<br>
</li>
<li><strong>Extend</strong> the best subarray ending at (i-1) by including the element at (i). Its sum is (dp[i-1] + array[i]).</li>
</ul>
<p>Therefore: <img src="https://latex.codecogs.com/png.latex?%0A%20%20dp%5Bi%5D%20=%20%5Cmax%5Cbigl(array%5Bi%5D,%5C,%20dp%5Bi-1%5D%20+%20array%5Bi%5D%5Cbigr).%0A"></p></li>
<li><p><strong>Global answer</strong>: As you fill these in from (i = 0) up to (n-1), keep track of <img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Ctext%7Bglobal%5C_max%7D%20=%20%5Cmax_%7B0%20%5Cle%20k%20%3C%20n%7D%20dp%5Bk%5D.%0A"> That is the maximum sum among all possible ending-at-k subarrays, which necessarily includes the overall best subarray.</p></li>
</ol>
<p>Because computing each <code>dp[i]</code> takes O(1) time, the entire process is O(n).</p>
<hr>
</section>
<section id="intuitive-explanation" class="level2">
<h2 class="anchored" data-anchor-id="intuitive-explanation">Intuitive Explanation</h2>
<ul>
<li><p>As you sweep from left to right, maintain two values:</p>
<ol type="1">
<li><code>current_max</code> = “best subarray sum ending exactly at the current position.”</li>
<li><code>global_max</code> = “best subarray sum seen so far anywhere.”</li>
</ol></li>
<li><p>When you arrive at a new element <code>x = array[i]</code>, ask yourself:<br>
&gt; “If I want to pick a subarray that ends at i, is it better to (a) start fresh at i (just take x), or (b) stick with the best contiguous sum I had ending at i−1 and add x to it?”</p>
<ul>
<li>If the best sum ending at i−1 was negative, adding x would only make it worse than just taking x alone.<br>
</li>
<li>If the best sum ending at i−1 was positive, adding x can only help (or at least not make it smaller than x).</li>
</ul>
<p>Concretely:</p>
<pre class="plaintext"><code>current_max = max(x, current_max + x)
global_max  = max(global_max, current_max)</code></pre></li>
</ul>
<p>and then move on to i+1.</p>
<p>Think of it like this: whenever the running sum (best-ending-here) dips below zero, you toss it away and start over at the next index, because any prefix with negative sum would only drag down whatever comes after.</p>
<pre><code>function Kadane(array):
    if array is empty:
        return 0   // or some convention (e.g. negative infinity) depending on the problem

    current_max = array[0]
    global_max  = array[0]

    for i from 1 to (n - 1):
        x = array[i]
        // Either extend the previous best subarray, or start new at i
        current_max = max(x, current_max + x)

        // Update global answer if needed
        global_max = max(global_max, current_max)

    return global_max</code></pre>
<p>Initialization: We set both current_max and global_max to array[0]. That handles the case where all numbers might be negative: the answer is the single largest element.</p>
<p>Loop: At each step, update current_max using the recurrence. Then, if the new current_max is higher than any global_max we’ve seen so far, update global_max.</p>
<p>Return: By the end, global_max holds the largest sum of any contiguous subarray in the whole array.</p>
</section>
<section id="worked-example" class="level2">
<h2 class="anchored" data-anchor-id="worked-example">Worked Example</h2>
<p>Take the array <code>[-2, 1, -3, 4, -1, 2, 1, -5, 4]</code>. Walk through Kadane’s steps:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 2%">
<col style="width: 8%">
<col style="width: 19%">
<col style="width: 58%">
<col style="width: 10%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">i</th>
<th style="text-align: center;">array[i]</th>
<th style="text-align: center;">current_max (before)</th>
<th style="text-align: center;">current_max (after) = max(array[i], current_max₍i−1₎ + array[i])</th>
<th style="text-align: center;">global_max</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">−2</td>
<td style="text-align: center;">(init) −2</td>
<td style="text-align: center;">max(−2, —) = −2</td>
<td style="text-align: center;">−2</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">+1</td>
<td style="text-align: center;">−2</td>
<td style="text-align: center;">max( 1, (−2 + 1) = −1 ) = 1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">−3</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">max(−3, (1 + (−3)) = −2 ) = −2</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: center;">+4</td>
<td style="text-align: center;">−2</td>
<td style="text-align: center;">max( 4, (−2 + 4) = 2 ) = 4</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">−1</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">max(−1, (4 + (−1)) = 3 ) = 3</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: center;">+2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">max( 2, (3 + 2) = 5 ) = 5</td>
<td style="text-align: center;">5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: center;">+1</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">max( 1, (5 + 1) = 6 ) = 6</td>
<td style="text-align: center;">6</td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: center;">−5</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">max(−5, (6 + (−5)) = 1 ) = 1</td>
<td style="text-align: center;">6</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">+4</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">max( 4, (1 + 4) = 5 ) = 5</td>
<td style="text-align: center;">6</td>
</tr>
</tbody>
</table>
<p>At index 6, <code>current_max</code> becomes 6, and that’s the largest sum observed. Indeed, subarray <code>[4, −1, 2, 1]</code> ends at i=6 and has sum 6.</p>
<p>By index 7, adding −5 would drop the running sum to 1, but since 1 is still ≥ −5 itself, Kadane chooses 1 (i.e., “extend” rather than “start new”).</p>
<p>By index 8, it’s better to start new at 8 or to extend the 1? We compare:</p>
<ul>
<li><strong>“Start new”</strong> at 8: sum = 4</li>
<li><strong>“Extend previous”</strong> (which was 1): sum = 1 + 4 = 5</li>
</ul>
<p>→ so we pick 5. However, 5 &lt; global_max = 6, so <code>global_max</code> remains 6.</p>
<hr>
</section>
<section id="handling-all-negative-arrays" class="level2">
<h2 class="anchored" data-anchor-id="handling-all-negative-arrays">Handling All-Negative Arrays</h2>
<p>A common question: “What if the array is entirely negative, e.g.&nbsp;<code>[-5, -3, -8]</code>?”<br>
Kadane’s initialization of</p>
<pre><code>current_max = global_max = array[0]</code></pre>
<p>automatically handles that. We never zero out a running sum unless it’s worse than starting fresh. So if all numbers are negative, every time you consider a new element <code>x</code>, you compute</p>
<pre><code>current_max = max(x, current_max + x)</code></pre>
<p>Since <code>current_max + x</code> is even more negative than <code>x</code> alone, the recurrence forces <code>current_max</code> to be the largest single negative element encountered so far. Thus the global max ends up being the least-negative (i.e., the “largest”) element of the array.</p>
<hr>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final Remarks</h2>
<ul>
<li><strong>Time complexity</strong>: O(n), since each element is processed exactly once with O(1) work per element.</li>
<li><strong>Space complexity</strong>: O(1) extra space if you only keep two scalars (<code>current_max</code>, <code>global_max</code>). (If you store the entire <code>dp[]</code> array, it’s O(n), but you don’t need to; you only ever use the “previous” value.)</li>
</ul>
<p>Kadane’s algorithm is essentially a specialized form of dynamic programming that keeps track of a “running best suffix sum” and resets whenever that suffix sum would be negative. Once you grasp that the maximum-sum subarray ending at i is either “continue from i−1” or “start anew at i,” the rest follows naturally.</p>


</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/maximum-subarray-problem/</guid>
  <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
  <media:content url="https://kimhungbui.github.io/programming/maximum-subarray-problem/Pasted%20image%2020250602105019.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Finetuning</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/finetunning/</link>
  <description><![CDATA[ 




<p>Finetuning is a process of adapting a model to a specific task by further training the whole model or part of the model. It is one of the three very common AI engineering techniques used to adapt a model to specific needs, alongside prompt engineering and Retrieval-Augmented Generation (RAG). While prompt-based methods like prompt engineering and RAG influence a model’s quality solely through inputs without modifying the model itself, finetuning adapts a model by adjusting its weights. Finetuning techniques are generally more complicated and require more data compared to prompt-based methods. However, they can significantly improve a model’s quality, latency, and cost. Adapting a model by changing its weights makes things possible that aren’t otherwise, such as adapting it to a new task it wasn’t exposed to during initial training.</p>
<p>Finetuning is considered part of a model’s training process, specifically an extension of model pre-training. Training that happens after pre-training is referred to as finetuning, and it can take various forms. Chapter 2 discusses two types of finetuning: supervised finetuning and preference finetuning.</p>
<p>The goal of finetuning is to get a base model, which has some but not all of the necessary capabilities, to perform well enough for a specific task. Finetuning improves sample efficiency, meaning a model can learn the desired behavior with fewer examples than training from scratch. For instance, while training a model for legal question answering from scratch might require millions of examples, finetuning a good base model might only require a few hundred. Finetuning can enhance various aspects of a model, including its domain-specific capabilities (like coding or medical question answering) and safety, but it is most often used to improve the model’s instruction-following ability, especially to adhere to specific output styles and formats.</p>
<section id="when-to-finetune" class="level1">
<h1>1. When to Finetune:</h1>
<ul>
<li><p>Enhancing domain-specific capabilities: If a model struggles with a specific domain (e.g., a less common SQL dialect or customer-specific queries), finetuning on relevant data can help.</p></li>
<li><p>Improving instruction following and structured outputs: Finetuning is the most effective and general approach to get models to generate outputs in a desired format. While prompting is less reliable, finetuning a model on examples following the desired format is much more reliable. For certain tasks like classification, modifying the model’s architecture before finetuning by adding a classifier head can guarantee the output format.</p></li>
<li><p>Bias mitigation: Finetuning with carefully curated data can counteract biases present in the base model’s training data. For example, finetuning on data with female CEOs or texts authored by women/African authors can reduce gender and racial biases.</p></li>
<li><p>Distillation: Finetuning a smaller model to imitate the behavior of a larger model using data generated by the larger model is a common approach called distillation. This makes the smaller model cheaper and faster to use in production.</p></li>
<li><p>Optimizing token usage (historically): Before prompt caching, finetuning could help optimize token usage by training the model on examples instead of including them in every prompt, resulting in shorter, cheaper, and lower-latency prompts. Although prompt caching has reduced this benefit, finetuning still removes the limitation of context length on the number of examples used.</p></li>
<li><p>Extending context length: Long-context finetuning requires modifying the model’s architecture and can increase the maximum context length, though it is harder to do and the resulting model might degrade on shorter sequences.</p></li>
</ul>
</section>
<section id="reasons-not-to-finetune" class="level1">
<h1>2. Reasons Not to Finetune:</h1>
<ul>
<li><p>Performance degradation on other tasks: Finetuning for a specific task can sometimes degrade performance on other tasks.</p></li>
<li><p>High up-front investment and continual maintenance: Finetuning requires significant resources, including acquiring high-quality annotated data (which can be slow and expensive) and ML knowledge to evaluate base models, monitor training, and debug.</p></li>
<li><p>Serving complexity: Once finetuned, serving the model requires figuring out hosting (in-house or API) and inference optimization, which is non-trivial for large models.</p></li>
<li><p>Pace of base model improvement: New base models are constantly being developed and may improve faster than a finetuned model can be updated.</p></li>
<li><p>Prompting might be sufficient: Many practitioners find that after complaints about prompting’s ineffectiveness, refining the prompt experiment process shows that prompting alone can be sufficient.</p></li>
</ul>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/finetunning/</guid>
  <pubDate>Fri, 30 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>2359. Find Closest Node to Given Two Nodes</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-find-closest-node-given-2-nodes/</link>
  <description><![CDATA[ 




<p>Topic: <code>Graph, Deep-First Search</code></p>
<section id="question" class="level1">
<h1>Question</h1>
<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>
<p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p>
<p>Example 1:</p>
<ul>
<li>Input: <code>nums = [1,2,3,1]</code></li>
<li>Output: <code>4</code></li>
<li>Explanation: <code>Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.</code></li>
</ul>
<p>Example 2:</p>
<ul>
<li>Input: <code>nums = [2,7,9,3,1]</code></li>
<li>Output: <code>12</code></li>
<li>Explanation: <code>Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.</code></li>
</ul>
<p>Constraints:</p>
<pre><code>1 &lt;= nums.length &lt;= 100
0 &lt;= nums[i] &lt;= 400</code></pre>
</section>
<section id="approaches" class="level1">
<h1>Approaches</h1>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-find-closest-node-given-2-nodes/</guid>
  <pubDate>Fri, 30 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>127. Word Ladder</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-word-ladder/</link>
  <description><![CDATA[ 




<p>A transformation sequence from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk</code> such that:</p>
<ul>
<li>Every adjacent pair of words differs by a single letter.</li>
<li>Every <code>si</code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>
<li><code>sk == endWord</code> Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return the number of words in the shortest transformation sequence from <code>beginWord</code> to <code>endWord</code>, or <code>0</code> if no such sequence exists.`</li>
</ul>
<p>Example 1:</p>
<pre><code>Input: `beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]`
Output: `5`
Explanation: `One shortest transformation sequence is "hit" -&gt; "hot" -&gt; "dot" -&gt; "dog" -&gt; cog", which is 5 words long.`</code></pre>
<p>Example 2:</p>
<pre><code>Input: `beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]`
Output: `0`
Explanation: `The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.`</code></pre>
<p>Constraints:</p>
<p>1 &lt;= beginWord.length &lt;= 10 endWord.length == beginWord.length 1 &lt;= wordList.length &lt;= 5000 wordList[i].length == beginWord.length beginWord, endWord, and wordList[i] consist of lowercase English letters. beginWord != endWord All the words in wordList are unique.</p>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>Have you ever tried to transform one word into another—one letter at a time—while only stepping through real English words? That’s the classic <strong>Word Ladder</strong> puzzle, and it’s exactly what LeetCode’s <strong>Ladder Length</strong> problem asks us to solve. In this blog post, we’ll walk through:</p>
<ol type="1">
<li><strong>Why BFS (Breadth-First Search) is the perfect fit</strong><br>
</li>
<li><strong>What goes wrong with a naïve backtracking approach</strong><br>
</li>
<li><strong>The clean, efficient BFS solution</strong></li>
</ol>
<hr>
<section id="the-pitfalls-of-naïve-backtracking" class="level2">
<h2 class="anchored" data-anchor-id="the-pitfalls-of-naïve-backtracking">2. The Pitfalls of Naïve Backtracking</h2>
<p>It’s tempting to reach for a simple recursive strategy:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ladderLength_naive(begin, end, word_dict):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> backtrack(current, remaining, depth):</span>
<span id="cb3-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> end:</span>
<span id="cb3-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> depth</span>
<span id="cb3-5">        best <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inf'</span>)</span>
<span id="cb3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(remaining):</span>
<span id="cb3-7">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only recurse on one-letter neighbors</span></span>
<span id="cb3-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a,b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(current, word)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-9">                remaining.remove(word)</span>
<span id="cb3-10">                cand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> backtrack(word, remaining, depth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cand:</span>
<span id="cb3-12">                    best <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(best, cand)</span>
<span id="cb3-13">                remaining.add(word)</span>
<span id="cb3-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> best <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> best <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inf'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-15"></span>
<span id="cb3-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> backtrack(begin, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(word_dict), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p><strong>Why it stumbles</strong> 1. Exponential Recursion Every choice spawns a new branch, and many branches share subproblems—leading to redundant work.</p>
<ol start="2" type="1">
<li><p>No Early Stopping You might explore a deep chain long after a shorter route exists elsewhere.</p></li>
<li><p>Backtracking Overhead Adding/removing words from the working set at each step is costly and easy to get wrong.</p></li>
</ol>
<p>In practice, this approach chokes on even modestly sized dictionaries.</p>
<hr>
</section>
</section>
<section id="the-sleek-bfs-solution" class="level1">
<h1>3. The Sleek BFS Solution</h1>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> deque</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Solution:</span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ladderLength(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, begin: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, end: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, word_dict: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb4-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quick reject if 'end' is unreachable</span></span>
<span id="cb4-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> end <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> word_dict <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> begin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> end:</span>
<span id="cb4-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-8"></span>
<span id="cb4-9">        word_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(word_dict)</span>
<span id="cb4-10">        word_set.add(end)</span>
<span id="cb4-11">        visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {begin}</span>
<span id="cb4-12">        queue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deque([(begin, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (current_word, steps_so_far)</span></span>
<span id="cb4-13"></span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> queue:</span>
<span id="cb4-15">            word, steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue.popleft()</span>
<span id="cb4-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> word <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> end:</span>
<span id="cb4-17">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> steps</span>
<span id="cb4-18"></span>
<span id="cb4-19">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try changing each character to every 'a'–'z'</span></span>
<span id="cb4-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(word)):</span>
<span id="cb4-21">                original <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> word[i]</span>
<span id="cb4-22">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abcdefghijklmnopqrstuvwxyz'</span>:</span>
<span id="cb4-23">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> original:</span>
<span id="cb4-24">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb4-25">                    candidate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> word[:i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> word[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb4-26">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> candidate <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> word_set <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> candidate <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb4-27">                        visited.add(candidate)</span>
<span id="cb4-28">                        queue.append((candidate, steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-29"></span>
<span id="cb4-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p><strong>Key Advantages</strong> - O(1) Lookups in both word_set and visited</p>
<ul>
<li><p>Single Visit per valid word</p></li>
<li><p>Guaranteed Shortest Path by BFS layering</p></li>
</ul>
<p>In terms of complexity, each of the up-to-26 letter-swaps per position in each word is checked only once per word, yielding O(N · L · 26) time (where N is dictionary size and L is word length) and O(N) space.</p>
</section>
<section id="wrapping-up" class="level1">
<h1>4. Wrapping Up</h1>
<p>When you need the shortest transformation in an unweighted graph—whether it’s words, grid cells, or social-network connections—BFS should be your first thought. Naïve recursion might look neat on paper, but real-world constraints demand the efficiency and crisp guarantees that BFS + a visited set provides.</p>
<p>Happy coding, and may all your word ladders be short! 🚀</p>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-word-ladder/</guid>
  <pubDate>Fri, 30 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Role of Parallel Computing</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/parallel-computing/chapter1.html</link>
  <description><![CDATA[ 







 ]]></description>
  <category>parallel</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/parallel-computing/chapter1.html</guid>
  <pubDate>Wed, 07 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Count good triplets</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-count-good-triplets/</link>
  <description><![CDATA[ 




<section id="question" class="level1">
<h1>Question</h1>
<p>Given&nbsp;an&nbsp;array&nbsp;of&nbsp;integers&nbsp;<code>arr</code>,&nbsp;and&nbsp;three&nbsp;integers&nbsp;<code>a</code>,&nbsp;<code>b</code>&nbsp;and&nbsp;<code>c</code>.&nbsp;You&nbsp;need&nbsp;to&nbsp;find&nbsp;the&nbsp;number&nbsp;of&nbsp;good&nbsp;triplets.</p>
<p>A&nbsp;triplet&nbsp;<code>(arr[i], arr[j], arr[k])</code>&nbsp;is&nbsp;<strong>good</strong>&nbsp;if&nbsp;the&nbsp;following&nbsp;conditions&nbsp;are&nbsp;true:</p>
<ul>
<li><code>0 &lt;= i &lt; j &lt; k &lt;&nbsp;arr.length</code></li>
<li><code>|arr[i] - arr[j]| &lt;= a</code></li>
<li><code>|arr[j] - arr[k]| &lt;= b</code></li>
<li><code>|arr[i] - arr[k]| &lt;= c</code></li>
</ul>
<p>Where&nbsp;<code>|x|</code>&nbsp;denotes&nbsp;the&nbsp;absolute&nbsp;value&nbsp;of&nbsp;<code>x</code>.</p>
<p>Return&nbsp;<em>the&nbsp;number&nbsp;of&nbsp;good&nbsp;triplets</em>.</p>
<p><strong>Example&nbsp;1:</strong></p>
<p><strong>Input:</strong> <code>arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3</code> <strong>Output:</strong> 4 <strong>Explanation:</strong>&nbsp;There are 4 good triplets: <code>[(3,0,1), (3,0,1), (3,1,1), (0,1,1)]</code>.</p>
<p><strong>Example&nbsp;2:</strong></p>
<p><strong>Input:</strong> <code>arr = [1,1,2,2,3], a = 0, b = 0, c = 1</code> <strong>Output:</strong> 0 <strong>Explanation:</strong> No triplet satisfies all conditions.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= arr.length &lt;= 100</code></li>
<li><code>0 &lt;= arr[i] &lt;= 1000</code></li>
<li><code>0 &lt;= a, b, c &lt;= 1000</code></li>
</ul>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<section id="approach-1-enumeration" class="level3">
<h3 class="anchored" data-anchor-id="approach-1-enumeration">Approach&nbsp;1:&nbsp;Enumeration</h3>
<section id="intuition" class="level4">
<h4 class="anchored" data-anchor-id="intuition">Intuition</h4>
<p>Using&nbsp;<code>O(n3)</code>&nbsp;loops&nbsp;to&nbsp;enumerate&nbsp;all&nbsp;(i,j,k)&nbsp;in&nbsp;sequence,&nbsp;where&nbsp;0≤i&lt;j&lt;k&lt;arr.length,&nbsp;for&nbsp;each&nbsp;set&nbsp;of&nbsp;(i,j,k),&nbsp;determine&nbsp;whether&nbsp;arr[i],&nbsp;arr[j],&nbsp;and&nbsp;arr[k]&nbsp;satisfy&nbsp;the&nbsp;condition.</p>
<p>Finally,&nbsp;calculate&nbsp;the&nbsp;total&nbsp;number&nbsp;of&nbsp;all&nbsp;triplets&nbsp;that&nbsp;meet&nbsp;the&nbsp;conditions.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Solution:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> countGoodTriplets(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arr: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, c: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-3">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(arr)</span>
<span id="cb1-4">        countGoodTriplets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb1-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):</span>
<span id="cb1-7">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(arr[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> arr[j]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> a:</span>
<span id="cb1-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):</span>
<span id="cb1-9">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(arr[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> arr[k]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(arr[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> arr[k]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> c:</span>
<span id="cb1-10">                        countGoodTriplets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-11">                        </span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> countGoodTriplets</span></code></pre></div>
</section>
</section>
<section id="approach-2-optimized-enumeration" class="level2">
<h2 class="anchored" data-anchor-id="approach-2-optimized-enumeration">Approach 2: Optimized enumeration</h2>
<p>We need to eliminate one loop or make one of them constant-time.</p>
<p>We could try fixing <code>(j,k)</code> and then counting valid <code>i &lt; j</code>. That <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> pairs, and if we can count the <img src="https://latex.codecogs.com/png.latex?i">s in <img src="https://latex.codecogs.com/png.latex?O(1)"> each, we down to <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> total.</p>
<section id="translate-the-i-constraints-into-an-interval" class="level3">
<h3 class="anchored" data-anchor-id="translate-the-i-constraints-into-an-interval">Translate the <img src="https://latex.codecogs.com/png.latex?i">-constraints into an interval</h3>
<p>For a given <img src="https://latex.codecogs.com/png.latex?(j,k)">, the condition on <img src="https://latex.codecogs.com/png.latex?i"> are <img src="https://latex.codecogs.com/png.latex?%7Carr%5Bi%5D%20-%20arr%5Bj%5D%7C%20%5Cleq%20a"> so, <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D%20%5Cin%20%5Barr%5Bj%5D-a,%20arr%5Bj%5D+a%5D"></p>
<p>and <img src="https://latex.codecogs.com/png.latex?%7Carr%5Bi%5D-arr%5Bk%5D%7C%5Cleq%20c"> so, <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D%5Cin%5Barr%5Bk%5D-c,%20arr%5Bk%5D+c%5D"></p>
<p>Their intersection is a single interval <img src="https://latex.codecogs.com/png.latex?%5Bl,%20r%5D">. So we just need to count how many prior <img src="https://latex.codecogs.com/png.latex?i%3Cj"> have <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D%20%5Cin%20%5Bl,%20r%5D">.</p>
</section>
<section id="choose-a-data-structure-for-last-range-count" class="level3">
<h3 class="anchored" data-anchor-id="choose-a-data-structure-for-last-range-count">Choose a data structure for last range-count</h3>
<p>Since <code>arr[i]</code> is small-range, maintain a frequency array <code>freq[0..M]</code> for all seen indices <img src="https://latex.codecogs.com/png.latex?%3Cj">, and its prefix sums <code>sum[v] =</code><img src="https://latex.codecogs.com/png.latex?%5CSigma_%7Bu=0%7D%5Ev%20freq%5Bu%5D"></p>
<p>Then the count in <img src="https://latex.codecogs.com/png.latex?%5Bl,%20r%5D"> is simply <code>sum[r]-sum[l-1]</code> in <img src="https://latex.codecogs.com/png.latex?O(1)">.</p>
</section>
<section id="ensure-the-ij-ordering" class="level3">
<h3 class="anchored" data-anchor-id="ensure-the-ij-ordering">Ensure the <img src="https://latex.codecogs.com/png.latex?i%3Cj"> ordering</h3>
<p>We iterate <img src="https://latex.codecogs.com/png.latex?j"> from 1 to <img src="https://latex.codecogs.com/png.latex?n">. Before handling any <img src="https://latex.codecogs.com/png.latex?(j,%20k)"> pairs, our <code>freq/sum</code> reflects exact indices 1 through <img src="https://latex.codecogs.com/png.latex?j-1">.</p>
<p>For each <img src="https://latex.codecogs.com/png.latex?k%3Ej">, check <img src="https://latex.codecogs.com/png.latex?%7Carr%5Bj%5D%20-%20arr%5Bk%5D%7C%5Cleq%20b">. If it passes, compute <img src="https://latex.codecogs.com/png.latex?%5Bl,%20r%5D"> and do the <img src="https://latex.codecogs.com/png.latex?O(1)"> range-sum query.</p>
<p>After finishing all <img src="https://latex.codecogs.com/png.latex?k"> for this <img src="https://latex.codecogs.com/png.latex?j">, we insert <img src="https://latex.codecogs.com/png.latex?arr%5Bj%5D"> into <code>freq</code> (and update <code>sum</code>), before moving onto <img src="https://latex.codecogs.com/png.latex?j%20+%201">.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Solution:</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> countGoodTriplets(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arr: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, c: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ans: total count of valid (i,j,k)</span></span>
<span id="cb2-4">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-5">        </span>
<span id="cb2-6">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(arr)</span>
<span id="cb2-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># total[v] will hold the prefix-sum of frequencies:</span></span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   total[v] = number of i&lt;j with arr[i] ≤ v</span></span>
<span id="cb2-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we assume arr[i] ∈ [0..1000], so we size total to 1001</span></span>
<span id="cb2-10">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1001</span></span>
<span id="cb2-11"></span>
<span id="cb2-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move j from 0 to n-1</span></span>
<span id="cb2-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb2-14">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pair j with every k&gt;j</span></span>
<span id="cb2-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):</span>
<span id="cb2-16">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First check the |arr[j] - arr[k]| ≤ b constraint</span></span>
<span id="cb2-17">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(arr[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> arr[k]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> b:</span>
<span id="cb2-18">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the interval of allowed arr[i] from j’s constraint</span></span>
<span id="cb2-19">                    lj, rj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a, arr[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a</span>
<span id="cb2-20">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the interval of allowed arr[i] from k’s constraint</span></span>
<span id="cb2-21">                    lk, rk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> c, arr[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb2-22"></span>
<span id="cb2-23">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Intersection [l..r] of the two intervals</span></span>
<span id="cb2-24">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># also clamp to [0..1000] to stay in array bounds</span></span>
<span id="cb2-25">                    l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, lj, lk)</span>
<span id="cb2-26">                    r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, rj, rk)</span>
<span id="cb2-27"></span>
<span id="cb2-28">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the intersection is non-empty, count how many</span></span>
<span id="cb2-29">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prior i&lt;j have arr[i] in [l..r] via prefix sums</span></span>
<span id="cb2-30">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> r:</span>
<span id="cb2-31">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-32">                            ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> total[r]</span>
<span id="cb2-33">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-34">                            ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> total[r] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> total[l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-35"></span>
<span id="cb2-36">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># After processing all k for this j, we “add” arr[j] into our</span></span>
<span id="cb2-37">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prefix-sum structure so that future iterations see it.</span></span>
<span id="cb2-38">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We do this by incrementing total[v] for all v ≥ arr[j].</span></span>
<span id="cb2-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># That way total[v] remains = # of arr[i] ≤ v for i&lt;next j.</span></span>
<span id="cb2-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(arr[j], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1001</span>):</span>
<span id="cb2-41">                total[v] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-42"></span>
<span id="cb2-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>


</section>
</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-count-good-triplets/</guid>
  <pubDate>Tue, 15 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Maximum subarray</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-maximum-subarray/</link>
  <description><![CDATA[ 




<section id="question" class="level1">
<h1>Question</h1>
<p>Given an integer array nums, find the subarray with the largest sum, and return its sum.</p>
<p>Example 1:</p>
<p>Input: nums = <code>[-2,1,-3,4,-1,2,1,-5,4]</code> Output: 6 Explanation: The subarray <code>[4,-1,2,1]</code> has the largest sum 6. Example 2:</p>
<p>Input: nums = <code>[1]</code> Output: 1 Explanation: The subarray <code>[1]</code> has the largest sum 1. Example 3:</p>
<p>Input: <code>nums = [5,4,-1,7,8]</code> Output: 23 Explanation: The subarray <code>[5,4,-1,7,8]</code> has the largest sum 23.</p>
<p>Constraints:</p>
<p><code>1 &lt;= nums.length &lt;= 105</code> <code>-104 &lt;= nums[i] &lt;= 104</code></p>
<p>Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
</section>
<section id="answer" class="level1">
<h1>Answer:</h1>
<section id="brute-force" class="level2">
<h2 class="anchored" data-anchor-id="brute-force">Brute force</h2>
<pre><code>    # brute force approach

    # find all left, and right 
    # cal sum of each
    # return max
    # T.C: O(n^2)</code></pre>
<div id="716a2628" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> maxSubArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-3">    left, ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, nums[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> left <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)):</span>
<span id="cb2-5">        cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> right <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(left, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)):</span>
<span id="cb2-7">            cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> nums[right]</span>
<span id="cb2-8">            ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(ans, cur)</span>
<span id="cb2-9"></span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</div>
<p>it will TLE.</p>


</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-maximum-subarray/</guid>
  <pubDate>Fri, 04 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Image classification</title>
  <link>https://kimhungbui.github.io/programming/convolution/</link>
  <description><![CDATA[ 




<section id="image-classification" class="level1">
<h1>Image Classification</h1>
<p>This is the task of assigning an input image one label from a <em>fixed categories</em>. This is one of the core problems in Computer Vision that, despite its simplicity, has a large variety of practical applications. Moreover, many other seemingly distinct CV tasks (such as object detection, segmentation) can be reduced to image classification.</p>
<p><strong>Example</strong>: In the image blow in image classification model takes a single image and assigns probabilities to 4 label {cat, dog, hat, mug}. Computer view a image as an one large 3-dimensional array of numbers. In this example, the cat image is 248 pixel wide, 400 pixel tall, and has three color channel Red, Green, Blue. Therefore, the image consists of <img src="https://latex.codecogs.com/png.latex?248%20%5Ctimes%20400%20%5Ctimes%203"> numbers, or a total of 297,600 numbers. Each number is an integer that ranges from 0 (black) to 255 (white). Our task is turn this quarter of a million numbers into a single label, such as “cat”. <img src="https://kimhungbui.github.io/programming/convolution/Pasted image 20250327230513.png" class="img-fluid"></p>
<p><strong>Challenges:</strong> Since this task of recognizing a visual concept (e.g.&nbsp;cat) is relatively trivial for human to perform, it is worth considering the challenges involved from the perspective of a CV algorithm. As we present list of challenges below.</p>
<ul>
<li><strong>Viewpoint variation:</strong> A single instance of an object can be oriented in many ways with respect to the camera.</li>
<li><strong>Scale variation:</strong> Visual classes often exhibit variation of their size (size in the real world, <em>not only</em> in terms of their extent in the image)</li>
<li><strong>Deformation:</strong> Many objects of interest are not rigid bodies and can be deformed in extremes ways.</li>
<li><strong>Occlusion</strong>: The objects of interest can be occluded. Sometimes only a small portion of an object (as little as few pixels) could be visible.</li>
<li><strong>Illumination conditions:</strong> The effect of illumination are drastic on the pixel level.</li>
<li><strong>Background clutter:</strong> The objects of interest may <em>blend</em> into their environment, making them hard to identify.</li>
<li><strong>Intra-class variation:</strong> The classes of interest can be often be relatively broad, such as <em>chair</em>. Their are many different types of these objects, each with their own appearance. <img src="https://kimhungbui.github.io/programming/convolution/Pasted image 20250327235749.png" class="img-fluid"></li>
</ul>
<p>A good image classification model must be invariant to the cross product of all these variations, while simultaneously retaining sensitivity to the inter-class variations.</p>
<ol type="1">
<li>Cross product of variations This refers to the <strong>combination of all possible variations</strong> (e.g.&nbsp;viewpoint, scale, deformation, occlusion, illumination, etc.) that can occur <strong>within a class</strong>. The term “cross production” here is metaphorical, inpsired by the mathematical concept of a Cartesian product, which generate all possible combinations of elements from multiple sets.
<ul>
<li><strong>Example</strong>: A chair might appear:
<ul>
<li>Rotate (viewpoint variation)</li>
<li>Partially hidden (occlusion)</li>
<li>Under bright sunlight (illumination)</li>
<li>While being non-rigid (deformation) The model must recognize it as a “chair” <strong>despite this complex combination of variations</strong> <strong>Invariance Requirement:</strong> The model must be <strong>invariant</strong> to these variations, meaning its prediction for a class should not change even when factors alter the object’s appearance.</li>
</ul></li>
</ul></li>
<li><strong>Inter-class variation</strong> There are <strong>difference between distinct classes</strong> (e.g.&nbsp;chairs vs tables). A model must retain <strong>sensitivity</strong> to these differences to avoid confusing classes, even when they share superficial similarities.
<ul>
<li>Example: A “stool” (class: chair) and a “small table” (class: table) might both appear at similar scales or under similar lighting. The model must distinguish them based on defining feature (e.g.&nbsp;height, presence of a backrest).</li>
<li>Sensitivity Requirement: The model must <strong>preserver discriminate features</strong> that separate classes, even when intra-class variations (e.g.&nbsp;deformation in chairs) are extreme. <strong>Data-driven approach</strong>: How might we go about writing an algorithm that can classify images into distinct categories? Unlike writing an algorithm for, for example, sorting a list of numbers, it is not obvious how one might write an algorithm for identifying cats in images. Therefore, instead of trying to specify what every one of the categories of interest look like directly in code, the approach that we will take is not unlike one we would take with a child: we’re going to provide the computer with many examples of each class and then develop learning algorithms that look at these examples and learn about the visual appearance of each class. This approach is referred to as a <em>data-driven approach</em>, since it relies on first accumulating a <em>training dataset</em> of labeled images. Here is an example of what such a dataset might look like:</li>
</ul></li>
</ol>
<p><img src="https://kimhungbui.github.io/programming/convolution/Pasted image 20250328000317.png" class="img-fluid"></p>
<p><strong>The image classification pipeline</strong> We’ve seen that the task in Image Classification is to taken an array of pixels that represents a single image and assign a label to it. Our complete pipeline can be formalized as follows: - <strong>Input:</strong> Our input consists of a set of <em>N</em> images, each labeled with one of <em>K</em> different classes. We refer to this data as the <em>learning set</em>. - <strong>Learning:</strong> Our task is to use the training set to learn what every one of the classes looks like. We refer to this step as <em>training a classifier</em>, or <em>learning a model</em>. - <strong>Evaluation:</strong> In the end, we evaluate the quality of the classifier by asking it to predict labels for a new set of images that it has never seen before. We will then compare the true labels of these images to the ones predicted by the classifier. Intuitively, we’re hoping that a lot of the predictions match up with the true answers (which we call the <em>ground truth</em>).</p>
</section>
<section id="nearest-neighbor-classifier" class="level1">
<h1>Nearest Neighbor Classifier</h1>
<p>As our first approach, we will develop what we call a <strong>Nearest Neighbor Classifier</strong>. This classifier has nothing to do with Convolution Neural Networks and it is very rarely used in practice, but i will allow us to get an ideal about the basic approach to an image classification.</p>
<p><strong>Example image classification dataset: CIFAR-10</strong>. <a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&nbsp;dataset</a>This dataset consist of 10 classes (for example <em>airplane, automobile, bird, etc</em>). These 60,000 images are partitioned into a training set of 50,000 images and a test set of 10,000 images. In the image below we can see 10 random example images from each one of the 10 classes.</p>
<p><img src="https://kimhungbui.github.io/programming/convolution/Pasted image 20250328001115.png" class="img-fluid"> Left:&nbsp;Example&nbsp;images&nbsp;from&nbsp;the&nbsp;<a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&nbsp;dataset</a>.&nbsp;Right:&nbsp;first&nbsp;column&nbsp;shows&nbsp;a&nbsp;few&nbsp;test&nbsp;images&nbsp;and&nbsp;next&nbsp;to&nbsp;each&nbsp;we&nbsp;show&nbsp;the&nbsp;top&nbsp;10&nbsp;nearest&nbsp;neighbors&nbsp;in&nbsp;the&nbsp;training&nbsp;set&nbsp;according&nbsp;to&nbsp;pixel-wise&nbsp;difference.</p>
<p>Suppose now that we are given the CIFAR-10 training set of 50,000 images (5000 image for every one of the labels), and we wish to label the remaining 10,000. The nearest neighbor classifier will take a test image, compare it to every single one of the training images, and predict the label of the closest training image. In the image above and on the right we can see an example result of such a procedure for 10 example test images. Notice that in only about 3 of 10 examples of an image of the same class is retrieved, while in other 7 examples this is not the case. For example, in the 8th row the nearest training image to the horse head is a red car, presumably due to the strong black background. As a result, this image of a horse would in this case be mislabeled as a car.</p>
<p>One of the simplest possibilities is to compare the images pixel by pixel and add up all the differences. In other words, given two images and representing them as vectors <img src="https://latex.codecogs.com/png.latex?I_1,%20I_2">, a reasonable choice for comparing them might be the <strong>L1 distance</strong>.</p>
<p><img src="https://latex.codecogs.com/png.latex?d_1(I_1,%20I_2)=%5CSigma_p%20%7CI_1%5Ep%20-%20I_2%5Ep%7C"> Where the sum is taken over all pixels. Here is the procedure visualized:</p>
<p>![[nneg.jpeg]]</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> numpy</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> NearestNeighbor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X, y):</span>
<span id="cb1-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" X is N </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">imes D where each row is an example. Y is 1-dimension of size N"""</span></span>
<span id="cb1-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the nearest neighbor classifier simpply remembers all the training data</span></span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.Xtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X</span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X):</span>
<span id="cb1-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" X is N </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">imes D where each row is an example we wish to predict label for"""</span></span>
<span id="cb1-13">        num_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lets make sure that the output type matches the input type</span></span>
<span id="cb1-15">        Ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(num_test, dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dtype)</span>
<span id="cb1-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop over all test rows</span></span>
<span id="cb1-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_test):</span>
<span id="cb1-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the nearest training image to the i'th test image</span></span>
<span id="cb1-19">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># using the L1 distance (sum of absolute value differences)</span></span>
<span id="cb1-20">            distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.Xtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X[i,:]), axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-21">            min_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmin(distances) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index with smallest distance</span></span>
<span id="cb1-22">            Ypred[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ytr[min_index] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict the label of the nearest example</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Ypred</span></code></pre></div>
<section id="the-choice-of-distance" class="level2">
<h2 class="anchored" data-anchor-id="the-choice-of-distance">The choice of distance</h2>
</section>
</section>
<section id="k---nearest-neighbor-classifier" class="level1">
<h1>k - Nearest Neighbor Classifier</h1>
<p>The idea: instead of finding the single closest image in the training set, we will find the top <strong>k</strong> closest images, and have them vote on the label of the test image. In particular, when <em>k=1</em>, we recover the NN classifier. Intuitively, higher values of <strong>k</strong> have smoothing effect that makes the classifier more resistant to outliers:</p>
<p><img src="https://kimhungbui.github.io/programming/convolution/Pasted image 20250507141512.png" class="img-fluid"></p>
<p>An&nbsp;example&nbsp;of&nbsp;the&nbsp;difference&nbsp;between&nbsp;Nearest&nbsp;Neighbor&nbsp;and&nbsp;a&nbsp;5-Nearest&nbsp;Neighbor&nbsp;classifier,&nbsp;using&nbsp;2-dimensional&nbsp;points&nbsp;and&nbsp;3&nbsp;classes&nbsp;(red,&nbsp;blue,&nbsp;green).&nbsp;The&nbsp;colored&nbsp;regions&nbsp;show&nbsp;the&nbsp;<strong>decision&nbsp;boundaries</strong>&nbsp;induced&nbsp;by&nbsp;the&nbsp;classifier&nbsp;with&nbsp;an&nbsp;L2&nbsp;distance.&nbsp;The&nbsp;white&nbsp;regions&nbsp;show&nbsp;points&nbsp;that&nbsp;are&nbsp;ambiguously&nbsp;classified&nbsp;(i.e.&nbsp;class&nbsp;votes&nbsp;are&nbsp;tied&nbsp;for&nbsp;at&nbsp;least&nbsp;two&nbsp;classes).&nbsp;Notice&nbsp;that&nbsp;in&nbsp;the&nbsp;case&nbsp;of&nbsp;a&nbsp;NN&nbsp;classifier,&nbsp;outlier&nbsp;datapoints&nbsp;(e.g.&nbsp;green&nbsp;point&nbsp;in&nbsp;the&nbsp;middle&nbsp;of&nbsp;a&nbsp;cloud&nbsp;of&nbsp;blue&nbsp;points)&nbsp;create&nbsp;small&nbsp;islands&nbsp;of&nbsp;likely&nbsp;incorrect&nbsp;predictions,&nbsp;while&nbsp;the&nbsp;5-NN&nbsp;classifier&nbsp;smooths&nbsp;over&nbsp;these&nbsp;irregularities,&nbsp;likely&nbsp;leading&nbsp;to&nbsp;better&nbsp;<strong>generalization</strong>&nbsp;on&nbsp;the&nbsp;test&nbsp;data&nbsp;(not&nbsp;shown).&nbsp;Also&nbsp;note&nbsp;that&nbsp;the&nbsp;gray&nbsp;regions&nbsp;in&nbsp;the&nbsp;5-NN&nbsp;image&nbsp;are&nbsp;caused&nbsp;by&nbsp;ties&nbsp;in&nbsp;the&nbsp;votes&nbsp;among&nbsp;the&nbsp;nearest&nbsp;neighbors&nbsp;(e.g.&nbsp;2&nbsp;neighbors&nbsp;are&nbsp;red,&nbsp;next&nbsp;two&nbsp;neighbors&nbsp;are&nbsp;blue,&nbsp;last&nbsp;neighbor&nbsp;is&nbsp;green).</p>
</section>
<section id="validation-sets-for-hyperparameter-tunning." class="level1">
<h1>Validation sets for Hyperparameter tunning.</h1>
<p>We saw that there are many different distance functions we could have used: L1 norm, L2. norm, there are many other choices we didn’t even consider (e.g.&nbsp;dot products). These choices are called <strong>hyperparameters</strong> nd they come up very often in the design of many ML algorithms that learn from data. It’s often not obvious what values/settings one should choose.</p>
<p>We might be tempted to suggest what we should try out many different values and see what work bests. That is a fine idea and that’s indeed what we will do, but this must be done very carefully. In particular, <strong>we cannot use the test set for the purpose of tweaking hyperparameters</strong>. Whenever we’re designing ML algorithms, we should think of the test set as a very precious resource that should ideally never be touched until one time at the very end. Otherwise, the very real danger is that we may tune our hyperparameters to work well on the test set, but if we were to deploy our model we could see a significantly reduced performance. in practice, we would say that we <strong>overfit</strong> to the test set. Another way of looking at it is that if we tune</p>


</section>

 ]]></description>
  <guid>https://kimhungbui.github.io/programming/convolution/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Docker basics</title>
  <dc:creator>Kim Hung Bui</dc:creator>
  <link>https://kimhungbui.github.io/programming/docker-intro/</link>
  <description><![CDATA[ 




<p>This chapter introduces containerization with Docker and relevant concepts such as image and volume. By the end of this chapter you are able to:</p>
<ul>
<li>Run containerized applications</li>
<li>Containerize applications</li>
<li>Utilize volumes to store data persistently outside of the containers.</li>
<li>Use port mapping to enable access via TCP to containerized applications</li>
<li>Share your own containers publicly</li>
</ul>
<section id="definitions-and-basic-concept" class="level1">
<h1>Definitions and basic concept</h1>
<section id="what-is-devops" class="level2">
<h2 class="anchored" data-anchor-id="what-is-devops">What is DevOps</h2>
<p>The term itself consists of two parts <em>Dev</em> and <em>Ops</em>. Dev refers to the development of software and Ops to operations. Simple definition for DevOps would be that it means the release, configuring, and monitoring of software is in the hand people who develop it.</p>
</section>
<section id="what-is-docker" class="level2">
<h2 class="anchored" data-anchor-id="what-is-docker">What is Docker</h2>
<blockquote class="blockquote">
<p>“Docker&nbsp;is&nbsp;a&nbsp;set&nbsp;of&nbsp;platform&nbsp;as&nbsp;a&nbsp;service&nbsp;(PaaS)&nbsp;products&nbsp;that&nbsp;use&nbsp;OS-level&nbsp;virtualization&nbsp;to&nbsp;deliver&nbsp;software&nbsp;in&nbsp;packages&nbsp;called&nbsp;containers.”&nbsp;-&nbsp;<a href="https://en.wikipedia.org/wiki/Docker_(software)">from&nbsp;Wikipedia(opens&nbsp;in&nbsp;a&nbsp;new&nbsp;tab)</a>.</p>
</blockquote>
<p>So we get two definitions: 1. Docker is a set of tools to deliver software incontainers. 2. Containers are packages of software. <img src="https://kimhungbui.github.io/programming/docker-intro/Pasted image 20250403152352.png" class="img-fluid"></p>
<p>The above image illustrate how containers include the application and its dependencies. These containers are isolated so that they don’t interfere with each other or the software running outside of the containers. If we want to enable interactions between them, Docker offers tools to do so.</p>
</section>
<section id="benefits-from-containers" class="level2">
<h2 class="anchored" data-anchor-id="benefits-from-containers">Benefits from containers</h2>
<p>Containers package applications. In different scenarios: ### Scenario 1: Works on my machine</p>
<p>Let’s first take a closer look into what happens in web development without containers following the chain above starting from “Plan”.</p>
<p>First we plan an application. Then our team of 1-n developers create the software. It works on one’s computer. It may even go through a testing pipeline working perfectly. We send it to the server and it does not work.</p>
<p>This&nbsp;is&nbsp;known&nbsp;as&nbsp;the&nbsp;<strong>“works&nbsp;on&nbsp;my&nbsp;machine”</strong>&nbsp;problem.&nbsp;The&nbsp;only&nbsp;way&nbsp;to&nbsp;solve&nbsp;this&nbsp;is&nbsp;by&nbsp;finding&nbsp;out&nbsp;what&nbsp;in&nbsp;tarnation&nbsp;the&nbsp;developer&nbsp;had&nbsp;installed&nbsp;on&nbsp;their&nbsp;machine&nbsp;that&nbsp;made&nbsp;the&nbsp;application&nbsp;work.</p>
<p>Containers&nbsp;solve&nbsp;this&nbsp;problem&nbsp;by&nbsp;allowing&nbsp;the&nbsp;developer&nbsp;to&nbsp;personally&nbsp;run&nbsp;the&nbsp;application&nbsp;inside&nbsp;a&nbsp;container,&nbsp;which&nbsp;then&nbsp;includes&nbsp;all&nbsp;of&nbsp;the&nbsp;dependencies&nbsp;required&nbsp;for&nbsp;the&nbsp;app&nbsp;to&nbsp;work.</p>
<ul>
<li>You&nbsp;may&nbsp;still&nbsp;occasionally&nbsp;hear&nbsp;about&nbsp;“works&nbsp;in&nbsp;my&nbsp;<strong>container</strong>”&nbsp;issues&nbsp;-&nbsp;these&nbsp;are&nbsp;often&nbsp;just&nbsp;usage&nbsp;errors. ### Scenario 2: Isolated environments</li>
</ul>
<p>We have 5 different Python applications. We need to deploy them to a server that already has an application requiring Python 2.7 and of course none of our applications are 2.7. What do we do now?</p>
<p>Since containers package the software with all of its dependencies, we package the existing app and all 5 new ones with their respective Python versions and that’s it.</p>
<p>Sometimes&nbsp;different&nbsp;parts&nbsp;of&nbsp;a&nbsp;system&nbsp;may&nbsp;change&nbsp;over&nbsp;time,&nbsp;possibly&nbsp;leading&nbsp;to&nbsp;the&nbsp;application&nbsp;not&nbsp;working.&nbsp;These&nbsp;changes&nbsp;may&nbsp;be&nbsp;anything&nbsp;from&nbsp;an&nbsp;operating&nbsp;system&nbsp;update&nbsp;to&nbsp;changes&nbsp;in&nbsp;dependencies.</p>
<section id="scenario-3-development" class="level3">
<h3 class="anchored" data-anchor-id="scenario-3-development">Scenario 3: Development</h3>
<p>We are brought into a dev team. They run a web app that uses other services when running: a Postgres database, MongoDB, Redis and a number of others. Simple enough, we install whatever is required to run the application and all of the applications that it depends on …</p>
<p>What a headache to start installing and then managing the development databases on your own machine.</p>
<p>Thankfully, by the time we are told to do that we are already a Docker expert. With one command we get an isolated application, like Postgres or Mongo, running in our machine.</p>
</section>
<section id="scenario-4-scaling" class="level3">
<h3 class="anchored" data-anchor-id="scenario-4-scaling">Scenario 4: Scaling</h3>
<p>Starting and stopping a Docker container has little overhead. But when we run our own Netflix or Facebook, we want to meet the changing demand. With some advanced tooling that we will learn about in parts 2 and 3, we can spin up multiple containers instantly and load balance traffic between them.</p>
<p>Container orchestration will be discussed in parts 2 and 3. But the simplest example: what happens when one application dies? The orchestration system notices it, splits traffic between the working replicas, and spins up a new container to replace the dead one.</p>
</section>
</section>
<section id="virtual-machines" class="level2">
<h2 class="anchored" data-anchor-id="virtual-machines">Virtual machines</h2>
<p><img src="https://kimhungbui.github.io/programming/docker-intro/Pasted image 20250403154053.png" class="img-fluid"></p>
<p>VM virtualizes the physical hardware. Each VM includes a full OS along with the necessary binaries and libraries, making them heavier and more resources-intensive. Containers, on the other hand, share the host OS kernel and only package the application and its dependencies, resulting in a more lightweight and efficient solution.</p>
<p>VMs provide strong isolation and are suited for running multiple OS environments, but they have a performance overhead and longer startup times. Containers offer faster startup, better resource utilization, and high portability across different environments, though their isolation is at the process level, which may not be as robust as that of VMs. Overall, VMs could be used for scenarios needing complete OS environments, while containers excel in lightweight, efficient, and consistent application deployment.</p>
<p>Docker relies on Linux kernels, which means that macOS and Windows cannot run Docker natively without some additional steps. Each operating system has its own solution for running docker.</p>
</section>
<section id="image-and-containers" class="level2">
<h2 class="anchored" data-anchor-id="image-and-containers">Image and containers</h2>
<p>Since we already know what containers are it’s easier to explain images through them: Containers are instances of images. A basic mistake is to confuse images and containers.</p>
<p>Cooking metaphor:</p>
<p>Think of a container as a ready-to-eat meal that we can simply heat up and consume. An image, on the other hand, is the recipe <em>and</em> the ingredients for that meal.</p>
<p>So just like how we need a recipe and ingredients to make a meal, we need an image and a container runtime (Docker engine) to create a container. The image provides all the necessary instructions and dependencies for the container to run, just like a recipe provides the steps and ingredients to make a meal.</p>
<p>In short, an image is like a blueprint or template and the building material, while a container is an instance of that blueprint or template.</p>
<section id="image" class="level3">
<h3 class="anchored" data-anchor-id="image">Image</h3>
<p>A Docker image is a file. An image <em>never changes</em>; we cannot edit an existing file. Creating a new image happens by starting from a base image and adding new <strong>layers</strong> to it. We will talk about layers later, but we should think of images as <em>immutable</em>, they can not be changed after they are created.</p>
<p>List all of ours image with <code>docker image ls</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> docker image ls</span>
<span id="cb1-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">REPOSITORY</span>      TAG      IMAGE ID       CREATED         SIZE</span>
<span id="cb1-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hello-world</span>     latest   d1165f221234   9 days ago      13.3kB</span></code></pre></div>
<p>Containers are created from images, so when we ran hello-world twice we downloaded one <em>image</em> and created two of them from the single image.</p>
<p>Well then, if images are used to create containers, where do images come from? This image file is built from an instructional file named <strong>Dockerfile</strong> that is parsed when we run <code>docker image build</code>.</p>
<p>Dockerfile is a file that is by default called <em>Dockerfile</em>, that looks something like this</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> &lt;image&gt;:&lt;tag&gt;</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>install <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">some</span> dependencies<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CMD</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>command <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">that</span> is executed on <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> container run<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>and is the instruction set for building an image. We will look into Dockerfiles later when we to build our own images.</p>
<p>If we go back to the cooking metaphor, as Dockerfile provides the instructions needed to build an image we can think of that as the recipe for images. We’re now 2 recipes deep, as a Dockerfile is the recipe for an image and an image is the recipe for the container. The only difference is that Dockerfile is written by us, whereas image is written by our machine based on the Dockerfile.</p>
</section>
</section>
<section id="container" class="level2">
<h2 class="anchored" data-anchor-id="container">Container</h2>
<p>Containers only contain what is required to execute an application; and we can start, stop and interact with them. They are <strong>isolated</strong> environments in the host machine with the ability to interact with each other and the host machine itself via defined method (TCP/UDP).</p>
<p>List all of our containers with <code>docker container ls</code></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> docker container ls</span>
<span id="cb3-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CONTAINER</span> ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span></code></pre></div>
<p>Without <code>-a</code> flag it will only print running containers.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> docker container ls <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-a</span></span>
<span id="cb4-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CONTAINER</span> ID   IMAGE           COMMAND      CREATED          STATUS                      PORTS     NAMES</span>
<span id="cb4-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">b7a53260b513</span>   hello-world     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/hello"</span>     5 minutes ago    Exited <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5</span> minutes ago              brave_bhabha</span>
<span id="cb4-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1cd4cb01482d</span>   hello-world     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/hello"</span>     8 minutes ago    Exited <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">8</span> minutes ago              vibrant_bell</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>programming</category>
  <category>docker</category>
  <guid>https://kimhungbui.github.io/programming/docker-intro/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Disjoint Set Union</title>
  <dc:creator>Kim Hung Bui</dc:creator>
  <link>https://kimhungbui.github.io/programming/disjoint-set-union/</link>
  <description><![CDATA[ 




<p>This data structure provides the following capabilities. We are given several elements, each of which is a separate set. A DSU will have an operation to <strong>combine any two sets</strong>, and it will be able to <strong>tell in which set a specific element is</strong>. The classical version also introduces a third operation, it can <strong>create a set from a new element</strong>.</p>
<p>Thus the basic interface of this data structure consists of only three operations: - <code>make_set()</code> - create a new set consisting of the new element <code>v</code>. - <code>union_sets(a, b)</code> - merges the two specified sets (the set in which the element <code>a</code> is located, and the set in which the element <code>b</code> is located). - <code>find_set(v)</code> - return the representative (also called leader) of the set that contains the element <code>v</code>. This representative is an element of its corresponding set. It is selected in each set by the data structure itself (and can change over time, namely after <code>union_sets</code> call). This representative can be used to check if two elements are part of the same set or not. <code>a</code> and <code>b</code> are exactly in the same set, if <code>find_set(a) == find_set(b)</code>. Otherwise they are in different sets.</p>
<p>As described on more detail later, the data structure allows us to do each of these operations in almost <img src="https://latex.codecogs.com/png.latex?O(1)"> time on average.</p>
<p>Also in one of the subsections an alternative structure of a DSU is explained, which achieves a slower average complexity of <img src="https://latex.codecogs.com/png.latex?O(%5Clog%20n)">, but can be more powerful than the regular DSU structure.</p>
<section id="build-an-efficient-data-structure" class="level1">
<h1>Build an efficient data structure</h1>
<p>We will store the sets in the form of <strong>trees</strong>: each tree will correspond to one set. And the root of the tree will be the representative/leader of the set.</p>
<p>In the following image we can see the representative of such trees.</p>
<p>![[DSU_example.png]] In the beginning, every element starts as a single set, there fore each vertex is its own tree. Then we combine the set containing the element 1 and the et containing the element 2. Then we combine the set containing the element 3 and the set containing the element 4. And in the last step, we combine the set containing the element 1 and the set containing the element 3.</p>
<p>For the implementation this means that we will have to maintain an array <code>parent</code> that stores a reference to its immediate ancestor in the tree.</p>
<section id="naive-implementation" class="level2">
<h2 class="anchored" data-anchor-id="naive-implementation">Naive implementation</h2>
<p>We can already write the first implementation of the Disjoint Set Union data structure. It will be pretty inefficient at first, but later we can improve it using two optimizations, so that it will take nearly constant time for each function call.</p>
<p>As we said, all the information about the sets of elements will be kept in an array <code>parent</code>.</p>
<p>To create a new set (operation <code>make_set(v)</code>), we simply create a tree with root in the vertex <code>x</code>, meaning that it is its own ancestor.</p>
<p>To combine two sets (operation <code>union_sets(a, b)</code>), we first find the representative of the set in which <code>a</code> is located, and the representative of the set in which <code>b</code> is located. If the representatives are identical, that we have nothing to do, the sets are already merged. Otherwise, we can simply specify that one of the representatives is the parent of the other representative - thereby combining the two trees.</p>
<p>Finally the implementation of the find representative function (operation <code>find_set(v)</code>): we simply climb the ancestors of the vertex <code>v</code> until we reach the root, i.e.&nbsp;a vertex such that the reference to the ancestor leads to itself. This operation is easily implemented recursively.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c++ code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> make_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> union_sets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-12">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-13">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-15">        parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>However this implementation is inefficient. It is easy to construct an example, so that the trees degenerate into long chains. In that case each call <code>find_set(v)</code> can take <img src="https://latex.codecogs.com/png.latex?O(n)"> time.</p>
<p>This is far away from the complexity that we want to have (nearly constant time). Therefore we will consider two optimizations that will allow to significantly accelerate the work.</p>
</section>
<section id="path-compression-optimization" class="level2">
<h2 class="anchored" data-anchor-id="path-compression-optimization">Path compression optimization</h2>
<p>This optimization is designed for speeding up <code>find_set</code>.</p>
<p>If we call <code>find_set()</code> for some vertex <code>x</code>, we actually find the representative <code>p</code> for all vertices that we visit on the path between <code>v</code> and the actually representative <code>p</code>. The trick is to make the paths for all those nodes shorter, by setting the parent of each visited vertex directly to <code>p</code>.</p>
<p>We can see the operation in the following image. On the left there is a tree, and on the right side there is the compressed tree after calling <code>find_set(7)</code>, which shortens the paths for the visited node 7, 5, 3 and 2.</p>
<p>![[DSU_path_compression.png]]</p>
<p>The new implementation of <code>find_set</code> is as follows:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb2-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb2-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The simple implementation does what was intended: first find the representative of the set (root vertex), and then in the process of stack unwinding the visited nodes are attached directly to the representative.</p>
<p>This simple modification of the operation already achieves the time complexity <img src="https://latex.codecogs.com/png.latex?O(%5Clog%20n)"> per call on average (here without proof). There is a second modification, that will make it even faster.</p>
</section>
<section id="union-by-size-rank" class="level2">
<h2 class="anchored" data-anchor-id="union-by-size-rank">Union by size / rank</h2>
<p>In this optimization we will change the <code>union_set</code> operation. To be precise, we will change which tree gets attached to the other one. In the naive implementation the second tree always got attached to the first one. In practice that can lead to trees containing chains of length <img src="https://latex.codecogs.com/png.latex?O(n)">. With this optimization we will avoid this by choosing very carefully which tree gets attached.</p>
<p>There are many possible heuristic that can be used. Most popular are the following two approaches: In the first approach we use the size of the trees as rank, and in the second one we use the depth of the tree (more precisely, the upper bound on the tree depth, because the depth will get smaller when applying path compression).</p>
<p>In both approaches the essence of the optimization is the same: we attach the tree with the lower rank to the one with the bigger rank.</p>
<p>Here is the implementation of union by size:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> make_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">    parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3">    size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> union_sets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-7">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-8">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb3-11">            swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-12">        parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>and here is the implementation of union by rank based on the depth of the trees:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> make_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">    parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3">    rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> union_sets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-7">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-8">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb4-11">            swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-12">        parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb4-14">            rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]++;</span></span>
<span id="cb4-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Both optimizations are equivalent in terms of time and space complexity. So in practice we can use any of them.</p>
</section>
<section id="time-complexity" class="level2">
<h2 class="anchored" data-anchor-id="time-complexity">Time complexity</h2>
<p>As mentioned before, if we combine both optimizations - path compression with union by size / rank - we will reach nearly constant time queries. It turns out, that the final amortized complexity is <img src="https://latex.codecogs.com/png.latex?O(%5Calpha(n))">, where <img src="https://latex.codecogs.com/png.latex?%5Calpha%20(n)"> is the inverse Ackermann function, which grows very slowly. In fact it grows so lowly, that it doesn’t exceed 4 for all reasonable <img src="https://latex.codecogs.com/png.latex?n"> (approximately <img src="https://latex.codecogs.com/png.latex?n%3C10%5E%7B600%7D">).</p>
<p>Amortized complexity is the total time per operation, evaluated over a sequence of multiple operations. The idea is to guarantee the total time of the entire sequence, while allowing single operations to be much slower than the amortized time. E.g. in our case a single call might take <img src="https://latex.codecogs.com/png.latex?O(%5Clog%20n)"> in the worst case, but if we do <img src="https://latex.codecogs.com/png.latex?m"> such calls back to back we will end up with an average time of <img src="https://latex.codecogs.com/png.latex?O(%5Calpha%20(n))">.</p>
<p>We will also not present a proof for this time complexity, since it is quite long and complicated.</p>
<p>Also, it’s worth mentioning that DSU with union by size / rank, but without path compression works in <img src="https://latex.codecogs.com/png.latex?O(%5Clog%20n)"> time per query.</p>
</section>
<section id="linking-by-index-coin-flip-linking" class="level2">
<h2 class="anchored" data-anchor-id="linking-by-index-coin-flip-linking">Linking by index / coin-flip linking</h2>
<p>Both union by rank and union by size require that we store additional data for each set, and maintain these values during each union operation. There exist also a randomized algorithm, that simplifies the union operation a little bit: linking by index.</p>
<p>We assign each set a random value called the index, and we attach the set with the smaller index to the one with the larger one. It is likely that a bigger set will have a bigger than the smaller set, therefore this operation is closely related to union by size. In fact it can be proven, that this operation has the same time complexity as union by size. However in practice it is slightly slower than union by size.</p>


</section>
</section>

 ]]></description>
  <category>programming</category>
  <category>data structure</category>
  <guid>https://kimhungbui.github.io/programming/disjoint-set-union/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://kimhungbui.github.io/programming/disjoint-set-union/dundee.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Minimum Cost Walk in Weighted Graph</title>
  <dc:creator>Kim Hung Bui</dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-minimum-cost-walk-in-weight-graph/</link>
  <description><![CDATA[ 




<section id="question" class="level1">
<h1>Question</h1>
<p>There is an undirected weighted graph with n vertices labeled from 0 to n - 1.</p>
<p>You are given the integer n and an array edges, where edges[i] = [ui, vi, wi] indicates that there is an edge between vertices ui and vi with a weight of wi.</p>
<p>A walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It’s important to note that a walk may visit the same edge or vertex more than once.</p>
<p>The cost of a walk starting at node u and ending at node v is defined as the bitwise AND of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is w0, w1, w2, …, wk, then the cost is calculated as w0 &amp; w1 &amp; w2 &amp; … &amp; wk, where &amp; denotes the bitwise AND operator.</p>
<p>You are also given a 2D array query, where query[i] = [si, ti]. For each query, you need to find the minimum cost of the walk starting at vertex si and ending at vertex ti. If there exists no such walk, the answer is -1.</p>
<p>Return the array answer, where answer[i] denotes the minimum cost of a walk for query i.</p>
<p>Example 1:</p>
<p>Input: <code>n = 5</code>, edges = <code>[[0,1,7],[1,3,7],[1,2,1]]</code>, query = <code>[[0,3],[3,4]]</code></p>
<p>Output: <code>[1,-1]</code></p>
<p>Explanation:</p>
<p>To achieve the cost of 1 in the first query, we need to move on the following edges: 0-&gt;1 (weight 7), 1-&gt;2 (weight 1), 2-&gt;1 (weight 1), 1-&gt;3 (weight 7).</p>
<p>In the second query, there is no walk between nodes 3 and 4, so the answer is -1.</p>
<p>Example 2:</p>
<p>Input: n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]</p>
<p>Output: [0]</p>
<p>Explanation:</p>
<p>To achieve the cost of 0 in the first query, we need to move on the following edges: 1-&gt;2 (weight 1), 2-&gt;1 (weight 6), 1-&gt;2 (weight 1).</p>
<p>Constraints:</p>
<pre><code>2 &lt;= n &lt;= 105
0 &lt;= edges.length &lt;= 105
edges[i].length == 3
0 &lt;= ui, vi &lt;= n - 1
ui != vi
0 &lt;= wi &lt;= 105
1 &lt;= query.length &lt;= 105
query[i].length == 2
0 &lt;= si, ti &lt;= n - 1
si != ti</code></pre>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>Let’s determine when the answer to a query is <code>-1</code>. This happens when no walk exists between the two nodes, meaning they belong to different connected components.</p>
<p>Now, suppose the two nodes belong to the same connected component. What is the minimum cost of a walk connecting them? As mentioned, the optimal walk includes as many edges as possible. Since revisiting an edge does not affect the total score, we can freely traverse the edges of the component, meaning that we can move back and forth to reach all of them. Therefore, the best way to achieve the lowest cost is to visit every edge in the component.</p>
<p>To efficiently find and process the connected components of the graph, we use the Disjoint Set (Union-Find) data structure. When we Union two nodes, we merge their entire groups, as now a path exists between every node in one group and every node in the other. To maintain efficiency, the root of the larger group is chosen as the representative of the merge group. This minimizes the time needed for future Find operations by reducing the number of steps required to reach the current representative.</p>


</section>

 ]]></description>
  <category>programming</category>
  <category>data structure</category>
  <category>DSU</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-minimum-cost-walk-in-weight-graph/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://kimhungbui.github.io/programming/leetcode-minimum-cost-walk-in-weight-graph/dundee.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>3191. Minimum Operations to Make Binary Array Elements Equal to One I</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcodeminimum-operations-to-make-binary-array-elements-equal-to-one-i/3191.html</link>
  <description><![CDATA[ 




<p>You are given a</p>
<p>nums.</p>
<p>You can do the following operation on the array any number of times (possibly zero):</p>
<pre><code>Choose any 3 consecutive elements from the array and flip all of them.</code></pre>
<p>Flipping an element means changing its value from 0 to 1, and from 1 to 0.</p>
<p>Return the minimum number of operations required to make all elements in nums equal to 1. If it is impossible, return -1.</p>
<p>Example 1:</p>
<p>Input: nums = [0,1,1,1,0,0]</p>
<p>Output: 3</p>
<p>Explanation: We can do the following operations:</p>
<pre><code>Choose the elements at indices 0, 1 and 2. The resulting array is nums = [1,0,0,1,0,0].
Choose the elements at indices 1, 2 and 3. The resulting array is nums = [1,1,1,0,0,0].
Choose the elements at indices 3, 4 and 5. The resulting array is nums = [1,1,1,1,1,1].</code></pre>
<p>Example 2:</p>
<p>Input: nums = [0,1,1,1]</p>
<p>Output: -1</p>
<p>Explanation: It is impossible to make all elements equal to 1.</p>
<p>Constraints:</p>
<pre><code>3 &lt;= nums.length &lt;= 105
0 &lt;= nums[i] &lt;= 1</code></pre>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>Since we can only flip three consecutive elements at a time, isolated <code>0</code>s or certain patterns of <code>0</code>s may prevent us from turning everything into <code>1</code>. If the number of <code>0</code>s in certain positions makes it impossible to fully eliminate them using groups of three, the transformation cannot be achieved.</p>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcodeminimum-operations-to-make-binary-array-elements-equal-to-one-i/3191.html</guid>
  <pubDate>Thu, 20 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Parity invariance</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/program-parity-invariance/parity-invariance.html</link>
  <description><![CDATA[ 




<p>Parity invariance means that the number of times a position is flipped determines its final value. If a position is flipped an odd number of times, its value changes, but if it is flipped an even number of times, it stays the same.</p>
<p>Consider the array <code>[1, 0, 0, 1, 0, 1, 1]</code>. We start by flipping three consecutive elements to try and transform all <code>0</code>s into <code>1</code>s. First, flipping the subarray <code>[0, 0, 1]</code> at indices <code>1..3</code> changes the array to <code>[1, 1, 1, 0, 0, 1, 1]</code>. Then, flipping <code>[0, 0, 1]</code> at indices <code>[3..5]</code> gives <code>[1, 1, 1, 1, 1, 0, 1]</code>. Finally, flipping <code>[1, 0, 1]</code> at indices <code>[1, 0, 1]</code> at indices <code>4..6</code> results in <code>[1, 1, 1, 1, 1, 1, 0, 1, 0]</code>.</p>
<p>At this point, we see that the <code>0</code>s at positions <code>4</code> and <code>6</code> remain, and there is no way to flip them without also flipping the other elements. Since we can only flip three elements at a time, we cannot isolate these <code>0</code>s in a way that allow us to change them to <code>1</code>s. This happens because these positions were flipped an even number of times, so they retain their original value. Because of this <strong>parity constraint</strong>, the transformation is impossible.</p>



 ]]></description>
  <category>bit manipulation</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/program-parity-invariance/parity-invariance.html</guid>
  <pubDate>Thu, 20 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>leetcode-Longest-Nice-Subarray</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-longest-nice-subarray/leetcode-Longest-Nice-Subarray.html</link>
  <description><![CDATA[ 




<p>Topic: <code>array, bit manipulation, slide windown</code></p>
<section id="question" class="level1">
<h1>Question</h1>
<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers.</p>
<p>We call a subarray of <code>nums</code> <strong>nice</strong> if the bitwise <strong>AND</strong> of every pair of elements that are in <strong>different</strong> positions in the subarray is equal to <code>0</code>.</p>
<p>Return <em>the length of the <strong>longest</strong> nice subarray</em>.</p>
<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>
<p><strong>Note</strong> that subarrays of length <code>1</code> are always considered nice.</p>
<p>Example 1:</p>
<p>Input: nums = [1,3,8,48,10] Output: 3 Explanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions: - 3 AND 8 = 0. - 3 AND 48 = 0. - 8 AND 48 = 0. It can be proven that no longer nice subarray can be obtained, so we return 3.</p>
<p>Example 2:</p>
<p>Input: nums = [3,1,5,11,13] Output: 1 Explanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.</p>
<p>Constraints:</p>
<pre><code>1 &lt;= nums.length &lt;= 105
1 &lt;= nums[i] &lt;= 109</code></pre>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>&nbsp; &nbsp; example 1:</p>
<p>&nbsp; &nbsp; [1, 3, 8, 48, 10]</p>
<p>&nbsp; &nbsp; 3 in bin: 0011</p>
<p>&nbsp; &nbsp; 8 in bin: 1000</p>
<p>&nbsp; &nbsp; 48d = 1100000</p>
<p>&nbsp; &nbsp; 10d = 1010</p>
<p>&nbsp; &nbsp; 0011 AND 1000 = 0</p>
<p>&nbsp; &nbsp; 3, 8, 48 AND = 0</p>
<p>&nbsp; &nbsp; 10 and 8 not = 0</p>
<p>&nbsp; &nbsp; so, if pair AND = 0</p>
<p>&nbsp; &nbsp; that pair have no common bit</p>
<p>&nbsp; &nbsp; so, we store a bit array to check the state of bit</p>
<p>&nbsp; &nbsp; and if, to better, we just need to store number of bit in that array instead.</p>
<p>&nbsp; &nbsp; oh no, it wrong.</p>
<p>&nbsp; &nbsp; so if we must store a array.</p>
<p>&nbsp; &nbsp; no, we can use bitwise operator <code>&amp;</code> to check if <code>a AND b == 0</code> or not</p>
<p>&nbsp; &nbsp; and <code>OR</code> for cumulative bit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">&nbsp; &nbsp; x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-2">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 101</span></span>
<span id="cb2-3">&nbsp; &nbsp; x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb2-4">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3 == 011</span></span>
<span id="cb2-5">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 101 |= 011 = 111</span></span>
<span id="cb2-6">&nbsp; &nbsp; <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb2-7">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7</span></span></code></pre></div>
<p>&nbsp; &nbsp; to search for longest (can use <code>i</code>, and <code>j</code>) for check all the begin and end</p>
<p>&nbsp; &nbsp; improve it by two pointer to decrease TC from <code>O(n^2)</code> to <code>O(n)</code></p>
<p>&nbsp; &nbsp; and now, how to get rid of num of left from cumulative bit in slide windown</p>
<p>&nbsp; &nbsp; check that case: [011, 100]</p>
<p>&nbsp; &nbsp; now, culmulative bit: 111</p>
<p>&nbsp; &nbsp; we want it after left += 1, is 100</p>
<p>&nbsp; &nbsp; in XOR: 111 XOR 011 == 100</p>
<p>&nbsp; &nbsp; XOR parameter in python is <code>^=</code></p>
</section>
<section id="code" class="level1">
<h1>Code</h1>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> longestNiceSubarray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb3-2"></span>
<span id="cb3-3">&nbsp; &nbsp; &nbsp; &nbsp; cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">&nbsp; &nbsp; &nbsp; &nbsp; ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">&nbsp; &nbsp; &nbsp; &nbsp; left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-8"></span>
<span id="cb3-9">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> right <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)):</span>
<span id="cb3-10"></span>
<span id="cb3-11">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># when AND not ease</span></span>
<span id="cb3-12"></span>
<span id="cb3-13">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> nums[right] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right can not cumulative, increase left until it can ease, use XOR for get rid of it</span></span>
<span id="cb3-14"></span>
<span id="cb3-15">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^=</span> nums[left]</span>
<span id="cb3-16"></span>
<span id="cb3-17">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-18"></span>
<span id="cb3-19">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># until can AND</span></span>
<span id="cb3-20"></span>
<span id="cb3-21">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use OR to cumulative it</span></span>
<span id="cb3-22"></span>
<span id="cb3-23">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> nums[right]</span>
<span id="cb3-24"></span>
<span id="cb3-25">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(ans, right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-26"></span>
<span id="cb3-27">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-longest-nice-subarray/leetcode-Longest-Nice-Subarray.html</guid>
  <pubDate>Tue, 18 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Divide Array Into Equal Pairs</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-divide-array-into-equal-pairs/Leetcode-Divide-array-into-equal-pairs.html</link>
  <description><![CDATA[ 




<p>Topic: <code>array, hash table, bit manipulation, counting</code></p>
<section id="question" class="level1">
<h1>Question</h1>
<p>You are given an integer array nums consisting of <code>2 * n</code> integers.</p>
<p>You need to divide nums into n pairs such that:</p>
<pre><code>Each element belongs to exactly one pair.
The elements present in a pair are equal.</code></pre>
<p>Return true if nums can be divided into n pairs, otherwise return false.</p>
<p>Example 1:</p>
<ul>
<li><p>Input: <code>nums = [3,2,3,2,2,2]</code></p></li>
<li><p>Output: <code>true</code></p></li>
<li><p>Explanation: <code>There are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs. If nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.</code></p></li>
</ul>
<p>Example 2:</p>
<ul>
<li>Input: <code>nums = [1,2,3,4]</code></li>
<li>Output: <code>false</code></li>
<li>Explanation: <code>There is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.</code></li>
</ul>
<p>Constraints:</p>
<ul>
<li><code>nums.length == 2 * n</code></li>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>1 &lt;= nums[i] &lt;= 500</code></li>
</ul>
</section>
<section id="approaches" class="level1">
<h1>Approaches</h1>
<section id="count-array" class="level2">
<h2 class="anchored" data-anchor-id="count-array">Count array</h2>
<p><code>nums</code> that have 2 * n intenger</p>
<p>divide <code>nums</code> into n pairs</p>
<p>1 element in 1 pair</p>
<p>elements in pair is equal</p>
<p>return true if can devide to n pair,</p>
<p>So, we can use count array</p>
<pre><code>if all even \`return true\`

else \`return false\`</code></pre>
<p>TC: O(n)</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Solution:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb3-3">    ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-4">    count_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb3-6">        count_array[num] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(count_array)</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> count_array:</span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</section>
<section id="map" class="level2">
<h2 class="anchored" data-anchor-id="map">Map</h2>
<p>like approach 1, we can use map for that (better code)</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb4-2">        frequency <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(nums)</span>
<span id="cb4-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check consecutive pairs in sorted array</span></span>
<span id="cb4-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> frequency.values())</span></code></pre></div>
</section>
<section id="bool-array" class="level2">
<h2 class="anchored" data-anchor-id="bool-array">Bool array</h2>
<p>an improve, use boolean array</p>
<p>O(n)</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb5-2"></span>
<span id="cb5-3">        max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(nums)</span>
<span id="cb5-4"></span>
<span id="cb5-5">        needs_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb5-8">            needs_pair[num] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> needs_pair[num]</span>
<span id="cb5-9"></span>
<span id="cb5-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(needs_pair[num] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums)</span></code></pre></div>
</section>
<section id="sorted" class="level2">
<h2 class="anchored" data-anchor-id="sorted">Sorted</h2>
<p>sorted that can have TC: O(nlogn)</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb6-2">        nums.sort()</span>
<span id="cb6-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check consecutive pairs in sorted array</span></span>
<span id="cb6-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(nums[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nums[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</section>
<section id="hash-set" class="level2">
<h2 class="anchored" data-anchor-id="hash-set">Hash set</h2>
<p>we can store a element when first meet it, and even get it, we remote from set</p>
<p>when retrieve all, if set have element.</p>
<p>hash set have TC of lookup, addition, removal in constant time.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb7-2">        unpaired <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb7-3"></span>
<span id="cb7-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb7-5">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> unpaired:</span>
<span id="cb7-6">                unpaired.remove(num)</span>
<span id="cb7-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-8">                unpaired.add(num)</span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> unpaired</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-divide-array-into-equal-pairs/Leetcode-Divide-array-into-equal-pairs.html</guid>
  <pubDate>Mon, 17 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>House robber</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-house-robber/house-robber.html</link>
  <description><![CDATA[ 




<p>Topic: <code>array, dymanic programming</code></p>
<section id="question" class="level1">
<h1>Question</h1>
<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>
<p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p>
<p>Example 1:</p>
<ul>
<li>Input: <code>nums = [1,2,3,1]</code></li>
<li>Output: <code>4</code></li>
<li>Explanation: <code>Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.</code></li>
</ul>
<p>Example 2:</p>
<ul>
<li>Input: <code>nums = [2,7,9,3,1]</code></li>
<li>Output: <code>12</code></li>
<li>Explanation: <code>Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.</code></li>
</ul>
<p>Constraints:</p>
<pre><code>1 &lt;= nums.length &lt;= 100
0 &lt;= nums[i] &lt;= 400</code></pre>
</section>
<section id="approaches" class="level1">
<h1>Approaches</h1>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-house-robber/house-robber.html</guid>
  <pubDate>Mon, 17 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to approach most DP problems</title>
  <dc:creator>Kim Hung Bui</dc:creator>
  <link>https://kimhungbui.github.io/programming/programming-how-to-approach-most-dp-problems/how-to-approach-most-dp-problems.html</link>
  <description><![CDATA[ 




<p>To solve a dp problem: https://leetcode.com/problems/house-robber/solutions/156523/from-good-to-great-how-to-approach-most-of-dp-problems/</p>
<p>This particular problem can be approached using the following sequence:</p>
<ol type="1">
<li>Find recursive relation</li>
<li>Recursive (top-down)</li>
<li>Recursive + memo (top-down)</li>
<li>Iterative + memo (bottom-up)</li>
<li>Iterative + N variables (bottom-up)</li>
</ol>
<section id="step-1-figure-out-recursive-relation." class="level1">
<h1>Step 1: Figure out recursive relation.</h1>
<p>A robber has 2 options: 1. rob current house <code>i</code>; 2. Don’t rob current house.</p>
<p>If an option <code>1</code> is selected it means that she can’t rob previous <code>i-1</code> house but can rob the one before previous <code>i-2</code> and get alls cumulative loot that follows.</p>
<p>If an option <code>2</code> is selected the robber loot from robbery of <code>i-1</code> and all the following buildings.</p>
<p>So it boils down to calculating what is more profitable:</p>
<ul>
<li><p>robbery of current house + loot from house before the previous</p></li>
<li><p>loot from the previous house robbery and any loot capture before that</p></li>
</ul>
<p><code>rob(i) = Math.max(rob(i-2) + currentHouseValue, rob(i-1))</code></p>
</section>
<section id="step-2-recursive-top-down" class="level1">
<h1>Step 2: Recursive (top-down):</h1>
<p>Converting the recurrent relation from step 1:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob_helper(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], i: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stop case</span></span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb1-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-8">        </span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nums[i], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) </span></code></pre></div>
<p>but it is TLE:</p>
<p>![[Pasted image 20250317111239.png]]</p>
<p>this algorithm will process the same <code>i</code> multiple times and it needs improvement. TC: <code>[to fill]</code></p>
</section>
<section id="step-3-recursive-memo-top-down" class="level1">
<h1>Step 3: Recursive + memo (top-down)</h1>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">&nbsp; &nbsp; memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-2"></span>
<span id="cb2-3">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-4"></span>
<span id="cb2-5">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 stand for not rob that house is better</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1 for not check house</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">&nbsp; &nbsp; &nbsp; &nbsp; <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13">  </span>
<span id="cb2-14"></span>
<span id="cb2-15">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob_helper(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], i: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-16"></span>
<span id="cb2-17">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stop case</span></span>
<span id="cb2-18"></span>
<span id="cb2-19">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb2-20"></span>
<span id="cb2-21">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> &nbsp; &nbsp;</span>
<span id="cb2-22"></span>
<span id="cb2-23">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-24"></span>
<span id="cb2-25">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory[i]</span>
<span id="cb2-26"></span>
<span id="cb2-27">&nbsp; &nbsp; &nbsp; &nbsp; result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nums[i], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-28"></span>
<span id="cb2-29">&nbsp; &nbsp; &nbsp; &nbsp; <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result</span>
<span id="cb2-30"></span>
<span id="cb2-31">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span></code></pre></div>
<p>![[Pasted image 20250317112240.png]] This approach is better, this should run in <code>O(n)</code> time. Space complexity is <code>O(n)</code>.</p>
<p>Because the recursive stack, let’s try to get rid of it. ## Step 4: Iterative + memo (bottom-up)</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb3-2">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 stand for not rob that house is better</span></span>
<span id="cb3-3">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1 for not check house</span></span>
<span id="cb3-4">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-5">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> nums[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-9"></span>
<span id="cb3-10">&nbsp; &nbsp; &nbsp; &nbsp; memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-11">&nbsp; &nbsp; &nbsp; &nbsp; memory[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-12">&nbsp; &nbsp; &nbsp; &nbsp; memory[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nums[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-13">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)):</span>
<span id="cb3-14">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nums[i]</span>
<span id="cb3-15">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the next val is rob now, or rob the last</span></span>
<span id="cb3-16">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memory[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(memory[i], memory[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> val)</span>
<span id="cb3-17">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> memory[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)]</span></code></pre></div>
<section id="step-5-iterative-2-variables-bottom-up" class="level2">
<h2 class="anchored" data-anchor-id="step-5-iterative-2-variables-bottom-up">Step 5: Iterative + 2 variables (bottom-up)</h2>
<p>In the previous step, we use only <code>memo[i]</code> and <code>memo[i-1]</code>, so going just 2 step back. We can hold them in 2 variables instead. This optimization is met in Fibonacci sequence creation and some other problems [[Optimize Fibonacci]]</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb4-2">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-3">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-4">&nbsp; &nbsp; &nbsp; &nbsp; prev1, prev2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-5">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb4-6">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prev1</span>
<span id="cb4-7">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prev1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(prev2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num, prev1)</span>
<span id="cb4-8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prev2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp</span>
<span id="cb4-9">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prev1</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/programming-how-to-approach-most-dp-problems/how-to-approach-most-dp-problems.html</guid>
  <pubDate>Mon, 17 Mar 2025 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
