<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Kim Hung Bui</title>
<link>https://kimhungbui.github.io/programming.html</link>
<atom:link href="https://kimhungbui.github.io/programming.xml" rel="self" type="application/rss+xml"/>
<description>My Personal Website</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Wed, 07 May 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Role of Parallel Computing</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/parallel-computing/chapter1.html</link>
  <description><![CDATA[ 







 ]]></description>
  <category>parallel</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/parallel-computing/chapter1.html</guid>
  <pubDate>Wed, 07 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Count good triplets</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-count-good-triplets/</link>
  <description><![CDATA[ 




<section id="question" class="level1">
<h1>Question</h1>
<p>Given&nbsp;an&nbsp;array&nbsp;of&nbsp;integers&nbsp;<code>arr</code>,&nbsp;and&nbsp;three&nbsp;integers&nbsp;<code>a</code>,&nbsp;<code>b</code>&nbsp;and&nbsp;<code>c</code>.&nbsp;You&nbsp;need&nbsp;to&nbsp;find&nbsp;the&nbsp;number&nbsp;of&nbsp;good&nbsp;triplets.</p>
<p>A&nbsp;triplet&nbsp;<code>(arr[i], arr[j], arr[k])</code>&nbsp;is&nbsp;<strong>good</strong>&nbsp;if&nbsp;the&nbsp;following&nbsp;conditions&nbsp;are&nbsp;true:</p>
<ul>
<li><code>0 &lt;= i &lt; j &lt; k &lt;&nbsp;arr.length</code></li>
<li><code>|arr[i] - arr[j]| &lt;= a</code></li>
<li><code>|arr[j] - arr[k]| &lt;= b</code></li>
<li><code>|arr[i] - arr[k]| &lt;= c</code></li>
</ul>
<p>Where&nbsp;<code>|x|</code>&nbsp;denotes&nbsp;the&nbsp;absolute&nbsp;value&nbsp;of&nbsp;<code>x</code>.</p>
<p>Return&nbsp;<em>the&nbsp;number&nbsp;of&nbsp;good&nbsp;triplets</em>.</p>
<p><strong>Example&nbsp;1:</strong></p>
<p><strong>Input:</strong> <code>arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3</code> <strong>Output:</strong> 4 <strong>Explanation:</strong>&nbsp;There are 4 good triplets: <code>[(3,0,1), (3,0,1), (3,1,1), (0,1,1)]</code>.</p>
<p><strong>Example&nbsp;2:</strong></p>
<p><strong>Input:</strong> <code>arr = [1,1,2,2,3], a = 0, b = 0, c = 1</code> <strong>Output:</strong> 0 <strong>Explanation:</strong> No triplet satisfies all conditions.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= arr.length &lt;= 100</code></li>
<li><code>0 &lt;= arr[i] &lt;= 1000</code></li>
<li><code>0 &lt;= a, b, c &lt;= 1000</code></li>
</ul>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<section id="approach-1-enumeration" class="level3">
<h3 class="anchored" data-anchor-id="approach-1-enumeration">Approach&nbsp;1:&nbsp;Enumeration</h3>
<section id="intuition" class="level4">
<h4 class="anchored" data-anchor-id="intuition">Intuition</h4>
<p>Using&nbsp;<code>O(n3)</code>&nbsp;loops&nbsp;to&nbsp;enumerate&nbsp;all&nbsp;(i,j,k)&nbsp;in&nbsp;sequence,&nbsp;where&nbsp;0≤i&lt;j&lt;k&lt;arr.length,&nbsp;for&nbsp;each&nbsp;set&nbsp;of&nbsp;(i,j,k),&nbsp;determine&nbsp;whether&nbsp;arr[i],&nbsp;arr[j],&nbsp;and&nbsp;arr[k]&nbsp;satisfy&nbsp;the&nbsp;condition.</p>
<p>Finally,&nbsp;calculate&nbsp;the&nbsp;total&nbsp;number&nbsp;of&nbsp;all&nbsp;triplets&nbsp;that&nbsp;meet&nbsp;the&nbsp;conditions.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Solution:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> countGoodTriplets(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arr: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, c: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-3">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(arr)</span>
<span id="cb1-4">        countGoodTriplets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb1-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):</span>
<span id="cb1-7">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(arr[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> arr[j]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> a:</span>
<span id="cb1-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):</span>
<span id="cb1-9">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(arr[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> arr[k]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(arr[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> arr[k]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> c:</span>
<span id="cb1-10">                        countGoodTriplets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-11">                        </span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> countGoodTriplets</span></code></pre></div>
</section>
</section>
<section id="approach-2-optimized-enumeration" class="level2">
<h2 class="anchored" data-anchor-id="approach-2-optimized-enumeration">Approach 2: Optimized enumeration</h2>
<p>We need to eliminate one loop or make one of them constant-time.</p>
<p>We could try fixing <code>(j,k)</code> and then counting valid <code>i &lt; j</code>. That <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> pairs, and if we can count the <img src="https://latex.codecogs.com/png.latex?i">s in <img src="https://latex.codecogs.com/png.latex?O(1)"> each, we down to <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> total.</p>
<section id="translate-the-i-constraints-into-an-interval" class="level3">
<h3 class="anchored" data-anchor-id="translate-the-i-constraints-into-an-interval">Translate the <img src="https://latex.codecogs.com/png.latex?i">-constraints into an interval</h3>
<p>For a given <img src="https://latex.codecogs.com/png.latex?(j,k)">, the condition on <img src="https://latex.codecogs.com/png.latex?i"> are <img src="https://latex.codecogs.com/png.latex?%7Carr%5Bi%5D%20-%20arr%5Bj%5D%7C%20%5Cleq%20a"> so, <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D%20%5Cin%20%5Barr%5Bj%5D-a,%20arr%5Bj%5D+a%5D"></p>
<p>and <img src="https://latex.codecogs.com/png.latex?%7Carr%5Bi%5D-arr%5Bk%5D%7C%5Cleq%20c"> so, <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D%5Cin%5Barr%5Bk%5D-c,%20arr%5Bk%5D+c%5D"></p>
<p>Their intersection is a single interval <img src="https://latex.codecogs.com/png.latex?%5Bl,%20r%5D">. So we just need to count how many prior <img src="https://latex.codecogs.com/png.latex?i%3Cj"> have <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D%20%5Cin%20%5Bl,%20r%5D">.</p>
</section>
<section id="choose-a-data-structure-for-last-range-count" class="level3">
<h3 class="anchored" data-anchor-id="choose-a-data-structure-for-last-range-count">Choose a data structure for last range-count</h3>
<p>Since <code>arr[i]</code> is small-range, maintain a frequency array <code>freq[0..M]</code> for all seen indices <img src="https://latex.codecogs.com/png.latex?%3Cj">, and its prefix sums <code>sum[v] =</code><img src="https://latex.codecogs.com/png.latex?%5CSigma_%7Bu=0%7D%5Ev%20freq%5Bu%5D"></p>
<p>Then the count in <img src="https://latex.codecogs.com/png.latex?%5Bl,%20r%5D"> is simply <code>sum[r]-sum[l-1]</code> in <img src="https://latex.codecogs.com/png.latex?O(1)">.</p>
</section>
<section id="ensure-the-ij-ordering" class="level3">
<h3 class="anchored" data-anchor-id="ensure-the-ij-ordering">Ensure the <img src="https://latex.codecogs.com/png.latex?i%3Cj"> ordering</h3>
<p>We iterate <img src="https://latex.codecogs.com/png.latex?j"> from 1 to <img src="https://latex.codecogs.com/png.latex?n">. Before handling any <img src="https://latex.codecogs.com/png.latex?(j,%20k)"> pairs, our <code>freq/sum</code> reflects exact indices 1 through <img src="https://latex.codecogs.com/png.latex?j-1">.</p>
<p>For each <img src="https://latex.codecogs.com/png.latex?k%3Ej">, check <img src="https://latex.codecogs.com/png.latex?%7Carr%5Bj%5D%20-%20arr%5Bk%5D%7C%5Cleq%20b">. If it passes, compute <img src="https://latex.codecogs.com/png.latex?%5Bl,%20r%5D"> and do the <img src="https://latex.codecogs.com/png.latex?O(1)"> range-sum query.</p>
<p>After finishing all <img src="https://latex.codecogs.com/png.latex?k"> for this <img src="https://latex.codecogs.com/png.latex?j">, we insert <img src="https://latex.codecogs.com/png.latex?arr%5Bj%5D"> into <code>freq</code> (and update <code>sum</code>), before moving onto <img src="https://latex.codecogs.com/png.latex?j%20+%201">.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Solution:</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> countGoodTriplets(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arr: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, c: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ans: total count of valid (i,j,k)</span></span>
<span id="cb2-4">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-5">        </span>
<span id="cb2-6">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(arr)</span>
<span id="cb2-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># total[v] will hold the prefix-sum of frequencies:</span></span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   total[v] = number of i&lt;j with arr[i] ≤ v</span></span>
<span id="cb2-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we assume arr[i] ∈ [0..1000], so we size total to 1001</span></span>
<span id="cb2-10">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1001</span></span>
<span id="cb2-11"></span>
<span id="cb2-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move j from 0 to n-1</span></span>
<span id="cb2-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb2-14">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pair j with every k&gt;j</span></span>
<span id="cb2-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):</span>
<span id="cb2-16">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First check the |arr[j] - arr[k]| ≤ b constraint</span></span>
<span id="cb2-17">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(arr[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> arr[k]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> b:</span>
<span id="cb2-18">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the interval of allowed arr[i] from j’s constraint</span></span>
<span id="cb2-19">                    lj, rj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a, arr[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a</span>
<span id="cb2-20">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the interval of allowed arr[i] from k’s constraint</span></span>
<span id="cb2-21">                    lk, rk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> c, arr[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb2-22"></span>
<span id="cb2-23">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Intersection [l..r] of the two intervals</span></span>
<span id="cb2-24">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># also clamp to [0..1000] to stay in array bounds</span></span>
<span id="cb2-25">                    l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, lj, lk)</span>
<span id="cb2-26">                    r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, rj, rk)</span>
<span id="cb2-27"></span>
<span id="cb2-28">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the intersection is non-empty, count how many</span></span>
<span id="cb2-29">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prior i&lt;j have arr[i] in [l..r] via prefix sums</span></span>
<span id="cb2-30">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> r:</span>
<span id="cb2-31">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-32">                            ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> total[r]</span>
<span id="cb2-33">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-34">                            ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> total[r] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> total[l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-35"></span>
<span id="cb2-36">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># After processing all k for this j, we “add” arr[j] into our</span></span>
<span id="cb2-37">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prefix-sum structure so that future iterations see it.</span></span>
<span id="cb2-38">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We do this by incrementing total[v] for all v ≥ arr[j].</span></span>
<span id="cb2-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># That way total[v] remains = # of arr[i] ≤ v for i&lt;next j.</span></span>
<span id="cb2-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(arr[j], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1001</span>):</span>
<span id="cb2-41">                total[v] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-42"></span>
<span id="cb2-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>


</section>
</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-count-good-triplets/</guid>
  <pubDate>Tue, 15 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Maximum subarray</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-maximum-subarray/</link>
  <description><![CDATA[ 




<section id="question" class="level1">
<h1>Question</h1>
<p>Given an integer array nums, find the subarray with the largest sum, and return its sum.</p>
<p>Example 1:</p>
<p>Input: nums = <code>[-2,1,-3,4,-1,2,1,-5,4]</code> Output: 6 Explanation: The subarray <code>[4,-1,2,1]</code> has the largest sum 6. Example 2:</p>
<p>Input: nums = <code>[1]</code> Output: 1 Explanation: The subarray <code>[1]</code> has the largest sum 1. Example 3:</p>
<p>Input: <code>nums = [5,4,-1,7,8]</code> Output: 23 Explanation: The subarray <code>[5,4,-1,7,8]</code> has the largest sum 23.</p>
<p>Constraints:</p>
<p><code>1 &lt;= nums.length &lt;= 105</code> <code>-104 &lt;= nums[i] &lt;= 104</code></p>
<p>Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
</section>
<section id="answer" class="level1">
<h1>Answer:</h1>
<section id="brute-force" class="level2">
<h2 class="anchored" data-anchor-id="brute-force">Brute force</h2>
<pre><code>    # brute force approach

    # find all left, and right 
    # cal sum of each
    # return max
    # T.C: O(n^2)</code></pre>
<div id="cd3e0132" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> maxSubArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-3">    left, ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, nums[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> left <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)):</span>
<span id="cb2-5">        cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> right <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(left, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)):</span>
<span id="cb2-7">            cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> nums[right]</span>
<span id="cb2-8">            ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(ans, cur)</span>
<span id="cb2-9"></span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</div>
<p>it will TLE.</p>


</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-maximum-subarray/</guid>
  <pubDate>Fri, 04 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Image classification</title>
  <link>https://kimhungbui.github.io/programming/convolution/</link>
  <description><![CDATA[ 




<section id="image-classification" class="level1">
<h1>Image Classification</h1>
<p>This is the task of assigning an input image one label from a <em>fixed categories</em>. This is one of the core problems in Computer Vision that, despite its simplicity, has a large variety of practical applications. Moreover, many other seemingly distinct CV tasks (such as object detection, segmentation) can be reduced to image classification.</p>
<p><strong>Example</strong>: In the image blow in image classification model takes a single image and assigns probabilities to 4 label {cat, dog, hat, mug}. Computer view a image as an one large 3-dimensional array of numbers. In this example, the cat image is 248 pixel wide, 400 pixel tall, and has three color channel Red, Green, Blue. Therefore, the image consists of <img src="https://latex.codecogs.com/png.latex?248%20%5Ctimes%20400%20%5Ctimes%203"> numbers, or a total of 297,600 numbers. Each number is an integer that ranges from 0 (black) to 255 (white). Our task is turn this quarter of a million numbers into a single label, such as “cat”. <img src="https://kimhungbui.github.io/programming/convolution/Pasted image 20250327230513.png" class="img-fluid"></p>
<p><strong>Challenges:</strong> Since this task of recognizing a visual concept (e.g.&nbsp;cat) is relatively trivial for human to perform, it is worth considering the challenges involved from the perspective of a CV algorithm. As we present list of challenges below.</p>
<ul>
<li><strong>Viewpoint variation:</strong> A single instance of an object can be oriented in many ways with respect to the camera.</li>
<li><strong>Scale variation:</strong> Visual classes often exhibit variation of their size (size in the real world, <em>not only</em> in terms of their extent in the image)</li>
<li><strong>Deformation:</strong> Many objects of interest are not rigid bodies and can be deformed in extremes ways.</li>
<li><strong>Occlusion</strong>: The objects of interest can be occluded. Sometimes only a small portion of an object (as little as few pixels) could be visible.</li>
<li><strong>Illumination conditions:</strong> The effect of illumination are drastic on the pixel level.</li>
<li><strong>Background clutter:</strong> The objects of interest may <em>blend</em> into their environment, making them hard to identify.</li>
<li><strong>Intra-class variation:</strong> The classes of interest can be often be relatively broad, such as <em>chair</em>. Their are many different types of these objects, each with their own appearance. <img src="https://kimhungbui.github.io/programming/convolution/Pasted image 20250327235749.png" class="img-fluid"></li>
</ul>
<p>A good image classification model must be invariant to the cross product of all these variations, while simultaneously retaining sensitivity to the inter-class variations.</p>
<ol type="1">
<li>Cross product of variations This refers to the <strong>combination of all possible variations</strong> (e.g.&nbsp;viewpoint, scale, deformation, occlusion, illumination, etc.) that can occur <strong>within a class</strong>. The term “cross production” here is metaphorical, inpsired by the mathematical concept of a Cartesian product, which generate all possible combinations of elements from multiple sets.
<ul>
<li><strong>Example</strong>: A chair might appear:
<ul>
<li>Rotate (viewpoint variation)</li>
<li>Partially hidden (occlusion)</li>
<li>Under bright sunlight (illumination)</li>
<li>While being non-rigid (deformation) The model must recognize it as a “chair” <strong>despite this complex combination of variations</strong> <strong>Invariance Requirement:</strong> The model must be <strong>invariant</strong> to these variations, meaning its prediction for a class should not change even when factors alter the object’s appearance.</li>
</ul></li>
</ul></li>
<li><strong>Inter-class variation</strong> There are <strong>difference between distinct classes</strong> (e.g.&nbsp;chairs vs tables). A model must retain <strong>sensitivity</strong> to these differences to avoid confusing classes, even when they share superficial similarities.
<ul>
<li>Example: A “stool” (class: chair) and a “small table” (class: table) might both appear at similar scales or under similar lighting. The model must distinguish them based on defining feature (e.g.&nbsp;height, presence of a backrest).</li>
<li>Sensitivity Requirement: The model must <strong>preserver discriminate features</strong> that separate classes, even when intra-class variations (e.g.&nbsp;deformation in chairs) are extreme. <strong>Data-driven approach</strong>: How might we go about writing an algorithm that can classify images into distinct categories? Unlike writing an algorithm for, for example, sorting a list of numbers, it is not obvious how one might write an algorithm for identifying cats in images. Therefore, instead of trying to specify what every one of the categories of interest look like directly in code, the approach that we will take is not unlike one we would take with a child: we’re going to provide the computer with many examples of each class and then develop learning algorithms that look at these examples and learn about the visual appearance of each class. This approach is referred to as a <em>data-driven approach</em>, since it relies on first accumulating a <em>training dataset</em> of labeled images. Here is an example of what such a dataset might look like:</li>
</ul></li>
</ol>
<p><img src="https://kimhungbui.github.io/programming/convolution/Pasted image 20250328000317.png" class="img-fluid"></p>
<p><strong>The image classification pipeline</strong> We’ve seen that the task in Image Classification is to taken an array of pixels that represents a single image and assign a label to it. Our complete pipeline can be formalized as follows: - <strong>Input:</strong> Our input consists of a set of <em>N</em> images, each labeled with one of <em>K</em> different classes. We refer to this data as the <em>learning set</em>. - <strong>Learning:</strong> Our task is to use the training set to learn what every one of the classes looks like. We refer to this step as <em>training a classifier</em>, or <em>learning a model</em>. - <strong>Evaluation:</strong> In the end, we evaluate the quality of the classifier by asking it to predict labels for a new set of images that it has never seen before. We will then compare the true labels of these images to the ones predicted by the classifier. Intuitively, we’re hoping that a lot of the predictions match up with the true answers (which we call the <em>ground truth</em>).</p>
</section>
<section id="nearest-neighbor-classifier" class="level1">
<h1>Nearest Neighbor Classifier</h1>
<p>As our first approach, we will develop what we call a <strong>Nearest Neighbor Classifier</strong>. This classifier has nothing to do with Convolution Neural Networks and it is very rarely used in practice, but i will allow us to get an ideal about the basic approach to an image classification.</p>
<p><strong>Example image classification dataset: CIFAR-10</strong>. <a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&nbsp;dataset</a>This dataset consist of 10 classes (for example <em>airplane, automobile, bird, etc</em>). These 60,000 images are partitioned into a training set of 50,000 images and a test set of 10,000 images. In the image below we can see 10 random example images from each one of the 10 classes.</p>
<p><img src="https://kimhungbui.github.io/programming/convolution/Pasted image 20250328001115.png" class="img-fluid"> Left:&nbsp;Example&nbsp;images&nbsp;from&nbsp;the&nbsp;<a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10&nbsp;dataset</a>.&nbsp;Right:&nbsp;first&nbsp;column&nbsp;shows&nbsp;a&nbsp;few&nbsp;test&nbsp;images&nbsp;and&nbsp;next&nbsp;to&nbsp;each&nbsp;we&nbsp;show&nbsp;the&nbsp;top&nbsp;10&nbsp;nearest&nbsp;neighbors&nbsp;in&nbsp;the&nbsp;training&nbsp;set&nbsp;according&nbsp;to&nbsp;pixel-wise&nbsp;difference.</p>
<p>Suppose now that we are given the CIFAR-10 training set of 50,000 images (5000 image for every one of the labels), and we wish to label the remaining 10,000. The nearest neighbor classifier will take a test image, compare it to every single one of the training images, and predict the label of the closest training image. In the image above and on the right we can see an example result of such a procedure for 10 example test images. Notice that in only about 3 of 10 examples of an image of the same class is retrieved, while in other 7 examples this is not the case. For example, in the 8th row the nearest training image to the horse head is a red car, presumably due to the strong black background. As a result, this image of a horse would in this case be mislabeled as a car.</p>
<p>One of the simplest possibilities is to compare the images pixel by pixel and add up all the differences. In other words, given two images and representing them as vectors <img src="https://latex.codecogs.com/png.latex?I_1,%20I_2">, a reasonable choice for comparing them might be the <strong>L1 distance</strong>.</p>
<p><img src="https://latex.codecogs.com/png.latex?d_1(I_1,%20I_2)=%5CSigma_p%20%7CI_1%5Ep%20-%20I_2%5Ep%7C"> Where the sum is taken over all pixels. Here is the procedure visualized:</p>
<p>![[nneg.jpeg]]</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> numpy</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> NearestNeighbor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X, y):</span>
<span id="cb1-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" X is N </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">imes D where each row is an example. Y is 1-dimension of size N"""</span></span>
<span id="cb1-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the nearest neighbor classifier simpply remembers all the training data</span></span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.Xtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X</span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X):</span>
<span id="cb1-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" X is N </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">imes D where each row is an example we wish to predict label for"""</span></span>
<span id="cb1-13">        num_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lets make sure that the output type matches the input type</span></span>
<span id="cb1-15">        Ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(num_test, dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dtype)</span>
<span id="cb1-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop over all test rows</span></span>
<span id="cb1-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_test):</span>
<span id="cb1-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the nearest training image to the i'th test image</span></span>
<span id="cb1-19">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># using the L1 distance (sum of absolute value differences)</span></span>
<span id="cb1-20">            distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.Xtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X[i,:]), axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-21">            min_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmin(distances) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index with smallest distance</span></span>
<span id="cb1-22">            Ypred[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ytr[min_index] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict the label of the nearest example</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Ypred</span></code></pre></div>
<section id="the-choice-of-distance" class="level2">
<h2 class="anchored" data-anchor-id="the-choice-of-distance">The choice of distance</h2>
</section>
</section>
<section id="k---nearest-neighbor-classifier" class="level1">
<h1>k - Nearest Neighbor Classifier</h1>
<p>The idea: instead of finding the single closest image in the training set, we will find the top <strong>k</strong> closest images, and have them vote on the label of the test image. In particular, when <em>k=1</em>, we recover the NN classifier. Intuitively, higher values of <strong>k</strong> have smoothing effect that makes the classifier more resistant to outliers:</p>
<p><img src="https://kimhungbui.github.io/programming/convolution/Pasted image 20250507141512.png" class="img-fluid"></p>
<p>An&nbsp;example&nbsp;of&nbsp;the&nbsp;difference&nbsp;between&nbsp;Nearest&nbsp;Neighbor&nbsp;and&nbsp;a&nbsp;5-Nearest&nbsp;Neighbor&nbsp;classifier,&nbsp;using&nbsp;2-dimensional&nbsp;points&nbsp;and&nbsp;3&nbsp;classes&nbsp;(red,&nbsp;blue,&nbsp;green).&nbsp;The&nbsp;colored&nbsp;regions&nbsp;show&nbsp;the&nbsp;<strong>decision&nbsp;boundaries</strong>&nbsp;induced&nbsp;by&nbsp;the&nbsp;classifier&nbsp;with&nbsp;an&nbsp;L2&nbsp;distance.&nbsp;The&nbsp;white&nbsp;regions&nbsp;show&nbsp;points&nbsp;that&nbsp;are&nbsp;ambiguously&nbsp;classified&nbsp;(i.e.&nbsp;class&nbsp;votes&nbsp;are&nbsp;tied&nbsp;for&nbsp;at&nbsp;least&nbsp;two&nbsp;classes).&nbsp;Notice&nbsp;that&nbsp;in&nbsp;the&nbsp;case&nbsp;of&nbsp;a&nbsp;NN&nbsp;classifier,&nbsp;outlier&nbsp;datapoints&nbsp;(e.g.&nbsp;green&nbsp;point&nbsp;in&nbsp;the&nbsp;middle&nbsp;of&nbsp;a&nbsp;cloud&nbsp;of&nbsp;blue&nbsp;points)&nbsp;create&nbsp;small&nbsp;islands&nbsp;of&nbsp;likely&nbsp;incorrect&nbsp;predictions,&nbsp;while&nbsp;the&nbsp;5-NN&nbsp;classifier&nbsp;smooths&nbsp;over&nbsp;these&nbsp;irregularities,&nbsp;likely&nbsp;leading&nbsp;to&nbsp;better&nbsp;<strong>generalization</strong>&nbsp;on&nbsp;the&nbsp;test&nbsp;data&nbsp;(not&nbsp;shown).&nbsp;Also&nbsp;note&nbsp;that&nbsp;the&nbsp;gray&nbsp;regions&nbsp;in&nbsp;the&nbsp;5-NN&nbsp;image&nbsp;are&nbsp;caused&nbsp;by&nbsp;ties&nbsp;in&nbsp;the&nbsp;votes&nbsp;among&nbsp;the&nbsp;nearest&nbsp;neighbors&nbsp;(e.g.&nbsp;2&nbsp;neighbors&nbsp;are&nbsp;red,&nbsp;next&nbsp;two&nbsp;neighbors&nbsp;are&nbsp;blue,&nbsp;last&nbsp;neighbor&nbsp;is&nbsp;green).</p>
</section>
<section id="validation-sets-for-hyperparameter-tunning." class="level1">
<h1>Validation sets for Hyperparameter tunning.</h1>
<p>We saw that there are many different distance functions we could have used: L1 norm, L2. norm, there are many other choices we didn’t even consider (e.g.&nbsp;dot products). These choices are called <strong>hyperparameters</strong> nd they come up very often in the design of many ML algorithms that learn from data. It’s often not obvious what values/settings one should choose.</p>
<p>We might be tempted to suggest what we should try out many different values and see what work bests. That is a fine idea and that’s indeed what we will do, but this must be done very carefully. In particular, <strong>we cannot use the test set for the purpose of tweaking hyperparameters</strong>. Whenever we’re designing ML algorithms, we should think of the test set as a very precious resource that should ideally never be touched until one time at the very end. Otherwise, the very real danger is that we may tune our hyperparameters to work well on the test set, but if we were to deploy our model we could see a significantly reduced performance. in practice, we would say that we <strong>overfit</strong> to the test set. Another way of looking at it is that if we tune</p>


</section>

 ]]></description>
  <guid>https://kimhungbui.github.io/programming/convolution/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Docker basics</title>
  <dc:creator>Kim Hung Bui</dc:creator>
  <link>https://kimhungbui.github.io/programming/docker-intro/</link>
  <description><![CDATA[ 




<p>This chapter introduces containerization with Docker and relevant concepts such as image and volume. By the end of this chapter you are able to:</p>
<ul>
<li>Run containerized applications</li>
<li>Containerize applications</li>
<li>Utilize volumes to store data persistently outside of the containers.</li>
<li>Use port mapping to enable access via TCP to containerized applications</li>
<li>Share your own containers publicly</li>
</ul>
<section id="definitions-and-basic-concept" class="level1">
<h1>Definitions and basic concept</h1>
<section id="what-is-devops" class="level2">
<h2 class="anchored" data-anchor-id="what-is-devops">What is DevOps</h2>
<p>The term itself consists of two parts <em>Dev</em> and <em>Ops</em>. Dev refers to the development of software and Ops to operations. Simple definition for DevOps would be that it means the release, configuring, and monitoring of software is in the hand people who develop it.</p>
</section>
<section id="what-is-docker" class="level2">
<h2 class="anchored" data-anchor-id="what-is-docker">What is Docker</h2>
<blockquote class="blockquote">
<p>“Docker&nbsp;is&nbsp;a&nbsp;set&nbsp;of&nbsp;platform&nbsp;as&nbsp;a&nbsp;service&nbsp;(PaaS)&nbsp;products&nbsp;that&nbsp;use&nbsp;OS-level&nbsp;virtualization&nbsp;to&nbsp;deliver&nbsp;software&nbsp;in&nbsp;packages&nbsp;called&nbsp;containers.”&nbsp;-&nbsp;<a href="https://en.wikipedia.org/wiki/Docker_(software)">from&nbsp;Wikipedia(opens&nbsp;in&nbsp;a&nbsp;new&nbsp;tab)</a>.</p>
</blockquote>
<p>So we get two definitions: 1. Docker is a set of tools to deliver software incontainers. 2. Containers are packages of software. <img src="https://kimhungbui.github.io/programming/docker-intro/Pasted image 20250403152352.png" class="img-fluid"></p>
<p>The above image illustrate how containers include the application and its dependencies. These containers are isolated so that they don’t interfere with each other or the software running outside of the containers. If we want to enable interactions between them, Docker offers tools to do so.</p>
</section>
<section id="benefits-from-containers" class="level2">
<h2 class="anchored" data-anchor-id="benefits-from-containers">Benefits from containers</h2>
<p>Containers package applications. In different scenarios: ### Scenario 1: Works on my machine</p>
<p>Let’s first take a closer look into what happens in web development without containers following the chain above starting from “Plan”.</p>
<p>First we plan an application. Then our team of 1-n developers create the software. It works on one’s computer. It may even go through a testing pipeline working perfectly. We send it to the server and it does not work.</p>
<p>This&nbsp;is&nbsp;known&nbsp;as&nbsp;the&nbsp;<strong>“works&nbsp;on&nbsp;my&nbsp;machine”</strong>&nbsp;problem.&nbsp;The&nbsp;only&nbsp;way&nbsp;to&nbsp;solve&nbsp;this&nbsp;is&nbsp;by&nbsp;finding&nbsp;out&nbsp;what&nbsp;in&nbsp;tarnation&nbsp;the&nbsp;developer&nbsp;had&nbsp;installed&nbsp;on&nbsp;their&nbsp;machine&nbsp;that&nbsp;made&nbsp;the&nbsp;application&nbsp;work.</p>
<p>Containers&nbsp;solve&nbsp;this&nbsp;problem&nbsp;by&nbsp;allowing&nbsp;the&nbsp;developer&nbsp;to&nbsp;personally&nbsp;run&nbsp;the&nbsp;application&nbsp;inside&nbsp;a&nbsp;container,&nbsp;which&nbsp;then&nbsp;includes&nbsp;all&nbsp;of&nbsp;the&nbsp;dependencies&nbsp;required&nbsp;for&nbsp;the&nbsp;app&nbsp;to&nbsp;work.</p>
<ul>
<li>You&nbsp;may&nbsp;still&nbsp;occasionally&nbsp;hear&nbsp;about&nbsp;“works&nbsp;in&nbsp;my&nbsp;<strong>container</strong>”&nbsp;issues&nbsp;-&nbsp;these&nbsp;are&nbsp;often&nbsp;just&nbsp;usage&nbsp;errors. ### Scenario 2: Isolated environments</li>
</ul>
<p>We have 5 different Python applications. We need to deploy them to a server that already has an application requiring Python 2.7 and of course none of our applications are 2.7. What do we do now?</p>
<p>Since containers package the software with all of its dependencies, we package the existing app and all 5 new ones with their respective Python versions and that’s it.</p>
<p>Sometimes&nbsp;different&nbsp;parts&nbsp;of&nbsp;a&nbsp;system&nbsp;may&nbsp;change&nbsp;over&nbsp;time,&nbsp;possibly&nbsp;leading&nbsp;to&nbsp;the&nbsp;application&nbsp;not&nbsp;working.&nbsp;These&nbsp;changes&nbsp;may&nbsp;be&nbsp;anything&nbsp;from&nbsp;an&nbsp;operating&nbsp;system&nbsp;update&nbsp;to&nbsp;changes&nbsp;in&nbsp;dependencies.</p>
<section id="scenario-3-development" class="level3">
<h3 class="anchored" data-anchor-id="scenario-3-development">Scenario 3: Development</h3>
<p>We are brought into a dev team. They run a web app that uses other services when running: a Postgres database, MongoDB, Redis and a number of others. Simple enough, we install whatever is required to run the application and all of the applications that it depends on …</p>
<p>What a headache to start installing and then managing the development databases on your own machine.</p>
<p>Thankfully, by the time we are told to do that we are already a Docker expert. With one command we get an isolated application, like Postgres or Mongo, running in our machine.</p>
</section>
<section id="scenario-4-scaling" class="level3">
<h3 class="anchored" data-anchor-id="scenario-4-scaling">Scenario 4: Scaling</h3>
<p>Starting and stopping a Docker container has little overhead. But when we run our own Netflix or Facebook, we want to meet the changing demand. With some advanced tooling that we will learn about in parts 2 and 3, we can spin up multiple containers instantly and load balance traffic between them.</p>
<p>Container orchestration will be discussed in parts 2 and 3. But the simplest example: what happens when one application dies? The orchestration system notices it, splits traffic between the working replicas, and spins up a new container to replace the dead one.</p>
</section>
</section>
<section id="virtual-machines" class="level2">
<h2 class="anchored" data-anchor-id="virtual-machines">Virtual machines</h2>
<p><img src="https://kimhungbui.github.io/programming/docker-intro/Pasted image 20250403154053.png" class="img-fluid"></p>
<p>VM virtualizes the physical hardware. Each VM includes a full OS along with the necessary binaries and libraries, making them heavier and more resources-intensive. Containers, on the other hand, share the host OS kernel and only package the application and its dependencies, resulting in a more lightweight and efficient solution.</p>
<p>VMs provide strong isolation and are suited for running multiple OS environments, but they have a performance overhead and longer startup times. Containers offer faster startup, better resource utilization, and high portability across different environments, though their isolation is at the process level, which may not be as robust as that of VMs. Overall, VMs could be used for scenarios needing complete OS environments, while containers excel in lightweight, efficient, and consistent application deployment.</p>
<p>Docker relies on Linux kernels, which means that macOS and Windows cannot run Docker natively without some additional steps. Each operating system has its own solution for running docker.</p>
</section>
<section id="image-and-containers" class="level2">
<h2 class="anchored" data-anchor-id="image-and-containers">Image and containers</h2>
<p>Since we already know what containers are it’s easier to explain images through them: Containers are instances of images. A basic mistake is to confuse images and containers.</p>
<p>Cooking metaphor:</p>
<p>Think of a container as a ready-to-eat meal that we can simply heat up and consume. An image, on the other hand, is the recipe <em>and</em> the ingredients for that meal.</p>
<p>So just like how we need a recipe and ingredients to make a meal, we need an image and a container runtime (Docker engine) to create a container. The image provides all the necessary instructions and dependencies for the container to run, just like a recipe provides the steps and ingredients to make a meal.</p>
<p>In short, an image is like a blueprint or template and the building material, while a container is an instance of that blueprint or template.</p>
<section id="image" class="level3">
<h3 class="anchored" data-anchor-id="image">Image</h3>
<p>A Docker image is a file. An image <em>never changes</em>; we cannot edit an existing file. Creating a new image happens by starting from a base image and adding new <strong>layers</strong> to it. We will talk about layers later, but we should think of images as <em>immutable</em>, they can not be changed after they are created.</p>
<p>List all of ours image with <code>docker image ls</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> docker image ls</span>
<span id="cb1-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">REPOSITORY</span>      TAG      IMAGE ID       CREATED         SIZE</span>
<span id="cb1-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hello-world</span>     latest   d1165f221234   9 days ago      13.3kB</span></code></pre></div>
<p>Containers are created from images, so when we ran hello-world twice we downloaded one <em>image</em> and created two of them from the single image.</p>
<p>Well then, if images are used to create containers, where do images come from? This image file is built from an instructional file named <strong>Dockerfile</strong> that is parsed when we run <code>docker image build</code>.</p>
<p>Dockerfile is a file that is by default called <em>Dockerfile</em>, that looks something like this</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> &lt;image&gt;:&lt;tag&gt;</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>install <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">some</span> dependencies<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CMD</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>command <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">that</span> is executed on <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> container run<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>and is the instruction set for building an image. We will look into Dockerfiles later when we to build our own images.</p>
<p>If we go back to the cooking metaphor, as Dockerfile provides the instructions needed to build an image we can think of that as the recipe for images. We’re now 2 recipes deep, as a Dockerfile is the recipe for an image and an image is the recipe for the container. The only difference is that Dockerfile is written by us, whereas image is written by our machine based on the Dockerfile.</p>
</section>
</section>
<section id="container" class="level2">
<h2 class="anchored" data-anchor-id="container">Container</h2>
<p>Containers only contain what is required to execute an application; and we can start, stop and interact with them. They are <strong>isolated</strong> environments in the host machine with the ability to interact with each other and the host machine itself via defined method (TCP/UDP).</p>
<p>List all of our containers with <code>docker container ls</code></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> docker container ls</span>
<span id="cb3-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CONTAINER</span> ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span></code></pre></div>
<p>Without <code>-a</code> flag it will only print running containers.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> docker container ls <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-a</span></span>
<span id="cb4-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CONTAINER</span> ID   IMAGE           COMMAND      CREATED          STATUS                      PORTS     NAMES</span>
<span id="cb4-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">b7a53260b513</span>   hello-world     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/hello"</span>     5 minutes ago    Exited <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5</span> minutes ago              brave_bhabha</span>
<span id="cb4-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1cd4cb01482d</span>   hello-world     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/hello"</span>     8 minutes ago    Exited <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">8</span> minutes ago              vibrant_bell</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>programming</category>
  <category>docker</category>
  <guid>https://kimhungbui.github.io/programming/docker-intro/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Minimum Cost Walk in Weighted Graph</title>
  <dc:creator>Kim Hung Bui</dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-minimum-cost-walk-in-weight-graph/</link>
  <description><![CDATA[ 




<section id="question" class="level1">
<h1>Question</h1>
<p>There is an undirected weighted graph with n vertices labeled from 0 to n - 1.</p>
<p>You are given the integer n and an array edges, where edges[i] = [ui, vi, wi] indicates that there is an edge between vertices ui and vi with a weight of wi.</p>
<p>A walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It’s important to note that a walk may visit the same edge or vertex more than once.</p>
<p>The cost of a walk starting at node u and ending at node v is defined as the bitwise AND of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is w0, w1, w2, …, wk, then the cost is calculated as w0 &amp; w1 &amp; w2 &amp; … &amp; wk, where &amp; denotes the bitwise AND operator.</p>
<p>You are also given a 2D array query, where query[i] = [si, ti]. For each query, you need to find the minimum cost of the walk starting at vertex si and ending at vertex ti. If there exists no such walk, the answer is -1.</p>
<p>Return the array answer, where answer[i] denotes the minimum cost of a walk for query i.</p>
<p>Example 1:</p>
<p>Input: <code>n = 5</code>, edges = <code>[[0,1,7],[1,3,7],[1,2,1]]</code>, query = <code>[[0,3],[3,4]]</code></p>
<p>Output: <code>[1,-1]</code></p>
<p>Explanation:</p>
<p>To achieve the cost of 1 in the first query, we need to move on the following edges: 0-&gt;1 (weight 7), 1-&gt;2 (weight 1), 2-&gt;1 (weight 1), 1-&gt;3 (weight 7).</p>
<p>In the second query, there is no walk between nodes 3 and 4, so the answer is -1.</p>
<p>Example 2:</p>
<p>Input: n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]</p>
<p>Output: [0]</p>
<p>Explanation:</p>
<p>To achieve the cost of 0 in the first query, we need to move on the following edges: 1-&gt;2 (weight 1), 2-&gt;1 (weight 6), 1-&gt;2 (weight 1).</p>
<p>Constraints:</p>
<pre><code>2 &lt;= n &lt;= 105
0 &lt;= edges.length &lt;= 105
edges[i].length == 3
0 &lt;= ui, vi &lt;= n - 1
ui != vi
0 &lt;= wi &lt;= 105
1 &lt;= query.length &lt;= 105
query[i].length == 2
0 &lt;= si, ti &lt;= n - 1
si != ti</code></pre>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>Let’s determine when the answer to a query is <code>-1</code>. This happens when no walk exists between the two nodes, meaning they belong to different connected components.</p>
<p>Now, suppose the two nodes belong to the same connected component. What is the minimum cost of a walk connecting them? As mentioned, the optimal walk includes as many edges as possible. Since revisiting an edge does not affect the total score, we can freely traverse the edges of the component, meaning that we can move back and forth to reach all of them. Therefore, the best way to achieve the lowest cost is to visit every edge in the component.</p>
<p>To efficiently find and process the connected components of the graph, we use the Disjoint Set (Union-Find) data structure. When we Union two nodes, we merge their entire groups, as now a path exists between every node in one group and every node in the other. To maintain efficiency, the root of the larger group is chosen as the representative of the merge group. This minimizes the time needed for future Find operations by reducing the number of steps required to reach the current representative.</p>


</section>

 ]]></description>
  <category>programming</category>
  <category>data structure</category>
  <category>DSU</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-minimum-cost-walk-in-weight-graph/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://kimhungbui.github.io/programming/leetcode-minimum-cost-walk-in-weight-graph/dundee.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Disjoint Set Union</title>
  <dc:creator>Kim Hung Bui</dc:creator>
  <link>https://kimhungbui.github.io/programming/disjoint-set-union/</link>
  <description><![CDATA[ 




<p>This data structure provides the following capabilities. We are given several elements, each of which is a separate set. A DSU will have an operation to <strong>combine any two sets</strong>, and it will be able to <strong>tell in which set a specific element is</strong>. The classical version also introduces a third operation, it can <strong>create a set from a new element</strong>.</p>
<p>Thus the basic interface of this data structure consists of only three operations: - <code>make_set()</code> - create a new set consisting of the new element <code>v</code>. - <code>union_sets(a, b)</code> - merges the two specified sets (the set in which the element <code>a</code> is located, and the set in which the element <code>b</code> is located). - <code>find_set(v)</code> - return the representative (also called leader) of the set that contains the element <code>v</code>. This representative is an element of its corresponding set. It is selected in each set by the data structure itself (and can change over time, namely after <code>union_sets</code> call). This representative can be used to check if two elements are part of the same set or not. <code>a</code> and <code>b</code> are exactly in the same set, if <code>find_set(a) == find_set(b)</code>. Otherwise they are in different sets.</p>
<p>As described on more detail later, the data structure allows us to do each of these operations in almost <img src="https://latex.codecogs.com/png.latex?O(1)"> time on average.</p>
<p>Also in one of the subsections an alternative structure of a DSU is explained, which achieves a slower average complexity of <img src="https://latex.codecogs.com/png.latex?O(%5Clog%20n)">, but can be more powerful than the regular DSU structure.</p>
<section id="build-an-efficient-data-structure" class="level1">
<h1>Build an efficient data structure</h1>
<p>We will store the sets in the form of <strong>trees</strong>: each tree will correspond to one set. And the root of the tree will be the representative/leader of the set.</p>
<p>In the following image we can see the representative of such trees.</p>
<p>![[DSU_example.png]] In the beginning, every element starts as a single set, there fore each vertex is its own tree. Then we combine the set containing the element 1 and the et containing the element 2. Then we combine the set containing the element 3 and the set containing the element 4. And in the last step, we combine the set containing the element 1 and the set containing the element 3.</p>
<p>For the implementation this means that we will have to maintain an array <code>parent</code> that stores a reference to its immediate ancestor in the tree.</p>
<section id="naive-implementation" class="level2">
<h2 class="anchored" data-anchor-id="naive-implementation">Naive implementation</h2>
<p>We can already write the first implementation of the Disjoint Set Union data structure. It will be pretty inefficient at first, but later we can improve it using two optimizations, so that it will take nearly constant time for each function call.</p>
<p>As we said, all the information about the sets of elements will be kept in an array <code>parent</code>.</p>
<p>To create a new set (operation <code>make_set(v)</code>), we simply create a tree with root in the vertex <code>x</code>, meaning that it is its own ancestor.</p>
<p>To combine two sets (operation <code>union_sets(a, b)</code>), we first find the representative of the set in which <code>a</code> is located, and the representative of the set in which <code>b</code> is located. If the representatives are identical, that we have nothing to do, the sets are already merged. Otherwise, we can simply specify that one of the representatives is the parent of the other representative - thereby combining the two trees.</p>
<p>Finally the implementation of the find representative function (operation <code>find_set(v)</code>): we simply climb the ancestors of the vertex <code>v</code> until we reach the root, i.e.&nbsp;a vertex such that the reference to the ancestor leads to itself. This operation is easily implemented recursively.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c++ code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> make_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> union_sets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-12">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-13">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-15">        parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>However this implementation is inefficient. It is easy to construct an example, so that the trees degenerate into long chains. In that case each call <code>find_set(v)</code> can take <img src="https://latex.codecogs.com/png.latex?O(n)"> time.</p>
<p>This is far away from the complexity that we want to have (nearly constant time). Therefore we will consider two optimizations that will allow to significantly accelerate the work.</p>
</section>
<section id="path-compression-optimization" class="level2">
<h2 class="anchored" data-anchor-id="path-compression-optimization">Path compression optimization</h2>
<p>This optimization is designed for speeding up <code>find_set</code>.</p>
<p>If we call <code>find_set()</code> for some vertex <code>x</code>, we actually find the representative <code>p</code> for all vertices that we visit on the path between <code>v</code> and the actually representative <code>p</code>. The trick is to make the paths for all those nodes shorter, by setting the parent of each visited vertex directly to <code>p</code>.</p>
<p>We can see the operation in the following image. On the left there is a tree, and on the right side there is the compressed tree after calling <code>find_set(7)</code>, which shortens the paths for the visited node 7, 5, 3 and 2.</p>
<p>![[DSU_path_compression.png]]</p>
<p>The new implementation of <code>find_set</code> is as follows:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb2-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb2-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The simple implementation does what was intended: first find the representative of the set (root vertex), and then in the process of stack unwinding the visited nodes are attached directly to the representative.</p>
<p>This simple modification of the operation already achieves the time complexity <img src="https://latex.codecogs.com/png.latex?O(%5Clog%20n)"> per call on average (here without proof). There is a second modification, that will make it even faster.</p>
</section>
<section id="union-by-size-rank" class="level2">
<h2 class="anchored" data-anchor-id="union-by-size-rank">Union by size / rank</h2>
<p>In this optimization we will change the <code>union_set</code> operation. To be precise, we will change which tree gets attached to the other one. In the naive implementation the second tree always got attached to the first one. In practice that can lead to trees containing chains of length <img src="https://latex.codecogs.com/png.latex?O(n)">. With this optimization we will avoid this by choosing very carefully which tree gets attached.</p>
<p>There are many possible heuristic that can be used. Most popular are the following two approaches: In the first approach we use the size of the trees as rank, and in the second one we use the depth of the tree (more precisely, the upper bound on the tree depth, because the depth will get smaller when applying path compression).</p>
<p>In both approaches the essence of the optimization is the same: we attach the tree with the lower rank to the one with the bigger rank.</p>
<p>Here is the implementation of union by size:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> make_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">    parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3">    size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> union_sets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-7">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-8">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb3-11">            swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-12">        parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>and here is the implementation of union by rank based on the depth of the trees:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> make_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">    parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3">    rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> union_sets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-7">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-8">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb4-11">            swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-12">        parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb4-14">            rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]++;</span></span>
<span id="cb4-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Both optimizations are equivalent in terms of time and space complexity. So in practice we can use any of them.</p>
</section>
<section id="time-complexity" class="level2">
<h2 class="anchored" data-anchor-id="time-complexity">Time complexity</h2>
<p>As mentioned before, if we combine both optimizations - path compression with union by size / rank - we will reach nearly constant time queries. It turns out, that the final amortized complexity is <img src="https://latex.codecogs.com/png.latex?O(%5Calpha(n))">, where <img src="https://latex.codecogs.com/png.latex?%5Calpha%20(n)"> is the inverse Ackermann function, which grows very slowly. In fact it grows so lowly, that it doesn’t exceed 4 for all reasonable <img src="https://latex.codecogs.com/png.latex?n"> (approximately <img src="https://latex.codecogs.com/png.latex?n%3C10%5E%7B600%7D">).</p>
<p>Amortized complexity is the total time per operation, evaluated over a sequence of multiple operations. The idea is to guarantee the total time of the entire sequence, while allowing single operations to be much slower than the amortized time. E.g. in our case a single call might take <img src="https://latex.codecogs.com/png.latex?O(%5Clog%20n)"> in the worst case, but if we do <img src="https://latex.codecogs.com/png.latex?m"> such calls back to back we will end up with an average time of <img src="https://latex.codecogs.com/png.latex?O(%5Calpha%20(n))">.</p>
<p>We will also not present a proof for this time complexity, since it is quite long and complicated.</p>
<p>Also, it’s worth mentioning that DSU with union by size / rank, but without path compression works in <img src="https://latex.codecogs.com/png.latex?O(%5Clog%20n)"> time per query.</p>
</section>
<section id="linking-by-index-coin-flip-linking" class="level2">
<h2 class="anchored" data-anchor-id="linking-by-index-coin-flip-linking">Linking by index / coin-flip linking</h2>
<p>Both union by rank and union by size require that we store additional data for each set, and maintain these values during each union operation. There exist also a randomized algorithm, that simplifies the union operation a little bit: linking by index.</p>
<p>We assign each set a random value called the index, and we attach the set with the smaller index to the one with the larger one. It is likely that a bigger set will have a bigger than the smaller set, therefore this operation is closely related to union by size. In fact it can be proven, that this operation has the same time complexity as union by size. However in practice it is slightly slower than union by size.</p>


</section>
</section>

 ]]></description>
  <category>programming</category>
  <category>data structure</category>
  <guid>https://kimhungbui.github.io/programming/disjoint-set-union/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://kimhungbui.github.io/programming/disjoint-set-union/dundee.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Parity invariance</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/program-parity-invariance/parity-invariance.html</link>
  <description><![CDATA[ 




<p>Parity invariance means that the number of times a position is flipped determines its final value. If a position is flipped an odd number of times, its value changes, but if it is flipped an even number of times, it stays the same.</p>
<p>Consider the array <code>[1, 0, 0, 1, 0, 1, 1]</code>. We start by flipping three consecutive elements to try and transform all <code>0</code>s into <code>1</code>s. First, flipping the subarray <code>[0, 0, 1]</code> at indices <code>1..3</code> changes the array to <code>[1, 1, 1, 0, 0, 1, 1]</code>. Then, flipping <code>[0, 0, 1]</code> at indices <code>[3..5]</code> gives <code>[1, 1, 1, 1, 1, 0, 1]</code>. Finally, flipping <code>[1, 0, 1]</code> at indices <code>[1, 0, 1]</code> at indices <code>4..6</code> results in <code>[1, 1, 1, 1, 1, 1, 0, 1, 0]</code>.</p>
<p>At this point, we see that the <code>0</code>s at positions <code>4</code> and <code>6</code> remain, and there is no way to flip them without also flipping the other elements. Since we can only flip three elements at a time, we cannot isolate these <code>0</code>s in a way that allow us to change them to <code>1</code>s. This happens because these positions were flipped an even number of times, so they retain their original value. Because of this <strong>parity constraint</strong>, the transformation is impossible.</p>



 ]]></description>
  <category>bit manipulation</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/program-parity-invariance/parity-invariance.html</guid>
  <pubDate>Thu, 20 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>3191. Minimum Operations to Make Binary Array Elements Equal to One I</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcodeminimum-operations-to-make-binary-array-elements-equal-to-one-i/3191.html</link>
  <description><![CDATA[ 




<p>You are given a</p>
<p>nums.</p>
<p>You can do the following operation on the array any number of times (possibly zero):</p>
<pre><code>Choose any 3 consecutive elements from the array and flip all of them.</code></pre>
<p>Flipping an element means changing its value from 0 to 1, and from 1 to 0.</p>
<p>Return the minimum number of operations required to make all elements in nums equal to 1. If it is impossible, return -1.</p>
<p>Example 1:</p>
<p>Input: nums = [0,1,1,1,0,0]</p>
<p>Output: 3</p>
<p>Explanation: We can do the following operations:</p>
<pre><code>Choose the elements at indices 0, 1 and 2. The resulting array is nums = [1,0,0,1,0,0].
Choose the elements at indices 1, 2 and 3. The resulting array is nums = [1,1,1,0,0,0].
Choose the elements at indices 3, 4 and 5. The resulting array is nums = [1,1,1,1,1,1].</code></pre>
<p>Example 2:</p>
<p>Input: nums = [0,1,1,1]</p>
<p>Output: -1</p>
<p>Explanation: It is impossible to make all elements equal to 1.</p>
<p>Constraints:</p>
<pre><code>3 &lt;= nums.length &lt;= 105
0 &lt;= nums[i] &lt;= 1</code></pre>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>Since we can only flip three consecutive elements at a time, isolated <code>0</code>s or certain patterns of <code>0</code>s may prevent us from turning everything into <code>1</code>. If the number of <code>0</code>s in certain positions makes it impossible to fully eliminate them using groups of three, the transformation cannot be achieved.</p>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcodeminimum-operations-to-make-binary-array-elements-equal-to-one-i/3191.html</guid>
  <pubDate>Thu, 20 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>leetcode-Longest-Nice-Subarray</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-longest-nice-subarray/leetcode-Longest-Nice-Subarray.html</link>
  <description><![CDATA[ 




<p>Topic: <code>array, bit manipulation, slide windown</code></p>
<section id="question" class="level1">
<h1>Question</h1>
<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers.</p>
<p>We call a subarray of <code>nums</code> <strong>nice</strong> if the bitwise <strong>AND</strong> of every pair of elements that are in <strong>different</strong> positions in the subarray is equal to <code>0</code>.</p>
<p>Return <em>the length of the <strong>longest</strong> nice subarray</em>.</p>
<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>
<p><strong>Note</strong> that subarrays of length <code>1</code> are always considered nice.</p>
<p>Example 1:</p>
<p>Input: nums = [1,3,8,48,10] Output: 3 Explanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions: - 3 AND 8 = 0. - 3 AND 48 = 0. - 8 AND 48 = 0. It can be proven that no longer nice subarray can be obtained, so we return 3.</p>
<p>Example 2:</p>
<p>Input: nums = [3,1,5,11,13] Output: 1 Explanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.</p>
<p>Constraints:</p>
<pre><code>1 &lt;= nums.length &lt;= 105
1 &lt;= nums[i] &lt;= 109</code></pre>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>&nbsp; &nbsp; example 1:</p>
<p>&nbsp; &nbsp; [1, 3, 8, 48, 10]</p>
<p>&nbsp; &nbsp; 3 in bin: 0011</p>
<p>&nbsp; &nbsp; 8 in bin: 1000</p>
<p>&nbsp; &nbsp; 48d = 1100000</p>
<p>&nbsp; &nbsp; 10d = 1010</p>
<p>&nbsp; &nbsp; 0011 AND 1000 = 0</p>
<p>&nbsp; &nbsp; 3, 8, 48 AND = 0</p>
<p>&nbsp; &nbsp; 10 and 8 not = 0</p>
<p>&nbsp; &nbsp; so, if pair AND = 0</p>
<p>&nbsp; &nbsp; that pair have no common bit</p>
<p>&nbsp; &nbsp; so, we store a bit array to check the state of bit</p>
<p>&nbsp; &nbsp; and if, to better, we just need to store number of bit in that array instead.</p>
<p>&nbsp; &nbsp; oh no, it wrong.</p>
<p>&nbsp; &nbsp; so if we must store a array.</p>
<p>&nbsp; &nbsp; no, we can use bitwise operator <code>&amp;</code> to check if <code>a AND b == 0</code> or not</p>
<p>&nbsp; &nbsp; and <code>OR</code> for cumulative bit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">&nbsp; &nbsp; x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-2">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 101</span></span>
<span id="cb2-3">&nbsp; &nbsp; x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb2-4">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3 == 011</span></span>
<span id="cb2-5">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 101 |= 011 = 111</span></span>
<span id="cb2-6">&nbsp; &nbsp; <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb2-7">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7</span></span></code></pre></div>
<p>&nbsp; &nbsp; to search for longest (can use <code>i</code>, and <code>j</code>) for check all the begin and end</p>
<p>&nbsp; &nbsp; improve it by two pointer to decrease TC from <code>O(n^2)</code> to <code>O(n)</code></p>
<p>&nbsp; &nbsp; and now, how to get rid of num of left from cumulative bit in slide windown</p>
<p>&nbsp; &nbsp; check that case: [011, 100]</p>
<p>&nbsp; &nbsp; now, culmulative bit: 111</p>
<p>&nbsp; &nbsp; we want it after left += 1, is 100</p>
<p>&nbsp; &nbsp; in XOR: 111 XOR 011 == 100</p>
<p>&nbsp; &nbsp; XOR parameter in python is <code>^=</code></p>
</section>
<section id="code" class="level1">
<h1>Code</h1>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> longestNiceSubarray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb3-2"></span>
<span id="cb3-3">&nbsp; &nbsp; &nbsp; &nbsp; cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">&nbsp; &nbsp; &nbsp; &nbsp; ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">&nbsp; &nbsp; &nbsp; &nbsp; left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-8"></span>
<span id="cb3-9">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> right <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)):</span>
<span id="cb3-10"></span>
<span id="cb3-11">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># when AND not ease</span></span>
<span id="cb3-12"></span>
<span id="cb3-13">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> nums[right] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right can not cumulative, increase left until it can ease, use XOR for get rid of it</span></span>
<span id="cb3-14"></span>
<span id="cb3-15">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^=</span> nums[left]</span>
<span id="cb3-16"></span>
<span id="cb3-17">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-18"></span>
<span id="cb3-19">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># until can AND</span></span>
<span id="cb3-20"></span>
<span id="cb3-21">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use OR to cumulative it</span></span>
<span id="cb3-22"></span>
<span id="cb3-23">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> nums[right]</span>
<span id="cb3-24"></span>
<span id="cb3-25">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(ans, right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-26"></span>
<span id="cb3-27">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-longest-nice-subarray/leetcode-Longest-Nice-Subarray.html</guid>
  <pubDate>Tue, 18 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>House robber</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-house-robber/house-robber.html</link>
  <description><![CDATA[ 




<p>Topic: <code>array, dymanic programming</code></p>
<section id="question" class="level1">
<h1>Question</h1>
<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>
<p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p>
<p>Example 1:</p>
<ul>
<li>Input: <code>nums = [1,2,3,1]</code></li>
<li>Output: <code>4</code></li>
<li>Explanation: <code>Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.</code></li>
</ul>
<p>Example 2:</p>
<ul>
<li>Input: <code>nums = [2,7,9,3,1]</code></li>
<li>Output: <code>12</code></li>
<li>Explanation: <code>Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.</code></li>
</ul>
<p>Constraints:</p>
<pre><code>1 &lt;= nums.length &lt;= 100
0 &lt;= nums[i] &lt;= 400</code></pre>
</section>
<section id="approaches" class="level1">
<h1>Approaches</h1>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-house-robber/house-robber.html</guid>
  <pubDate>Mon, 17 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Divide Array Into Equal Pairs</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/programming/leetcode-divide-array-into-equal-pairs/Leetcode-Divide-array-into-equal-pairs.html</link>
  <description><![CDATA[ 




<p>Topic: <code>array, hash table, bit manipulation, counting</code></p>
<section id="question" class="level1">
<h1>Question</h1>
<p>You are given an integer array nums consisting of <code>2 * n</code> integers.</p>
<p>You need to divide nums into n pairs such that:</p>
<pre><code>Each element belongs to exactly one pair.
The elements present in a pair are equal.</code></pre>
<p>Return true if nums can be divided into n pairs, otherwise return false.</p>
<p>Example 1:</p>
<ul>
<li><p>Input: <code>nums = [3,2,3,2,2,2]</code></p></li>
<li><p>Output: <code>true</code></p></li>
<li><p>Explanation: <code>There are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs. If nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.</code></p></li>
</ul>
<p>Example 2:</p>
<ul>
<li>Input: <code>nums = [1,2,3,4]</code></li>
<li>Output: <code>false</code></li>
<li>Explanation: <code>There is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.</code></li>
</ul>
<p>Constraints:</p>
<ul>
<li><code>nums.length == 2 * n</code></li>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>1 &lt;= nums[i] &lt;= 500</code></li>
</ul>
</section>
<section id="approaches" class="level1">
<h1>Approaches</h1>
<section id="count-array" class="level2">
<h2 class="anchored" data-anchor-id="count-array">Count array</h2>
<p><code>nums</code> that have 2 * n intenger</p>
<p>divide <code>nums</code> into n pairs</p>
<p>1 element in 1 pair</p>
<p>elements in pair is equal</p>
<p>return true if can devide to n pair,</p>
<p>So, we can use count array</p>
<pre><code>if all even \`return true\`

else \`return false\`</code></pre>
<p>TC: O(n)</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Solution:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb3-3">    ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-4">    count_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb3-6">        count_array[num] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(count_array)</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> count_array:</span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</section>
<section id="map" class="level2">
<h2 class="anchored" data-anchor-id="map">Map</h2>
<p>like approach 1, we can use map for that (better code)</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb4-2">        frequency <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(nums)</span>
<span id="cb4-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check consecutive pairs in sorted array</span></span>
<span id="cb4-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> frequency.values())</span></code></pre></div>
</section>
<section id="bool-array" class="level2">
<h2 class="anchored" data-anchor-id="bool-array">Bool array</h2>
<p>an improve, use boolean array</p>
<p>O(n)</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb5-2"></span>
<span id="cb5-3">        max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(nums)</span>
<span id="cb5-4"></span>
<span id="cb5-5">        needs_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb5-8">            needs_pair[num] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> needs_pair[num]</span>
<span id="cb5-9"></span>
<span id="cb5-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(needs_pair[num] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums)</span></code></pre></div>
</section>
<section id="sorted" class="level2">
<h2 class="anchored" data-anchor-id="sorted">Sorted</h2>
<p>sorted that can have TC: O(nlogn)</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb6-2">        nums.sort()</span>
<span id="cb6-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check consecutive pairs in sorted array</span></span>
<span id="cb6-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(nums[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nums[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</section>
<section id="hash-set" class="level2">
<h2 class="anchored" data-anchor-id="hash-set">Hash set</h2>
<p>we can store a element when first meet it, and even get it, we remote from set</p>
<p>when retrieve all, if set have element.</p>
<p>hash set have TC of lookup, addition, removal in constant time.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb7-2">        unpaired <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb7-3"></span>
<span id="cb7-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb7-5">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> unpaired:</span>
<span id="cb7-6">                unpaired.remove(num)</span>
<span id="cb7-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-8">                unpaired.add(num)</span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> unpaired</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/leetcode-divide-array-into-equal-pairs/Leetcode-Divide-array-into-equal-pairs.html</guid>
  <pubDate>Mon, 17 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to approach most DP problems</title>
  <dc:creator>Kim Hung Bui</dc:creator>
  <link>https://kimhungbui.github.io/programming/programming-how-to-approach-most-dp-problems/how-to-approach-most-dp-problems.html</link>
  <description><![CDATA[ 




<p>To solve a dp problem: https://leetcode.com/problems/house-robber/solutions/156523/from-good-to-great-how-to-approach-most-of-dp-problems/</p>
<p>This particular problem can be approached using the following sequence:</p>
<ol type="1">
<li>Find recursive relation</li>
<li>Recursive (top-down)</li>
<li>Recursive + memo (top-down)</li>
<li>Iterative + memo (bottom-up)</li>
<li>Iterative + N variables (bottom-up)</li>
</ol>
<section id="step-1-figure-out-recursive-relation." class="level1">
<h1>Step 1: Figure out recursive relation.</h1>
<p>A robber has 2 options: 1. rob current house <code>i</code>; 2. Don’t rob current house.</p>
<p>If an option <code>1</code> is selected it means that she can’t rob previous <code>i-1</code> house but can rob the one before previous <code>i-2</code> and get alls cumulative loot that follows.</p>
<p>If an option <code>2</code> is selected the robber loot from robbery of <code>i-1</code> and all the following buildings.</p>
<p>So it boils down to calculating what is more profitable:</p>
<ul>
<li><p>robbery of current house + loot from house before the previous</p></li>
<li><p>loot from the previous house robbery and any loot capture before that</p></li>
</ul>
<p><code>rob(i) = Math.max(rob(i-2) + currentHouseValue, rob(i-1))</code></p>
</section>
<section id="step-2-recursive-top-down" class="level1">
<h1>Step 2: Recursive (top-down):</h1>
<p>Converting the recurrent relation from step 1:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob_helper(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], i: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stop case</span></span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb1-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-8">        </span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nums[i], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) </span></code></pre></div>
<p>but it is TLE:</p>
<p>![[Pasted image 20250317111239.png]]</p>
<p>this algorithm will process the same <code>i</code> multiple times and it needs improvement. TC: <code>[to fill]</code></p>
</section>
<section id="step-3-recursive-memo-top-down" class="level1">
<h1>Step 3: Recursive + memo (top-down)</h1>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">&nbsp; &nbsp; memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-2"></span>
<span id="cb2-3">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-4"></span>
<span id="cb2-5">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 stand for not rob that house is better</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1 for not check house</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">&nbsp; &nbsp; &nbsp; &nbsp; <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13">  </span>
<span id="cb2-14"></span>
<span id="cb2-15">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob_helper(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], i: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-16"></span>
<span id="cb2-17">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stop case</span></span>
<span id="cb2-18"></span>
<span id="cb2-19">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb2-20"></span>
<span id="cb2-21">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> &nbsp; &nbsp;</span>
<span id="cb2-22"></span>
<span id="cb2-23">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-24"></span>
<span id="cb2-25">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory[i]</span>
<span id="cb2-26"></span>
<span id="cb2-27">&nbsp; &nbsp; &nbsp; &nbsp; result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nums[i], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-28"></span>
<span id="cb2-29">&nbsp; &nbsp; &nbsp; &nbsp; <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result</span>
<span id="cb2-30"></span>
<span id="cb2-31">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span></code></pre></div>
<p>![[Pasted image 20250317112240.png]] This approach is better, this should run in <code>O(n)</code> time. Space complexity is <code>O(n)</code>.</p>
<p>Because the recursive stack, let’s try to get rid of it. ## Step 4: Iterative + memo (bottom-up)</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb3-2">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 stand for not rob that house is better</span></span>
<span id="cb3-3">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1 for not check house</span></span>
<span id="cb3-4">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-5">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> nums[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-9"></span>
<span id="cb3-10">&nbsp; &nbsp; &nbsp; &nbsp; memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-11">&nbsp; &nbsp; &nbsp; &nbsp; memory[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-12">&nbsp; &nbsp; &nbsp; &nbsp; memory[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nums[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-13">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)):</span>
<span id="cb3-14">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nums[i]</span>
<span id="cb3-15">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the next val is rob now, or rob the last</span></span>
<span id="cb3-16">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memory[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(memory[i], memory[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> val)</span>
<span id="cb3-17">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> memory[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)]</span></code></pre></div>
<section id="step-5-iterative-2-variables-bottom-up" class="level2">
<h2 class="anchored" data-anchor-id="step-5-iterative-2-variables-bottom-up">Step 5: Iterative + 2 variables (bottom-up)</h2>
<p>In the previous step, we use only <code>memo[i]</code> and <code>memo[i-1]</code>, so going just 2 step back. We can hold them in 2 variables instead. This optimization is met in Fibonacci sequence creation and some other problems [[Optimize Fibonacci]]</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb4-2">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-3">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-4">&nbsp; &nbsp; &nbsp; &nbsp; prev1, prev2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-5">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb4-6">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prev1</span>
<span id="cb4-7">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prev1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(prev2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num, prev1)</span>
<span id="cb4-8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prev2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp</span>
<span id="cb4-9">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prev1</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/programming/programming-how-to-approach-most-dp-problems/how-to-approach-most-dp-problems.html</guid>
  <pubDate>Mon, 17 Mar 2025 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
