---
title: Merge Triplets to Form Target Triplet
lightbox: false
description: Some simple observations
author:
  - name: Kim Hung Bui
    url: https://kimhungbui.github.io
    affiliation: Project Euler - 52. Permuted Multiples
    affiliation-url: https://projecteuler.net/problem=52
date: 2025-07-19
categories:
  - project-euler
  - programming
format:
  html:
    toc: true
    toc-location: right
    number-sections: true
    number-depth: 3
    code-fold: true
    highlight-style: a11y
execute:
  echo: true
  warning: false
  error: false
  result: interactive
---

<p>It can be seen that the number, $125874$, and its double, $251748$, contain exactly the same digits, but in a different order.</p>
<p>Find the smallest positive integer, $x$, such that $2x$, $3x$, $4x$, $5x$, and $6x$, contain the same digits.</p>

# Brute Force Idea ($O(n^2)$ or worse)

Test each number `x` starting from 1, and check if `2x, ..., 6x` are permutations of `x`. While that works, it's not efficient if we don't restrict the search space.

# Key observations (To Reduce the Search Space)

## Same number of digits:

If `x` has `d` digits, `6x` must not have more digits than `x`, or they can't be permutations.

So

``` python
len(x) == len(6x)
```

Example: If `x = 100`, then `6x = 600`, same digit count (3). But `x = 200`, then `6x = 1200` (4 digits), not possible.

That gives __a range to search in__:

``` python
for x in range(10**(d-1), 10**d):
    ...
```

## Digit permutation check:

Instead of sorting each time ($O(n\log n)$), use:


``` python
def canonical(n):
    return ''.join(sorted(str(n)))
```

then 

``` python
c = canonical(x)
all(c == canonical(i * x) for i in range(2, 7))
```

This function is creating a canonical (standardized) form of any number:

- `str(n)` converts the number to a string (e.g., `123` → `'123'`)

- `sorted(...)` puts the digits in ascending order (e.g., `'321'` → `['1','2','3']`)

- `''.join(...)` joins them back to a single string (e.g., `['1','2','3']` → `'123'`)

So:

``` python
canonical(123) == '123'
canonical(231) == '123'
canonical(312) == '123'
```

All are permutations of the same digits ⇒ same canonical form


Time Complexity

- Each check is ~O(1) due to short digit lengths

- The loop is linear in x (but bounded by 6-digit numbers)

- Much faster than O(n²) since the search space is tightly controlled


``` {python}
def canonical(n):
    return ''.join(sorted(str(n)))

def has_same_digits(x):
    c = canonical(x)
    return all(canonical(x * i) == c for i in range(2, 7))

def find_smallest_permuted_multiple():
    x = 100000
    while True:
        if has_same_digits(x):
            return x
        x += 1

print(find_smallest_permuted_multiple())  # Output: 142857

```