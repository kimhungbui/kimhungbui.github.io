---
title: Parity invariance

lightbox: false
description: Your post description
author:
  - name: Hung
    url: https://kimhungbui.github.io
    affiliation: Leetcode
    affiliation-url: https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-i/description/
date: 2025-03-20
categories:
  - bit manipulation 
  - programming
draft: false
---

Parity invariance means that the number of times a position is flipped determines its final value. If a position is flipped an odd number of times, its value changes, but if it is flipped an even number of times, it stays the same.

Consider the array `[1, 0, 0, 1, 0, 1, 1]`. We start by flipping three consecutive elements to try and transform all `0`s into `1`s. First, flipping the subarray `[0, 0, 1]` at indices `1..3` changes the array to `[1, 1, 1, 0, 0, 1, 1]`. Then, flipping `[0, 0, 1]` at indices `[3..5]` gives `[1, 1, 1, 1, 1, 0, 1]`. Finally, flipping `[1, 0, 1]` at indices `[1, 0, 1]` at indices `4..6` results in `[1, 1, 1, 1, 1, 1, 0, 1, 0]`.

At this point, we see that the `0`s at positions `4` and `6` remain, and there is no way to flip them without also flipping the other elements. Since we can only flip three elements at a time, we cannot isolate these `0`s in a way that allow us to change them to `1`s. This happens because these positions were flipped an even number of times, so they retain their original value. Because of this **parity constraint**, the transformation is impossible.

