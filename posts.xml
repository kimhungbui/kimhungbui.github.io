<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Kim Hung Bui</title>
<link>https://kimhungbui.github.io/posts.html</link>
<atom:link href="https://kimhungbui.github.io/posts.xml" rel="self" type="application/rss+xml"/>
<description>My Personal Website</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Thu, 20 Mar 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Health Services</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/posts/english-health-services/</link>
  <description><![CDATA[ 





<p><em>Health services are a basic necessity. However, private companies have made them quite costly for ordinary individuals</em> <em>Do the advantages of private health care outweigh its disadvantage</em></p>
<section id="analysis" class="level2">
<h2 class="anchored" data-anchor-id="analysis">Analysis</h2>
<p>Advantages of Private Health Care: - Efficiency and shorter Waiting Times: Private hospitals offer quicker services compare to public hospitals, where long waiting lists are common. - Better facilities and advanced technology: Many private health institution provide cutting-edge medical technology, specialized treatments, and higher standards of care. - Greater Patient Choice: Individuals can select their preferred doctors, hospitals, and treatment plans, leading to more personalized care. Disadvantages of Private Health Care: - High costs and Limited Accessibility: Private health care is expensive, making it inaccessible for low-income individuals who cannot afford quality treatment. - Profit-driven System: The focus on profit can sometimes lead to unnecessary medical procedures, overcharging, or prioritizing financial gain over patient well-being. - Health inequality: A reliance on private health care can widen the gap between the rich and the poor, as only those who can afford it receive top-tier medical services. ## Sample essay Health care is an essential service, yet private medical facilities often make it unaffordable for many individuals. While private health care offers significant advantages such as efficiency, superior technology, and greater patient choice, it also has considerable drawbacks, particularly its high costs and contribution to social inequality. In my view, although private health care enhances medical standards, its disadvantages outweigh its benefits due to its exclusive and financial burden on ordinary citizens.</p>
<p>One of the key benefits of private health care is it efficiency. Unlike public hospitals, which often suffer from overcrowding and long waiting times, private institutions provide quicker access to medical attention. This is particularly crucial for emergency treatments or specialized procedures that require immediate intervention. Additionally, private hospitals invest heavily in advanced medical technology and modern infrastructure, ensuring high-quality treatment and specialized care. For instance, many private institutions offer robotic surgeries and personalized cancer treatments, which are not always available in public hospitals. Furthermore, private health care allows patients to choose their doctors and treatment plans, leading to a more personalized and comfortable experience.</p>
<p>However, the drawbacks of private health care are significant. The most pressing concern is its exorbitant cost, making it unaffordable for a large portion of the population. Many life-saving procedures and medications are out of reach for lower-income individuals, forcing them to rely on overstretched public health systems. Furthermore, because private hospitals overate on a profit-driven model, there is a risk of unnecessary procedures being performed to maximize revenue, sometimes at the expensive of patient welfare. Lastly, the presence of an expensive private health care sector creates a divide between the wealthy and the poor, exacerbating health inequalities. In countries without strong public health care, the underprivileged often suffer from preventable diseases simply due to financial constraints.</p>
<p>In conclusion, while private health care provides high-quality services and efficiency, its high costs and potential for exploitation make it a less viable option for the general population. A well-functioning public health system remains crucial to ensuring that medical care is accessible to all, regardless of financial status. Governments should regulate private health care costs and prioritize investment in public health services to balance quality with accessibility.</p>
</section>
<section id="structure" class="level2">
<h2 class="anchored" data-anchor-id="structure">Structure</h2>
<p>1.Health care is an essential service, yet private medical facilities often make it unaffordable for many individuals. 2. While private health care offers significant advantages such as efficiency, superior technology, and greater patient choice, it also has considerable drawbacks, particularly its high costs and contribution to social inequality. 3.In my view, although private health care enhances medical standards, its disadvantages outweigh its benefits due to its exclusive and financial burden on ordinary citizens. 1.<strong><em>Paraphrase the question.</em></strong> 2.<strong>Mention both advantages and disadvantages.</strong><em> 3.</em><strong>Clearly state your opinion.</strong>* One of the key benefits of private health care is its efficiency, as it ensures faster access to treatment, advanced medical technology, and personalized care.</p>


</section>

 ]]></description>
  <category>english</category>
  <category>writing</category>
  <category>advantages disadvantage</category>
  <guid>https://kimhungbui.github.io/posts/english-health-services/</guid>
  <pubDate>Thu, 20 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>3191. Minimum Operations to Make Binary Array Elements Equal to One I</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/posts/leetcodeminimum-operations-to-make-binary-array-elements-equal-to-one-i/3191.html</link>
  <description><![CDATA[ 





<p>You are given a</p>
<p>nums.</p>
<p>You can do the following operation on the array any number of times (possibly zero):</p>
<pre><code>Choose any 3 consecutive elements from the array and flip all of them.</code></pre>
<p>Flipping an element means changing its value from 0 to 1, and from 1 to 0.</p>
<p>Return the minimum number of operations required to make all elements in nums equal to 1. If it is impossible, return -1.</p>
<p>Example 1:</p>
<p>Input: nums = [0,1,1,1,0,0]</p>
<p>Output: 3</p>
<p>Explanation: We can do the following operations:</p>
<pre><code>Choose the elements at indices 0, 1 and 2. The resulting array is nums = [1,0,0,1,0,0].
Choose the elements at indices 1, 2 and 3. The resulting array is nums = [1,1,1,0,0,0].
Choose the elements at indices 3, 4 and 5. The resulting array is nums = [1,1,1,1,1,1].</code></pre>
<p>Example 2:</p>
<p>Input: nums = [0,1,1,1]</p>
<p>Output: -1</p>
<p>Explanation: It is impossible to make all elements equal to 1.</p>
<p>Constraints:</p>
<pre><code>3 &lt;= nums.length &lt;= 105
0 &lt;= nums[i] &lt;= 1</code></pre>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>Since we can only flip three consecutive elements at a time, isolated <code>0</code>s or certain patterns of <code>0</code>s may prevent us from turning everything into <code>1</code>. If the number of <code>0</code>s in certain positions makes it impossible to fully eliminate them using groups of three, the transformation cannot be achieved.</p>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/posts/leetcodeminimum-operations-to-make-binary-array-elements-equal-to-one-i/3191.html</guid>
  <pubDate>Thu, 20 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>IELTS Writing Task 2 - Topic Sentences – The Fastest Way to Improve your Score</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/posts/english-topic-sentence/</link>
  <description><![CDATA[ 





<section id="what-are-topic-sentence" class="level1">
<h1>What are topic sentence ?</h1>
<p>The standard essay structure for a IELTS Task 2 essay is four paragraphs - an introduction, two body paragraphs and a conclusion.</p>
<p>The topic sentence is the first sentence of each body paragraph. It tells the examiner the main idea of the paragraph so it functions like a mini introduction.</p>
</section>
<section id="why-are-topic-sentences-important" class="level1">
<h1>Why are Topic Sentences Important?</h1>
<p>Good topic sentences help to make our paragraphs clear and easy to read.</p>
<p>As we can see from the table below, clear paragraphs really help our coherence and cohesion score.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 6%">
<col style="width: 50%">
<col style="width: 43%">
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Band Score</strong></td>
<td><strong>Official IELTS description</strong><br><br> <strong>(Coherence and Cohesion)</strong></td>
<td><strong>What it means.</strong></td>
</tr>
<tr class="even">
<td>7+</td>
<td>“logically organises information and ideas…presents a clear central topic within each paragraph.”</td>
<td>Body paragraphs have one main idea.<br><br> Topic sentences are clear.</td>
</tr>
<tr class="odd">
<td>6</td>
<td>“arranges information and ideas coherently…uses paragraphing, but not always logically.”</td>
<td>Body paragraphs don’t always have one main idea.<br><br> Topic sentences are not always clear.</td>
</tr>
<tr class="even">
<td>5</td>
<td>“presents information with some organisation…may not write in paragraphs, or paragraphing may be inadequate.”</td>
<td>Paragraphs are not used well.<br><br> Topic sentences are not clear.</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</section>
<section id="how-to-write-a-good-topic-sentence" class="level1">
<h1>How to Write a Good Topic Sentence ?</h1>
<p>A good topic sentence should be clear and simple.</p>
<p>A basic topic sentence has two parts: 1. The topic. 2. The reason / main idea. ![[18920776_935567866585887_4103732896360495495_o-768x575.jpg]]</p>
<p><strong>Example Question</strong></p>
<pre><code>Global warming/Climate change are pressing problems that every country and the world will have to deal with in the future.
What are the causes of global warming ?
What are some possible solutions ?</code></pre>
<p><strong>Body paragraph 1 (the main cause of global warming)</strong> Topic: the main cause of global warming Reason/ main idea: mass consumption of fossil fuels</p>
<p>So the topic sentence is: The main cause of climate change is the mass consumption of fossil fuels.</p>
<p><strong>Body paragraph 2 (a possible solution)</strong></p>
<p>Topic: one possible solution for dealing with global warming Reason/main idea: higher taxes on automobiles</p>
<p>The topic sentence is: One possible solution for dealing with climate change could be higher taxes on automobiles.</p>
</section>
<section id="topic-sentence-will-help-us-to-stay-married-to-one-main-idea." class="level1">
<h1>Topic sentence will help us to stay married to one main idea.</h1>
<p>As we saw in the table above, we should “present a clear central topic within each paragraph”. This means each body paragraph should be focused on just one main idea.</p>
<p>Therefore planning for our topic sentences helps us to decide what is the main idea for that paragraph.</p>
<p>After that we should ONLY think of support for that idea. We are married to that main idea. We can’t cheat on it with another main idea.</p>
<p>So for the following topic sentence, we should only discuss the mass consumption of fuels.</p>
<pre><code>The main cause of climate change is the mass consumption of fossil fuels.</code></pre>
<p>Some students spend nearly the whole paragraph discussing one main idea. But then near the end, they seem to panic or get overexcited, and suddenly add a second unrelated idea e.g.&nbsp;deforestation or methane emissions from animals. This is a very common mistake but as the table above showed this will lower our coherence and cohesion score. Remember each paragraph can only have “one central topic”. As part of our planning stage in the task 2 writing exam, we should write down our topic sentences. This will make it easier when we start writing our essay to keep our supporting ideas clear, and focused on our main idea. If we accidentally include a second main idea at the end - cross it out. Stay focused.</p>
</section>
<section id="how-to-practice-topic-sentences" class="level1">
<h1>How to Practice Topic Sentences</h1>
<section id="analyze-sample-essays" class="level2">
<h2 class="anchored" data-anchor-id="analyze-sample-essays">Analyze sample essays</h2>
<ol type="1">
<li>Look at some task 2 sample essays.</li>
<li>Highlight the topic sentence(s) - what is the topic? What is the main idea?</li>
<li>Read the body paragraph(s) - do all the supporting ideas relate to that idea?</li>
</ol>
</section>
<section id="practice-writing-topic-sentences-for-sample-essays" class="level2">
<h2 class="anchored" data-anchor-id="practice-writing-topic-sentences-for-sample-essays">Practice writing topic sentences for sample essays</h2>
<ol type="1">
<li>Look at some task 2 sample essay.</li>
<li>Cover up the first sentence of the body paragraph(s).</li>
<li>Read the body again - what is the topic and main idea ?</li>
<li>Write a topic sentence for that paragraph, then compare it with the original one. ## Analyze our own writing</li>
<li>Look back through our old task 2 essays.</li>
<li>Are the topic sentences good? If not, write new ones. ## Practice writing topic sentences for new question</li>
<li>Look at some sample task 2 question (there is one below)</li>
<li>Analyze the question and brainstorm main ideas.</li>
<li>Choose the main topic and main idea for each body paragraph.</li>
<li>Write our topic sentences.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>english</category>
  <category>writing</category>
  <guid>https://kimhungbui.github.io/posts/english-topic-sentence/</guid>
  <pubDate>Thu, 20 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Zoos</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/posts/english-writting-zoos/zoos.html</link>
  <description><![CDATA[ 





<p><em>Zoos have long been a subject of debate. While some people argue that zoos play a crucial role in conserving endangered species and educating the public about wildlife, others contend that confining animals to artificial environments is unethical. Discuss both views and give your own opinion.</em></p>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>Advantage: pros: Conservation zoos often participate in breeding programs and reintroduction efforts for endangered species. Education: They provide a unique opportunity for the public to learn about wildlife and environmental issues. Research: Zoos support scientific research and rehabilitation programs that can benefit species survival</p>
<p>Disadvantage Cons: Ethical concerns: Confining animals can lead to physical and psychological stress, raising serious animal welfare issues. Natural Behavior: The artificial habitats in zoos may prevent animals from expressing their natural behaviors, potentially leading to a diminished quality of life.</p>
</section>
<section id="sample" class="level1">
<h1>Sample</h1>
<p>In recent years, zoos have become a focal point of heated debate. On the one hand, proponents argue that zoos are indispensable for conserving endangered species and educating the public. On the other hand, critics maintain that confining animals to unnatural settings is inherently unethical. In my view, while the welfare of captive animals must be a priority, the benefits of well-managed zoos in conservation and education are substantial.</p>
<p>Supporters of zoos highlight their critical role in preserving biodiversity. With numerous species facing extinction, zoos provide a controlled environment where endangered animals can be bred and nurtured away from the threats of habitat loss and poaching. Many institutions have pioneered successful breeding programs, subsequently reintroducing species into the wild. Moreover, zoos serve as a vital educational platform, offering visitors first-hand exposure to wildlife. This experience not only fosters environmental awareness but also inspires future generations to engage in conservation efforts. Additionally, ongoing research in these settings has led to significant advancements in veterinary medicine and species rehabilitation.</p>
<p>Conversely, opponents argue that the confinement of animals infringes on their natural rights. Critics assert that even the most well-intentioned zoos cannot replicate the complex ecosystems that wild animals depend on, often leading to behavioral and psychological issues. The ethical debate is further intensified by instances of inadequate care and substandard living conditions in some facilities. While these concerns are valid, they underscore the need for stringent regulations rather than the outright dismissal of zoos as an institution.</p>
<p>In conclusion, although the ethical implications of captivity are significant, I believe that the conservation, education, and research benefits provided by zoos justify their existence - provided that animal welfare is rigorously safeguarded. This balanced approach can ensure that zoos continue to contribute positively to both wildlife preservation and public understanding of environmental issues.</p>


</section>

 ]]></description>
  <category>english</category>
  <category>writing</category>
  <category>advantages disadvantage</category>
  <guid>https://kimhungbui.github.io/posts/english-writting-zoos/zoos.html</guid>
  <pubDate>Thu, 20 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Parity invariance</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/posts/program-parity-invariance/parity-invariance.html</link>
  <description><![CDATA[ 





<p>Parity invariance means that the number of times a position is flipped determines its final value. If a position is flipped an odd number of times, its value changes, but if it is flipped an even number of times, it stays the same.</p>
<p>Consider the array <code>[1, 0, 0, 1, 0, 1, 1]</code>. We start by flipping three consecutive elements to try and transform all <code>0</code>s into <code>1</code>s. First, flipping the subarray <code>[0, 0, 1]</code> at indices <code>1..3</code> changes the array to <code>[1, 1, 1, 0, 0, 1, 1]</code>. Then, flipping <code>[0, 0, 1]</code> at indices <code>[3..5]</code> gives <code>[1, 1, 1, 1, 1, 0, 1]</code>. Finally, flipping <code>[1, 0, 1]</code> at indices <code>[1, 0, 1]</code> at indices <code>4..6</code> results in <code>[1, 1, 1, 1, 1, 1, 0, 1, 0]</code>.</p>
<p>At this point, we see that the <code>0</code>s at positions <code>4</code> and <code>6</code> remain, and there is no way to flip them without also flipping the other elements. Since we can only flip three elements at a time, we cannot isolate these <code>0</code>s in a way that allow us to change them to <code>1</code>s. This happens because these positions were flipped an even number of times, so they retain their original value. Because of this <strong>parity constraint</strong>, the transformation is impossible.</p>



 ]]></description>
  <category>bit manipulation</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/posts/program-parity-invariance/parity-invariance.html</guid>
  <pubDate>Thu, 20 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>leetcode-Longest-Nice-Subarray</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/posts/leetcode-longest-nice-subarray/leetcode-Longest-Nice-Subarray.html</link>
  <description><![CDATA[ 





<p>Topic: <code>array, bit manipulation, slide windown</code></p>
<section id="question" class="level1">
<h1>Question</h1>
<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers.</p>
<p>We call a subarray of <code>nums</code> <strong>nice</strong> if the bitwise <strong>AND</strong> of every pair of elements that are in <strong>different</strong> positions in the subarray is equal to <code>0</code>.</p>
<p>Return <em>the length of the <strong>longest</strong> nice subarray</em>.</p>
<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>
<p><strong>Note</strong> that subarrays of length <code>1</code> are always considered nice.</p>
<p>Example 1:</p>
<p>Input: nums = [1,3,8,48,10] Output: 3 Explanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions: - 3 AND 8 = 0. - 3 AND 48 = 0. - 8 AND 48 = 0. It can be proven that no longer nice subarray can be obtained, so we return 3.</p>
<p>Example 2:</p>
<p>Input: nums = [3,1,5,11,13] Output: 1 Explanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.</p>
<p>Constraints:</p>
<pre><code>1 &lt;= nums.length &lt;= 105
1 &lt;= nums[i] &lt;= 109</code></pre>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>&nbsp; &nbsp; example 1:</p>
<p>&nbsp; &nbsp; [1, 3, 8, 48, 10]</p>
<p>&nbsp; &nbsp; 3 in bin: 0011</p>
<p>&nbsp; &nbsp; 8 in bin: 1000</p>
<p>&nbsp; &nbsp; 48d = 1100000</p>
<p>&nbsp; &nbsp; 10d = 1010</p>
<p>&nbsp; &nbsp; 0011 AND 1000 = 0</p>
<p>&nbsp; &nbsp; 3, 8, 48 AND = 0</p>
<p>&nbsp; &nbsp; 10 and 8 not = 0</p>
<p>&nbsp; &nbsp; so, if pair AND = 0</p>
<p>&nbsp; &nbsp; that pair have no common bit</p>
<p>&nbsp; &nbsp; so, we store a bit array to check the state of bit</p>
<p>&nbsp; &nbsp; and if, to better, we just need to store number of bit in that array instead.</p>
<p>&nbsp; &nbsp; oh no, it wrong.</p>
<p>&nbsp; &nbsp; so if we must store a array.</p>
<p>&nbsp; &nbsp; no, we can use bitwise operator <code>&amp;</code> to check if <code>a AND b == 0</code> or not</p>
<p>&nbsp; &nbsp; and <code>OR</code> for cumulative bit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">&nbsp; &nbsp; x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-2">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 101</span></span>
<span id="cb2-3">&nbsp; &nbsp; x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb2-4">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3 == 011</span></span>
<span id="cb2-5">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 101 |= 011 = 111</span></span>
<span id="cb2-6">&nbsp; &nbsp; <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb2-7">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7</span></span></code></pre></div>
<p>&nbsp; &nbsp; to search for longest (can use <code>i</code>, and <code>j</code>) for check all the begin and end</p>
<p>&nbsp; &nbsp; improve it by two pointer to decrease TC from <code>O(n^2)</code> to <code>O(n)</code></p>
<p>&nbsp; &nbsp; and now, how to get rid of num of left from cumulative bit in slide windown</p>
<p>&nbsp; &nbsp; check that case: [011, 100]</p>
<p>&nbsp; &nbsp; now, culmulative bit: 111</p>
<p>&nbsp; &nbsp; we want it after left += 1, is 100</p>
<p>&nbsp; &nbsp; in XOR: 111 XOR 011 == 100</p>
<p>&nbsp; &nbsp; XOR parameter in python is <code>^=</code></p>
</section>
<section id="code" class="level1">
<h1>Code</h1>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> longestNiceSubarray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb3-2"></span>
<span id="cb3-3">&nbsp; &nbsp; &nbsp; &nbsp; cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">&nbsp; &nbsp; &nbsp; &nbsp; ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">&nbsp; &nbsp; &nbsp; &nbsp; left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-8"></span>
<span id="cb3-9">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> right <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)):</span>
<span id="cb3-10"></span>
<span id="cb3-11">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># when AND not ease</span></span>
<span id="cb3-12"></span>
<span id="cb3-13">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> nums[right] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right can not cumulative, increase left until it can ease, use XOR for get rid of it</span></span>
<span id="cb3-14"></span>
<span id="cb3-15">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^=</span> nums[left]</span>
<span id="cb3-16"></span>
<span id="cb3-17">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-18"></span>
<span id="cb3-19">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># until can AND</span></span>
<span id="cb3-20"></span>
<span id="cb3-21">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use OR to cumulative it</span></span>
<span id="cb3-22"></span>
<span id="cb3-23">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cumulative_bit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> nums[right]</span>
<span id="cb3-24"></span>
<span id="cb3-25">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(ans, right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-26"></span>
<span id="cb3-27">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/posts/leetcode-longest-nice-subarray/leetcode-Longest-Nice-Subarray.html</guid>
  <pubDate>Tue, 18 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Divide Array Into Equal Pairs</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/posts/leetcode-divide-array-into-equal-pairs/Leetcode-Divide-array-into-equal-pairs.html</link>
  <description><![CDATA[ 





<p>Topic: <code>array, hash table, bit manipulation, counting</code></p>
<section id="question" class="level1">
<h1>Question</h1>
<p>You are given an integer array nums consisting of <code>2 * n</code> integers.</p>
<p>You need to divide nums into n pairs such that:</p>
<pre><code>Each element belongs to exactly one pair.
The elements present in a pair are equal.</code></pre>
<p>Return true if nums can be divided into n pairs, otherwise return false.</p>
<p>Example 1:</p>
<ul>
<li><p>Input: <code>nums = [3,2,3,2,2,2]</code></p></li>
<li><p>Output: <code>true</code></p></li>
<li><p>Explanation: <code>There are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs. If nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.</code></p></li>
</ul>
<p>Example 2:</p>
<ul>
<li>Input: <code>nums = [1,2,3,4]</code></li>
<li>Output: <code>false</code></li>
<li>Explanation: <code>There is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.</code></li>
</ul>
<p>Constraints:</p>
<ul>
<li><code>nums.length == 2 * n</code></li>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>1 &lt;= nums[i] &lt;= 500</code></li>
</ul>
</section>
<section id="approaches" class="level1">
<h1>Approaches</h1>
<section id="count-array" class="level2">
<h2 class="anchored" data-anchor-id="count-array">Count array</h2>
<p><code>nums</code> that have 2 * n intenger</p>
<p>divide <code>nums</code> into n pairs</p>
<p>1 element in 1 pair</p>
<p>elements in pair is equal</p>
<p>return true if can devide to n pair,</p>
<p>So, we can use count array</p>
<pre><code>if all even \`return true\`

else \`return false\`</code></pre>
<p>TC: O(n)</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Solution:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb3-3">    ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-4">    count_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb3-6">        count_array[num] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(count_array)</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> count_array:</span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</section>
<section id="map" class="level2">
<h2 class="anchored" data-anchor-id="map">Map</h2>
<p>like approach 1, we can use map for that (better code)</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb4-2">        frequency <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(nums)</span>
<span id="cb4-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check consecutive pairs in sorted array</span></span>
<span id="cb4-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> frequency.values())</span></code></pre></div>
</section>
<section id="bool-array" class="level2">
<h2 class="anchored" data-anchor-id="bool-array">Bool array</h2>
<p>an improve, use boolean array</p>
<p>O(n)</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb5-2"></span>
<span id="cb5-3">        max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(nums)</span>
<span id="cb5-4"></span>
<span id="cb5-5">        needs_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb5-8">            needs_pair[num] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> needs_pair[num]</span>
<span id="cb5-9"></span>
<span id="cb5-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(needs_pair[num] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums)</span></code></pre></div>
</section>
<section id="sorted" class="level2">
<h2 class="anchored" data-anchor-id="sorted">Sorted</h2>
<p>sorted that can have TC: O(nlogn)</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb6-2">        nums.sort()</span>
<span id="cb6-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check consecutive pairs in sorted array</span></span>
<span id="cb6-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(nums[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nums[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</section>
<section id="hash-set" class="level2">
<h2 class="anchored" data-anchor-id="hash-set">Hash set</h2>
<p>we can store a element when first meet it, and even get it, we remote from set</p>
<p>when retrieve all, if set have element.</p>
<p>hash set have TC of lookup, addition, removal in constant time.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> divideArray(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb7-2">        unpaired <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb7-3"></span>
<span id="cb7-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb7-5">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> unpaired:</span>
<span id="cb7-6">                unpaired.remove(num)</span>
<span id="cb7-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-8">                unpaired.add(num)</span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> unpaired</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/posts/leetcode-divide-array-into-equal-pairs/Leetcode-Divide-array-into-equal-pairs.html</guid>
  <pubDate>Mon, 17 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to approach most DP problems</title>
  <dc:creator>Kim Hung Bui</dc:creator>
  <link>https://kimhungbui.github.io/posts/programming-how-to-approach-most-dp-problems/how-to-approach-most-dp-problems.html</link>
  <description><![CDATA[ 





<p>To solve a dp problem: https://leetcode.com/problems/house-robber/solutions/156523/from-good-to-great-how-to-approach-most-of-dp-problems/</p>
<p>This particular problem can be approached using the following sequence:</p>
<ol type="1">
<li>Find recursive relation</li>
<li>Recursive (top-down)</li>
<li>Recursive + memo (top-down)</li>
<li>Iterative + memo (bottom-up)</li>
<li>Iterative + N variables (bottom-up)</li>
</ol>
<section id="step-1-figure-out-recursive-relation." class="level1">
<h1>Step 1: Figure out recursive relation.</h1>
<p>A robber has 2 options: 1. rob current house <code>i</code>; 2. Don’t rob current house.</p>
<p>If an option <code>1</code> is selected it means that she can’t rob previous <code>i-1</code> house but can rob the one before previous <code>i-2</code> and get alls cumulative loot that follows.</p>
<p>If an option <code>2</code> is selected the robber loot from robbery of <code>i-1</code> and all the following buildings.</p>
<p>So it boils down to calculating what is more profitable:</p>
<ul>
<li><p>robbery of current house + loot from house before the previous</p></li>
<li><p>loot from the previous house robbery and any loot capture before that</p></li>
</ul>
<p><code>rob(i) = Math.max(rob(i-2) + currentHouseValue, rob(i-1))</code></p>
</section>
<section id="step-2-recursive-top-down" class="level1">
<h1>Step 2: Recursive (top-down):</h1>
<p>Converting the recurrent relation from step 1:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob_helper(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], i: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stop case</span></span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb1-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-8">        </span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nums[i], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) </span></code></pre></div>
<p>but it is TLE:</p>
<p>![[Pasted image 20250317111239.png]]</p>
<p>this algorithm will process the same <code>i</code> multiple times and it needs improvement. TC: <code>[to fill]</code></p>
</section>
<section id="step-3-recursive-memo-top-down" class="level1">
<h1>Step 3: Recursive + memo (top-down)</h1>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">&nbsp; &nbsp; memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-2"></span>
<span id="cb2-3">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-4"></span>
<span id="cb2-5">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 stand for not rob that house is better</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1 for not check house</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">&nbsp; &nbsp; &nbsp; &nbsp; <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13">  </span>
<span id="cb2-14"></span>
<span id="cb2-15">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob_helper(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], i: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-16"></span>
<span id="cb2-17">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stop case</span></span>
<span id="cb2-18"></span>
<span id="cb2-19">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb2-20"></span>
<span id="cb2-21">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> &nbsp; &nbsp;</span>
<span id="cb2-22"></span>
<span id="cb2-23">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-24"></span>
<span id="cb2-25">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory[i]</span>
<span id="cb2-26"></span>
<span id="cb2-27">&nbsp; &nbsp; &nbsp; &nbsp; result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nums[i], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rob_helper(nums, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-28"></span>
<span id="cb2-29">&nbsp; &nbsp; &nbsp; &nbsp; <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.memory[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result</span>
<span id="cb2-30"></span>
<span id="cb2-31">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span></code></pre></div>
<p>![[Pasted image 20250317112240.png]] This approach is better, this should run in <code>O(n)</code> time. Space complexity is <code>O(n)</code>.</p>
<p>Because the recursive stack, let’s try to get rid of it. ## Step 4: Iterative + memo (bottom-up)</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb3-2">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 stand for not rob that house is better</span></span>
<span id="cb3-3">&nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1 for not check house</span></span>
<span id="cb3-4">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-5">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> nums[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-9"></span>
<span id="cb3-10">&nbsp; &nbsp; &nbsp; &nbsp; memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-11">&nbsp; &nbsp; &nbsp; &nbsp; memory[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-12">&nbsp; &nbsp; &nbsp; &nbsp; memory[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nums[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-13">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)):</span>
<span id="cb3-14">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nums[i]</span>
<span id="cb3-15">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the next val is rob now, or rob the last</span></span>
<span id="cb3-16">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memory[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(memory[i], memory[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> val)</span>
<span id="cb3-17">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> memory[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums)]</span></code></pre></div>
<section id="step-5-iterative-2-variables-bottom-up" class="level2">
<h2 class="anchored" data-anchor-id="step-5-iterative-2-variables-bottom-up">Step 5: Iterative + 2 variables (bottom-up)</h2>
<p>In the previous step, we use only <code>memo[i]</code> and <code>memo[i-1]</code>, so going just 2 step back. We can hold them in 2 variables instead. This optimization is met in Fibonacci sequence creation and some other problems [[Optimize Fibonacci]]</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">&nbsp; &nbsp; <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rob(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nums: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb4-2">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-3">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-4">&nbsp; &nbsp; &nbsp; &nbsp; prev1, prev2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-5">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums:</span>
<span id="cb4-6">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prev1</span>
<span id="cb4-7">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prev1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(prev2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num, prev1)</span>
<span id="cb4-8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prev2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp</span>
<span id="cb4-9">&nbsp; &nbsp; &nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prev1</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/posts/programming-how-to-approach-most-dp-problems/how-to-approach-most-dp-problems.html</guid>
  <pubDate>Mon, 17 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>House robber</title>
  <dc:creator>Hung </dc:creator>
  <link>https://kimhungbui.github.io/posts/leetcode-house-robber/house-robber.html</link>
  <description><![CDATA[ 





<p>Topic: <code>array, dymanic programming</code></p>
<section id="question" class="level1">
<h1>Question</h1>
<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>
<p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p>
<p>Example 1:</p>
<ul>
<li>Input: <code>nums = [1,2,3,1]</code></li>
<li>Output: <code>4</code></li>
<li>Explanation: <code>Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.</code></li>
</ul>
<p>Example 2:</p>
<ul>
<li>Input: <code>nums = [2,7,9,3,1]</code></li>
<li>Output: <code>12</code></li>
<li>Explanation: <code>Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.</code></li>
</ul>
<p>Constraints:</p>
<pre><code>1 &lt;= nums.length &lt;= 100
0 &lt;= nums[i] &lt;= 400</code></pre>
</section>
<section id="approaches" class="level1">
<h1>Approaches</h1>


</section>

 ]]></description>
  <category>leetcode</category>
  <category>programming</category>
  <guid>https://kimhungbui.github.io/posts/leetcode-house-robber/house-robber.html</guid>
  <pubDate>Mon, 17 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Statistical Inference and Learning</title>
  <dc:creator>Your name</dc:creator>
  <link>https://kimhungbui.github.io/posts/math-statistic-statistical-inference-and-learning/Statistical-Inference-and-Learning.html</link>
  <description><![CDATA[ 





<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section"></h2>
</section>
<section id="i.-overview-of-statistical-inference" class="level2">
<h2 class="anchored" data-anchor-id="i.-overview-of-statistical-inference">I. Overview of Statistical Inference</h2>
<ul>
<li><p><strong>Definition:</strong><br>
Statistical inference (often called “learning” in computer science) is the process of using data to deduce the underlying distribution <img src="https://latex.codecogs.com/png.latex?F"> that generated the data. This may involve estimating the entire distribution or specific features (such as the mean).</p></li>
<li><p><strong>Applications:</strong></p>
<ul>
<li>Extracting meaningful information from data<br>
</li>
<li>Making informed decisions and predictions<br>
</li>
<li>Serving as the foundation for more advanced topics in statistics and machine learning</li>
</ul></li>
</ul>
<hr>
</section>
<section id="ii.-modeling-approaches" class="level2">
<h2 class="anchored" data-anchor-id="ii.-modeling-approaches">II. Modeling Approaches</h2>
<section id="a.-parametric-models" class="level3">
<h3 class="anchored" data-anchor-id="a.-parametric-models">A. Parametric Models</h3>
<ul>
<li><strong>Definition:</strong><br>
A model defined by a finite number of parameters.<br>
</li>
<li><strong>Example (Normal Distribution):</strong><br>
<img src="https://latex.codecogs.com/png.latex?%0Af(x;%20%5Cmu,%20%5Csigma)%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7B2%5Cpi%7D%7D%20%5Cexp%5Cleft(-%5Cfrac%7B(x-%5Cmu)%5E2%7D%7B2%5Csigma%5E2%7D%5Cright)%0A"></li>
<li><strong>Characteristics:</strong>
<ul>
<li>Simpler to analyze and interpret<br>
</li>
<li>More efficient when the assumptions hold true</li>
</ul></li>
</ul>
</section>
<section id="b.-nonparametric-models" class="level3">
<h3 class="anchored" data-anchor-id="b.-nonparametric-models">B. Nonparametric Models</h3>
<ul>
<li><strong>Definition:</strong><br>
Models that do not restrict the distribution to a finite-dimensional parameter space.</li>
<li><strong>Examples:</strong>
<ul>
<li>Estimating the entire cumulative distribution function (cdf)<img src="https://latex.codecogs.com/png.latex?F"><br>
</li>
<li>Estimating a probability density function (pdf) with smoothness assumptions (e.g., assuming the pdf belongs to a [[Sobolev space]])</li>
</ul></li>
<li><strong>Characteristics:</strong>
<ul>
<li>Greater flexibility to model complex data<br>
</li>
<li>Fewer assumptions about the form of the distribution</li>
</ul></li>
</ul>
<hr>
</section>
</section>
<section id="example-6.1-one-dimensional-parametric-estimation--" class="level2">
<h2 class="anchored" data-anchor-id="example-6.1-one-dimensional-parametric-estimation--">Example 6.1: One-Dimensional Parametric Estimation -</h2>
<p><strong>Scenario:</strong> We observe independent Bernoulli(<img src="https://latex.codecogs.com/png.latex?p">) random variables <img src="https://latex.codecogs.com/png.latex?X_1,%20X_2,%20%5Cdots,%20X_n">.</p>
<p><strong>Goal:</strong> Estimate the unknown parameter <img src="https://latex.codecogs.com/png.latex?p"> (the probability of success).</p>
<p><strong>Estimator:</strong> The natural estimator is the sample mean: <img src="https://latex.codecogs.com/png.latex?%20%5Chat%7Bp%7D_n%20=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5En%20X_i.%20"> <strong>Key Points:</strong> - <strong>Unbiasedness:</strong> <img src="https://latex.codecogs.com/png.latex?E(%5Chat%7Bp%7D_n)%20=%20p."> Thus, the estimator is unbiased.</p>
<p><strong>Variance:</strong> Since <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BVar%7D(X_i)%20=%20p(1-p)">, the variance of the estimator is</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Coperatorname%7BVar%7D(%5Chat%7Bp%7D_n)%20=%20%5Cfrac%7Bp(1-p)%7D%7Bn%7D.%20"> - <strong>Consistency:</strong> As <img src="https://latex.codecogs.com/png.latex?n"> increases, the variance shrinks, making <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bp%7D_n"> a consistent estimator of <img src="https://latex.codecogs.com/png.latex?p">.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example 6.1: One-Dimensional Parametric Estimation (Bernoulli)</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True parameter for Bernoulli distribution</span></span>
<span id="cb1-6">p_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span></span>
<span id="cb1-7">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of observations</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate n independent Bernoulli(p) observations (0 or 1)</span></span>
<span id="cb1-10">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, p_true, n)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estimator: sample mean is the natural estimator for p</span></span>
<span id="cb1-13">p_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(X)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Example 6.1: Bernoulli Parameter Estimation"</span>)</span>
<span id="cb1-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True p:"</span>, p_true)</span>
<span id="cb1-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimated p:"</span>, p_hat)</span></code></pre></div>
</section>
<section id="example-6.2-two-dimensional-parametric-estimation--" class="level2">
<h2 class="anchored" data-anchor-id="example-6.2-two-dimensional-parametric-estimation--">Example 6.2: Two-Dimensional Parametric Estimation -</h2>
<p><strong>Scenario:</strong> Suppose <img src="https://latex.codecogs.com/png.latex?X_1,%20X_2,%20%5Cdots,%20X_n"> are independent observations from a distribution <img src="https://latex.codecogs.com/png.latex?F"> whose probability density function is given by a parametric family: <img src="https://latex.codecogs.com/png.latex?%20f(x;%20%5Cmu,%20%5Csigma)%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7B2%5Cpi%7D%7D%20%5Cexp%5Cleft(-%5Cfrac%7B(x-%5Cmu)%5E2%7D%7B2%5Csigma%5E2%7D%5Cright).%20"> - <strong>Goal:</strong> Estimate the two parameters: the mean <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and the standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma">. - <strong>Nuisance Parameter:</strong> If we are primarily interested in <img src="https://latex.codecogs.com/png.latex?%5Cmu">, then <img src="https://latex.codecogs.com/png.latex?%5Csigma"> becomes a nuisance parameter—an additional parameter that must be estimated but is not of direct interest. - <strong>Key Points:</strong> - <strong>Multidimensionality:</strong> The estimation problem involves simultaneous estimation of <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">. - <strong>Methods:</strong> Techniques such as maximum likelihood estimation (MLE) are commonly used, sometimes incorporating methods (like profile likelihood) to eliminate the effect of nuisance parameters when focusing on <img src="https://latex.codecogs.com/png.latex?%5Cmu">. . # Analytical Explanation of Two Nonparametric Estimation Examples</p>
<p>Below, we analyze and explain two examples that illustrate nonparametric estimation techniques: one for estimating the cumulative distribution function (CDF) and another for estimating the probability density function (PDF).</p>
<hr>
</section>
<section id="example-6.3-nonparametric-estimation-of-the-cdf" class="level2">
<h2 class="anchored" data-anchor-id="example-6.3-nonparametric-estimation-of-the-cdf">Example 6.3: Nonparametric Estimation of the CDF</h2>
<section id="problem-statement" class="level3">
<h3 class="anchored" data-anchor-id="problem-statement"><strong>Problem Statement</strong></h3>
<ul>
<li><p><strong>Data:</strong><br>
We have independent observations <img src="https://latex.codecogs.com/png.latex?X_1,%20X_2,%20%5Cdots,%20X_n"> drawn from an unknown distribution with CDF <img src="https://latex.codecogs.com/png.latex?F">.</p></li>
<li><p><strong>Objective:</strong><br>
Estimate the entire cumulative distribution function <img src="https://latex.codecogs.com/png.latex?F">, assuming minimal assumptions—namely, that <img src="https://latex.codecogs.com/png.latex?F"> is any valid CDF (denoted by <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_%7B%5Ctext%7BALL%7D%7D">).</p></li>
</ul>
</section>
<section id="approach" class="level3">
<h3 class="anchored" data-anchor-id="approach"><strong>Approach</strong></h3>
<ul>
<li><strong>Estimator:</strong><br>
The natural nonparametric estimator for the CDF is the <strong>empirical distribution function (EDF)</strong> defined as: <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7BF%7D_n(x)%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20%5Cmathbf%7B1%7D%5C%7BX_i%20%5Cle%20x%5C%7D,%0A"> where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B1%7D%5C%7BX_i%20%5Cle%20x%5C%7D"> is an indicator function that is 1 if <img src="https://latex.codecogs.com/png.latex?X_i%20%5Cle%20x"> and 0 otherwise.</li>
</ul>
</section>
<section id="why-this-works" class="level3">
<h3 class="anchored" data-anchor-id="why-this-works"><strong>Why This Works</strong></h3>
<ul>
<li><p><strong>Minimal Assumptions:</strong><br>
No specific parametric form for <img src="https://latex.codecogs.com/png.latex?F"> is assumed; all that is required is that <img src="https://latex.codecogs.com/png.latex?F"> is a valid CDF. This makes the method very general.</p></li>
<li><p><strong>Convergence Properties:</strong><br>
The <strong>Glivenko–Cantelli theorem</strong> guarantees that the empirical CDF converges uniformly to the true CDF: <img src="https://latex.codecogs.com/png.latex?%0A%5Csup_x%20%5Cleft%7C%20%5Chat%7BF%7D_n(x)%20-%20F(x)%20%5Cright%7C%20%5Cto%200%20%5Cquad%20%5Ctext%7Bas%7D%20%5Cquad%20n%20%5Cto%20%5Cinfty.%0A"> This property ensures that the estimator is consistent.</p></li>
<li><p><strong>Intuitive Interpretation:</strong><br>
The EDF simply calculates the proportion of observations less than or equal to a given value, which is the natural way to “build” the CDF from data.</p></li>
</ul>
<hr>
</section>
</section>
<section id="example-6.4-nonparametric-density-estimation" class="level2">
<h2 class="anchored" data-anchor-id="example-6.4-nonparametric-density-estimation">Example 6.4: Nonparametric Density Estimation</h2>
<section id="problem-statement-1" class="level3">
<h3 class="anchored" data-anchor-id="problem-statement-1"><strong>Problem Statement</strong></h3>
<ul>
<li><p><strong>Data:</strong><br>
Again, we have independent observations <img src="https://latex.codecogs.com/png.latex?X_1,%20X_2,%20%5Cdots,%20X_n"> from a distribution with CDF <img src="https://latex.codecogs.com/png.latex?F">. Let the associated PDF be <img src="https://latex.codecogs.com/png.latex?f%20=%20F'">.</p></li>
<li><p><strong>Objective:</strong><br>
Estimate the PDF <img src="https://latex.codecogs.com/png.latex?f">. However, unlike the CDF, estimating the density function nonparametrically is not possible under the sole assumption that <img src="https://latex.codecogs.com/png.latex?F"> is any CDF.</p></li>
</ul>
</section>
<section id="need-for-additional-assumptions" class="level3">
<h3 class="anchored" data-anchor-id="need-for-additional-assumptions"><strong>Need for Additional Assumptions</strong></h3>
<ul>
<li><p><strong>Ill-Posed Without Smoothness:</strong><br>
The space of all CDFs (denoted by <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_%7B%5Ctext%7BALL%7D%7D">) is too vast; a generic CDF need not be differentiable. Even if a density exists, it can be highly irregular, making consistent estimation difficult or impossible.</p></li>
<li><p><strong>Introducing Smoothness via Sobolev Spaces:</strong><br>
To estimate <img src="https://latex.codecogs.com/png.latex?f"> reliably, we assume that <img src="https://latex.codecogs.com/png.latex?f"> belongs to a more restricted function class. One common assumption is that <img src="https://latex.codecogs.com/png.latex?f"> lies in a <strong>Sobolev space</strong> (denoted by <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_%7B%5Ctext%7BSOB%7D%7D">).<br>
For instance, one might assume: <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BF%7D_%7B%5Ctext%7BSOB%7D%7D%20=%20%5Cleft%5C%7B%20f%20%5Cin%20%5Cmathcal%7BF%7D_%7B%5Ctext%7BDENS%7D%7D%20:%20%5Cint%20%5Cleft(f%5E%7B(s)%7D(x)%5Cright)%5E2%20dx%20%3C%20%5Cinfty%20%5Cright%5C%7D,%0A"> where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_%7B%5Ctext%7BDENS%7D%7D"> is the set of all probability density functions.</li>
<li><img src="https://latex.codecogs.com/png.latex?f%5E%7B(s)%7D(x)"> denotes the <img src="https://latex.codecogs.com/png.latex?s">-th derivative of <img src="https://latex.codecogs.com/png.latex?f">.</li>
<li>The condition <img src="https://latex.codecogs.com/png.latex?%5Cint%20%5Cleft(f%5E%7B(s)%7D(x)%5Cright)%5E2%20dx%20%3C%20%5Cinfty"> ensures that <img src="https://latex.codecogs.com/png.latex?f"> is not “too wiggly” or irregular.</li>
</ul></li>
</ul>
</section>
<section id="estimation-methods" class="level3">
<h3 class="anchored" data-anchor-id="estimation-methods"><strong>Estimation Methods</strong></h3>
<ul>
<li><strong>Kernel Density Estimation (KDE):</strong><br>
With the smoothness assumption in place, methods such as kernel density estimation can be employed. A kernel density estimator has the form: <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7Bf%7D_n(x)%20=%20%5Cfrac%7B1%7D%7Bnh%7D%20%5Csum_%7Bi=1%7D%5En%20K%5Cleft(%5Cfrac%7Bx%20-%20X_i%7D%7Bh%7D%5Cright),%0A"> where:
<ul>
<li><img src="https://latex.codecogs.com/png.latex?K(%5Ccdot)"> is a smooth kernel function (e.g., Gaussian).</li>
<li><img src="https://latex.codecogs.com/png.latex?h"> is a bandwidth parameter that controls the smoothness of the estimate.</li>
</ul></li>
</ul>
</section>
<section id="why-these-assumptions-are-necessary" class="level3">
<h3 class="anchored" data-anchor-id="why-these-assumptions-are-necessary"><strong>Why These Assumptions are Necessary</strong></h3>
<ul>
<li><p><strong>Regularization:</strong><br>
The smoothness condition imposed by the Sobolev space helps regularize the estimation problem. It restricts the set of possible densities to those that have bounded variation or a controlled number of oscillations.</p></li>
<li><p><strong>Improved Convergence:</strong><br>
Smoothness assumptions lead to better convergence properties of the density estimator, allowing for rates of convergence that can be rigorously analyzed.</p></li>
<li><p><strong>Practical Feasibility:</strong><br>
In many real-world scenarios, the underlying density is indeed smooth (e.g., physical phenomena, economic variables), making this assumption both realistic and useful.</p></li>
</ul>
<hr>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary"><strong>Summary</strong></h2>
<ul>
<li><strong>Example 6.3:</strong>
<ul>
<li><strong>Task:</strong> Estimate the CDF <img src="https://latex.codecogs.com/png.latex?F"> from data with minimal assumptions.</li>
<li><strong>Method:</strong> Use the empirical CDF <img src="https://latex.codecogs.com/png.latex?%5Chat%7BF%7D_n(x)%20=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5En%20%5Cmathbf%7B1%7D%5C%7BX_i%20%5Cle%20x%5C%7D">.</li>
<li><strong>Key Property:</strong> Convergence guaranteed by the Glivenko–Cantelli theorem.</li>
</ul></li>
<li><strong>Example 6.4:</strong>
<ul>
<li><strong>Task:</strong> Estimate the density <img src="https://latex.codecogs.com/png.latex?f"> from data.</li>
<li><strong>Challenge:</strong> Estimation is ill-posed without additional assumptions.</li>
<li><strong>Solution:</strong> Assume that <img src="https://latex.codecogs.com/png.latex?f"> is smooth by requiring it to belong to a Sobolev space (e.g., <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_%7B%5Ctext%7BDENS%7D%7D%20%5Ccap%20%5Cmathcal%7BF%7D_%7B%5Ctext%7BSOB%7D%7D">), then use methods like kernel density estimation.</li>
<li><strong>Benefit:</strong> Smoothness constraints make the problem well-posed and lead to estimators with favorable convergence properties.</li>
</ul></li>
</ul>
<p>These examples highlight the progression from estimating a distribution function under minimal assumptions to needing extra regularity conditions when estimating derivatives like the density.</p>
</section>
<section id="iii.-core-concepts-in-inference" class="level2">
<h2 class="anchored" data-anchor-id="iii.-core-concepts-in-inference">III. Core Concepts in Inference</h2>
<section id="point-estimation" class="level3">
<h3 class="anchored" data-anchor-id="point-estimation">1. Point Estimation</h3>
<ul>
<li><p><strong>Concept:</strong><br>
A point estimator is a function of the data, denoted as<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Ctheta%7D_n%20=%20g(X_1,%20X_2,%20%5Cdots,%20X_n)%0A"><br>
used to provide a single “best guess” for the unknown parameter <img src="https://latex.codecogs.com/png.latex?%5Ctheta">.</p></li>
<li><p><strong>Key Properties:</strong></p>
<ul>
<li><strong>Bias:</strong><br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bbias%7D(%5Chat%7B%5Ctheta%7D_n)%20=%20E(%5Chat%7B%5Ctheta%7D_n)%20-%20%5Ctheta%0A"></li>
<li><strong>Variance and Standard Error (se):</strong><br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bse%7D%20=%20%5Csqrt%7BVar(%5Chat%7B%5Ctheta%7D_n)%7D%0A"></li>
<li><strong>Mean Squared Error (MSE):</strong><br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bmse%7D%20=%20E%5Cleft%5B(%5Chat%7B%5Ctheta%7D_n%20-%20%5Ctheta)%5E2%5Cright%5D%20=%20%5Ctext%7Bbias%7D%5E2(%5Chat%7B%5Ctheta%7D_n)%20+%20Var(%5Chat%7B%5Ctheta%7D_n)%0A"></li>
<li><strong>Consistency:</strong><br>
An estimator is consistent if<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Ctheta%7D_n%20%5Cxrightarrow%7BP%7D%20%5Ctheta%20%5Cquad%20%5Ctext%7Bas%20%7D%20n%20%5Cto%20%5Cinfty%0A"></li>
<li><strong>Asymptotic Normality:</strong><br>
Many estimators satisfy<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Chat%7B%5Ctheta%7D_n%20-%20%5Ctheta%7D%7B%5Ctext%7Bse%7D%7D%20%5Capprox%20N(0,%201)%0A"><br>
for large samples, which facilitates the construction of confidence intervals.</li>
</ul></li>
</ul>
</section>
<section id="confidence-sets" class="level3">
<h3 class="anchored" data-anchor-id="confidence-sets">2. Confidence Sets</h3>
<ul>
<li><p><strong>Concept:</strong><br>
A confidence interval (or set) is a range constructed from the data that, over many repetitions of the experiment, contains the true parameter <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> with a specified probability (coverage).</p></li>
<li><p><strong>Example (Normal-Based Interval):</strong><br>
When <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctheta%7D_n"> is approximately normally distributed, an approximate <img src="https://latex.codecogs.com/png.latex?1-%5Calpha"> confidence interval is: <img src="https://latex.codecogs.com/png.latex?%0AC_n%20=%20%5Cleft(%20%5Chat%7B%5Ctheta%7D_n%20-%20z_%7B%5Calpha/2%7D%5C,%5Ctext%7Bse%7D,%20%5Cquad%20%5Chat%7B%5Ctheta%7D_n%20+%20z_%7B%5Calpha/2%7D%5C,%5Ctext%7Bse%7D%20%5Cright)%0A"> where <img src="https://latex.codecogs.com/png.latex?z_%7B%5Calpha/2%7D"> is the quantile of the standard Normal distribution such that <img src="https://latex.codecogs.com/png.latex?%0AP(Z%20%3E%20z_%7B%5Calpha/2%7D)%20=%20%5Cfrac%7B%5Calpha%7D%7B2%7D.%0A"></p></li>
</ul>
</section>
<section id="hypothesis-testing" class="level3">
<h3 class="anchored" data-anchor-id="hypothesis-testing">3. Hypothesis Testing</h3>
<ul>
<li><p><strong>Concept:</strong><br>
Hypothesis testing involves formulating a null hypothesis <img src="https://latex.codecogs.com/png.latex?H_0"> (a default statement, such as a coin being fair) and an alternative hypothesis <img src="https://latex.codecogs.com/png.latex?H_1">, then using the data to decide whether there is sufficient evidence to reject <img src="https://latex.codecogs.com/png.latex?H_0">.</p></li>
<li><p><strong>Example (Testing Coin Fairness):</strong><br>
<img src="https://latex.codecogs.com/png.latex?%0AH_0:%20p%20=%200.5%20%5Cquad%20%5Ctext%7Bversus%7D%20%5Cquad%20H_1:%20p%20%5Cneq%200.5%0A"></p></li>
<li><p><strong>Process:</strong></p>
<ul>
<li>Define an appropriate test statistic (e.g., <img src="https://latex.codecogs.com/png.latex?T%20=%20%7C%5Chat%7Bp%7D_n%20-%200.5%7C">)<br>
</li>
<li>Set a significance level <img src="https://latex.codecogs.com/png.latex?%5Calpha"><br>
</li>
<li>Determine the rejection region based on <img src="https://latex.codecogs.com/png.latex?%5Calpha"> or compute a p-value<br>
</li>
<li>Reject <img src="https://latex.codecogs.com/png.latex?H_0"> if the test statistic falls into the rejection region</li>
</ul></li>
</ul>
<hr>
</section>
</section>
<section id="iv.-frequentist-vs.-bayesian-inference" class="level2">
<h2 class="anchored" data-anchor-id="iv.-frequentist-vs.-bayesian-inference">IV. Frequentist vs.&nbsp;Bayesian Inference</h2>
<ul>
<li><strong>Frequentist Inference:</strong>
<ul>
<li>Treats parameters as fixed but unknown<br>
</li>
<li>Focuses on the properties of estimators over repeated sampling (e.g., confidence intervals, hypothesis tests)</li>
</ul></li>
<li><strong>Bayesian Inference:</strong>
<ul>
<li>Treats parameters as random variables with prior distributions<br>
</li>
<li>Uses Bayes’ theorem to update beliefs in light of new data, allowing direct probability statements about parameters</li>
</ul></li>
<li><strong>Comparison:</strong>
<ul>
<li><strong>Frequentist methods</strong> emphasize long-run frequency properties.<br>
</li>
<li><strong>Bayesian methods</strong> provide a framework for incorporating prior knowledge and making probabilistic statements about parameters.</li>
</ul></li>
</ul>
<hr>
</section>
<section id="v.-additional-information" class="level2">
<h2 class="anchored" data-anchor-id="v.-additional-information">V. Additional Information</h2>
<section id="bibliographic-references" class="level3">
<h3 class="anchored" data-anchor-id="bibliographic-references">Bibliographic References</h3>
<ul>
<li><strong>Elementary Level:</strong>
<ul>
<li>DeGroot and Schervish (2002)<br>
</li>
<li>Larsen and Marx (1986)</li>
</ul></li>
<li><strong>Intermediate Level:</strong>
<ul>
<li>Casella and Berger (2002)<br>
</li>
<li>Bickel and Doksum (2000)<br>
</li>
<li>Rice (1995)</li>
</ul></li>
<li><strong>Advanced Level:</strong>
<ul>
<li>Cox and Hinkley (2000)<br>
</li>
<li>Lehmann and Casella (1998)<br>
</li>
<li>Lehmann (1986)<br>
</li>
<li>van der Vaart (1998)</li>
</ul></li>
</ul>
</section>
<section id="exercises" class="level3">
<h3 class="anchored" data-anchor-id="exercises">Exercises</h3>
<ol type="1">
<li><p><strong>Poisson Estimation:</strong><br>
For <img src="https://latex.codecogs.com/png.latex?X_1,%20X_2,%20%5Cdots,%20X_n%20%5Csim%20%5Ctext%7BPoisson%7D(%5Clambda)"> with the estimator<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Clambda%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5En%20X_i,%0A"><br>
determine the bias, standard error, and mean squared error.</p></li>
<li><p><strong>Uniform Distribution Estimation (Method 1):</strong><br>
For <img src="https://latex.codecogs.com/png.latex?X_1,%20X_2,%20%5Cdots,%20X_n%20%5Csim%20%5Ctext%7BUniform%7D(0,%20%5Ctheta)"> and the estimator<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Ctheta%7D%20=%20%5Cmax%5C%7BX_1,%20X_2,%20%5Cdots,%20X_n%5C%7D,%0A"><br>
calculate the bias, standard error, and mse.</p></li>
<li><p><strong>Uniform Distribution Estimation (Method 2):</strong><br>
For the same model with the estimator<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Ctheta%7D%20=%202X_%7B(n)%7D,%0A"><br>
where <img src="https://latex.codecogs.com/png.latex?X_%7B(n)%7D"> is the maximum, compute the bias, standard error, and mse.</p></li>
</ol>
<hr>
</section>
</section>
<section id="vi.-key-takeaways" class="level2">
<h2 class="anchored" data-anchor-id="vi.-key-takeaways">VI. Key Takeaways</h2>
<ul>
<li><p><strong>Inference Fundamentals:</strong><br>
Learning how to deduce properties of a population from a sample is central to statistics and machine learning.</p></li>
<li><p><strong>Model Choice:</strong></p>
<ul>
<li><strong>Parametric models</strong> are simpler but rely on strong assumptions.<br>
</li>
<li><strong>Nonparametric models</strong> offer flexibility with fewer assumptions.</li>
</ul></li>
<li><p><strong>Estimator Evaluation:</strong><br>
Properties such as bias, variance (or standard error), and mean squared error are essential in assessing the quality of estimators.</p></li>
<li><p><strong>Confidence and Testing:</strong></p>
<ul>
<li>Confidence intervals quantify the uncertainty in estimates.<br>
</li>
<li>Hypothesis testing provides a formal framework for decision-making.</li>
</ul></li>
<li><p><strong>Philosophical Approaches:</strong><br>
The frequentist and Bayesian paradigms provide different perspectives on probability and inference, influencing how uncertainty is quantified and interpreted.</p></li>
</ul>


</section>

 ]]></description>
  <category>Statistical</category>
  <guid>https://kimhungbui.github.io/posts/math-statistic-statistical-inference-and-learning/Statistical-Inference-and-Learning.html</guid>
  <pubDate>Wed, 26 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://kimhungbui.github.io/posts/math-statistic-statistical-inference-and-learning/Statistical-Inference.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Post template</title>
  <dc:creator>Your name</dc:creator>
  <link>https://kimhungbui.github.io/posts/post_template/</link>
  <description><![CDATA[ 





<p>Just write more markdown here!</p>
<section id="this-is-a-section" class="level1">
<h1>This is a section</h1>
<p>Section text!</p>
<section id="this-is-a-subsection" class="level2">
<h2 class="anchored" data-anchor-id="this-is-a-subsection">This is a subsection</h2>
<p>Subsection text! You get it now I assume</p>
<p>This is how you reference an image in your blog post</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="dundee.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="This is just a photo I took last time I was in Dundee."><img src="https://kimhungbui.github.io/posts/post_template/dundee.jpg" class="img-fluid figure-img" alt="This is just a photo I took last time I was in Dundee."></a></p>
<figcaption>This is just a photo I took last time I was in Dundee.</figcaption>
</figure>
</div>
<p>That’s it! go for it!</p>


</section>
</section>

 ]]></description>
  <category>template</category>
  <category>any-category-you-want</category>
  <guid>https://kimhungbui.github.io/posts/post_template/</guid>
  <pubDate>Wed, 11 Sep 2024 00:00:00 GMT</pubDate>
  <media:content url="https://kimhungbui.github.io/posts/post_template/dundee.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bernoulli Randome Variable</title>
  <dc:creator>Kim Hung Bui</dc:creator>
  <link>https://kimhungbui.github.io/posts/math-statistic-bernoulli-random-variable/bernoulli-random-variable.html</link>
  <description><![CDATA[ 





<section id="bernoulli-distribution" class="level1">
<h1>Bernoulli Distribution</h1>
<p>The <strong>Bernoulli distribution</strong> is a discrete probability distribution that models the outcome of a single trial with two possible outcomes: success (1) and failure (0).</p>
<hr>
<section id="definition" class="level2">
<h2 class="anchored" data-anchor-id="definition">📌 1. Definition</h2>
<p>A <strong>Bernoulli random variable</strong> ( X ) takes the value: - ( X = 1 ) with probability ( p ) (success), - ( X = 0 ) with probability ( 1 - p ) (failure).</p>
<p>Mathematically, the probability mass function (PMF) is given by: <img src="https://latex.codecogs.com/png.latex?%0AP(X%20=%20x)%20=%20p%5Ex%20(1%20-%20p)%5E%7B1%20-%20x%7D,%20%5Cquad%20x%20%5Cin%20%5C%7B0,%201%5C%7D,%20%5C%200%20%5Cleq%20p%20%5Cleq%201.%0A"></p>
<hr>
</section>
<section id="properties-of-the-bernoulli-distribution" class="level2">
<h2 class="anchored" data-anchor-id="properties-of-the-bernoulli-distribution">⚡ 2. Properties of the Bernoulli Distribution</h2>
<section id="mean-expected-value" class="level3">
<h3 class="anchored" data-anchor-id="mean-expected-value">🎯 Mean (Expected Value)</h3>
<p>The mean represents the expected outcome of the random variable: <img src="https://latex.codecogs.com/png.latex?%0AE%5BX%5D%20=%20p.%0A"></p>
<p>We expected value <img src="https://latex.codecogs.com/png.latex?E(x)"> of a random variable <img src="https://latex.codecogs.com/png.latex?X"> is given by: <img src="https://latex.codecogs.com/png.latex?%0AE(X)%20=%20%5Csigma%20x%20%5Cdot%20P(X%20=%20x)%0A"> For a Bernoulli random variable: <img src="https://latex.codecogs.com/png.latex?%0AE(X)%20=%201%20%5Cdot%20p%20+%200%20%5Cdot(%201%20-%20p)%20=%20p%0A"></p>
</section>
<section id="variance" class="level3">
<h3 class="anchored" data-anchor-id="variance">🎲 Variance</h3>
<p>The variance measures how much the outcomes deviate from the mean: <img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7BVar%7D(X)%20=%20p(1%20-%20p).%0A"> The variance of a random variable <img src="https://latex.codecogs.com/png.latex?X"> measures how much the values of <img src="https://latex.codecogs.com/png.latex?X"> deviate from its mean: <img src="https://latex.codecogs.com/png.latex?%0AVar(X)%20=%20E%5B(X-E(X))%5E2%5D%0A"> expand this: <img src="https://latex.codecogs.com/png.latex?%0AVar(X)%20=%20E(X%5E2%20-%202pX%20+%20p%5E2)%0A"> Since <img src="https://latex.codecogs.com/png.latex?p%5E2"> is constant and <img src="https://latex.codecogs.com/png.latex?E(X)=%20p">, we have: <img src="https://latex.codecogs.com/png.latex?%0AVar(X)%20=%20E(X%5E2)%20-%202pE(X)%20+%20p%5E2%0A"></p>
<p>For a Bernoulli variable, <img src="https://latex.codecogs.com/png.latex?X%5E2%20=%20X"> (because <img src="https://latex.codecogs.com/png.latex?1%5E2%20=%201"> and <img src="https://latex.codecogs.com/png.latex?0%5E2=0">): <img src="https://latex.codecogs.com/png.latex?%0AE(X%5E2)%20=%20E(X)%20=%20p%0A"> Substituting back, <img src="https://latex.codecogs.com/png.latex?%0AVar(X)%20=%20p%20-%202p%5E2%20+%20p%20=%20p%20-%20p%5E2%20=%20p(1)%0A"> ### 📝 Standard Deviation The standard deviation is the square root of the variance: <img src="https://latex.codecogs.com/png.latex?%0A%5Csigma%20=%20%5Csqrt%7Bp(1%20-%20p)%7D.%0A"></p>
</section>
<section id="skewness" class="level3">
<h3 class="anchored" data-anchor-id="skewness">📏 Skewness</h3>
<p>Skewness measures the asymmetry of the distribution: <img src="https://latex.codecogs.com/png.latex?%0A%5Cgamma_1%20=%20%5Cfrac%7B1%20-%202p%7D%7B%5Csqrt%7Bp(1%20-%20p)%7D%7D.%0A"></p>
</section>
<section id="kurtosis" class="level3">
<h3 class="anchored" data-anchor-id="kurtosis">🛡️ Kurtosis</h3>
<p>The kurtosis of the Bernoulli distribution is: <img src="https://latex.codecogs.com/png.latex?%0A%5Cgamma_2%20=%20%5Cfrac%7B1%20-%206p(1%20-%20p)%7D%7Bp(1%20-%20p)%7D.%0A"></p>
</section>
<section id="variance-of-the-estimator-hatp" class="level3">
<h3 class="anchored" data-anchor-id="variance-of-the-estimator-hatp">Variance of the Estimator <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bp%7D"></h3>
<p>The estimator for <img src="https://latex.codecogs.com/png.latex?p"> based on <img src="https://latex.codecogs.com/png.latex?n"> independent observations <img src="https://latex.codecogs.com/png.latex?X_1,%20X_2,%20%5Cdots,%20X_n"> is the <strong>sample mean</strong>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7Bp%7D_n%20=%20%5Cfrac%7B1%7D%7Bn%7D%5Csigma%5E%7Bn%7D_%7Bi=1%7DX_i.%0A"></p>
</section>
</section>
<section id="key-characteristics" class="level2">
<h2 class="anchored" data-anchor-id="key-characteristics">📚 3. Key Characteristics</h2>
<ul>
<li><strong>Domain:</strong> ( x {0, 1} ).</li>
<li><strong>Parameter:</strong> Single parameter ( p ), where ( 0 p ).</li>
<li><strong>Support:</strong> The distribution is defined on two points: 0 and 1.</li>
<li><strong>Memoryless:</strong> The Bernoulli distribution is <strong>not</strong> memoryless.</li>
<li><strong>Special Case:</strong>
<ul>
<li>If ( p = 0.5 ), the distribution is symmetric.</li>
<li>If ( p ), the distribution is skewed.</li>
</ul></li>
</ul>
<hr>
</section>
<section id="relationship-to-other-distributions" class="level2">
<h2 class="anchored" data-anchor-id="relationship-to-other-distributions">🔗 4. Relationship to Other Distributions</h2>
<ul>
<li><p><strong>Binomial Distribution:</strong><br>
The Bernoulli distribution is a special case of the <strong>Binomial distribution</strong> with ( n = 1 ): <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BBernoulli%7D(p)%20=%20%5Ctext%7BBinomial%7D(n=1,%20p).%0A"></p></li>
<li><p><strong>Geometric Distribution:</strong><br>
A geometric random variable models the number of Bernoulli trials until the first success.</p></li>
<li><p><strong>Beta Distribution (Conjugate Prior):</strong><br>
In Bayesian statistics, the Beta distribution is the conjugate prior for the Bernoulli likelihood.</p></li>
</ul>
<hr>
</section>
<section id="applications-of-the-bernoulli-distribution" class="level2">
<h2 class="anchored" data-anchor-id="applications-of-the-bernoulli-distribution">🌐 5. Applications of the Bernoulli Distribution</h2>
<ul>
<li><strong>Modeling Binary Outcomes:</strong>
<ul>
<li>Coin flips (Heads/Tails)</li>
<li>Pass/Fail tests</li>
<li>Yes/No survey responses</li>
<li>On/Off states in systems</li>
</ul></li>
<li><strong>Machine Learning:</strong>
<ul>
<li>Logistic regression for binary classification.</li>
<li>Bernoulli Naive Bayes classifiers.</li>
</ul></li>
<li><strong>Statistical Inference:</strong>
<ul>
<li>Estimating proportions (e.g., percentage of people supporting a policy).</li>
</ul></li>
</ul>
<hr>
</section>
<section id="python-example-simulating-a-bernoulli-random-variable" class="level2">
<h2 class="anchored" data-anchor-id="python-example-simulating-a-bernoulli-random-variable">💻 6. Python Example: Simulating a Bernoulli Random Variable</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb1-4">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probability of success</span></span>
<span id="cb1-5">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of trials</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate Bernoulli trials</span></span>
<span id="cb1-8">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.binomial(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estimating p</span></span>
<span id="cb1-11">p_estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(data)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"True probability p: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Estimated probability p̂: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p_estimate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>math</category>
  <category>statistic</category>
  <guid>https://kimhungbui.github.io/posts/math-statistic-bernoulli-random-variable/bernoulli-random-variable.html</guid>
  <pubDate>Wed, 11 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Why we have normal distribution formular</title>
  <dc:creator>Your name</dc:creator>
  <link>https://kimhungbui.github.io/posts/math-statistic-why-normal-distribution-formular/</link>
  <description><![CDATA[ 





<p>To do</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kimhungbui.github.io/posts/math-statistic-why-normal-distribution-formular/dundee.jpg" class="img-fluid figure-img"></p>
<figcaption>This is just a photo I took last time I was in Dundee.</figcaption>
</figure>
</div>
<p>That’s it! go for it!</p>



 ]]></description>
  <category>math</category>
  <category>statistic</category>
  <guid>https://kimhungbui.github.io/posts/math-statistic-why-normal-distribution-formular/</guid>
  <pubDate>Wed, 11 Sep 2024 00:00:00 GMT</pubDate>
  <media:content url="https://kimhungbui.github.io/posts/math-statistic-why-normal-distribution-formular/dundee.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
